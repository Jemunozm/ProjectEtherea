
Borrador-Proyecto.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000083ec  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000994  08008590  08008590  00018590  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008f24  08008f24  000201f0  2**0
                  CONTENTS
  4 .ARM          00000000  08008f24  08008f24  000201f0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008f24  08008f24  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008f24  08008f24  00018f24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008f28  08008f28  00018f28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  08008f2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000050c  200001f0  0800911c  000201f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200006fc  0800911c  000206fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004103  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000dad  00000000  00000000  00024323  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000350  00000000  00000000  000250d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000002c8  00000000  00000000  00025420  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010dad  00000000  00000000  000256e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000045e0  00000000  00000000  00036495  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00058ade  00000000  00000000  0003aa75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00093553  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000023d8  00000000  00000000  000935a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f0 	.word	0x200001f0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008574 	.word	0x08008574

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f4 	.word	0x200001f4
 80001dc:	08008574 	.word	0x08008574

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff23 	bl	8000b0c <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc99 	bl	8000628 <__aeabi_dmul>
 8000cf6:	f7ff ff6f 	bl	8000bd8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc1a 	bl	8000534 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc90 	bl	8000628 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff fad2 	bl	80002b8 <__aeabi_dsub>
 8000d14:	f7ff ff60 	bl	8000bd8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000
 8000d24:	00000000 	.word	0x00000000

08000d28 <main>:
void calibrationDataAcc(void);
long getTemp(void);
long getPress(void);
void parseCommands(char *ptrBufferReception);

int main(void){
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0

	//Calibración del HSI
	RCC->CR &= ~RCC_CR_HSITRIM;
 8000d2c:	4bac      	ldr	r3, [pc, #688]	; (8000fe0 <main+0x2b8>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4aab      	ldr	r2, [pc, #684]	; (8000fe0 <main+0x2b8>)
 8000d32:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000d36:	6013      	str	r3, [r2, #0]
	RCC->CR |= (13 << RCC_CR_HSITRIM_Pos);
 8000d38:	4ba9      	ldr	r3, [pc, #676]	; (8000fe0 <main+0x2b8>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4aa8      	ldr	r2, [pc, #672]	; (8000fe0 <main+0x2b8>)
 8000d3e:	f043 0368 	orr.w	r3, r3, #104	; 0x68
 8000d42:	6013      	str	r3, [r2, #0]

	//Activación del coprocesador matemático
	SCB->CPACR |= (0xF << 20);
 8000d44:	4ba7      	ldr	r3, [pc, #668]	; (8000fe4 <main+0x2bc>)
 8000d46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d4a:	4aa6      	ldr	r2, [pc, #664]	; (8000fe4 <main+0x2bc>)
 8000d4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

	initSystem();
 8000d54:	f000 fb08 	bl	8001368 <initSystem>

	/* Como la válvula es normalmente abierta, se requiere que inmediatamente
	 * el sistema inicie la válvula se cierre para que sea posible la conexión con
	 * el tanque de combustible
	 */
	GPIO_WritePin(&handlerValvePin, SET);
 8000d58:	2101      	movs	r1, #1
 8000d5a:	48a3      	ldr	r0, [pc, #652]	; (8000fe8 <main+0x2c0>)
 8000d5c:	f001 fbca 	bl	80024f4 <GPIO_WritePin>

	/* Se imprimen los mensajes de inicio para dar info al usuario
	 * sobre el manejo del dispositivo
	 */

	writeMsg(&handlerUsart1, "\nPress . \n");
 8000d60:	49a2      	ldr	r1, [pc, #648]	; (8000fec <main+0x2c4>)
 8000d62:	48a3      	ldr	r0, [pc, #652]	; (8000ff0 <main+0x2c8>)
 8000d64:	f002 f96a 	bl	800303c <writeMsg>
	while(1){

		//Creamos una cadena de caracteres con los datos que llegan por el puerto serial
		//El caracter '@' nos indica que es el final de la cadena

		if ((rxData != '\0') && (rxData != '.')){
 8000d68:	4ba2      	ldr	r3, [pc, #648]	; (8000ff4 <main+0x2cc>)
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d023      	beq.n	8000db8 <main+0x90>
 8000d70:	4ba0      	ldr	r3, [pc, #640]	; (8000ff4 <main+0x2cc>)
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	2b2e      	cmp	r3, #46	; 0x2e
 8000d76:	d01f      	beq.n	8000db8 <main+0x90>
			bufferReception[counterReception] = rxData;
 8000d78:	4b9f      	ldr	r3, [pc, #636]	; (8000ff8 <main+0x2d0>)
 8000d7a:	881b      	ldrh	r3, [r3, #0]
 8000d7c:	461a      	mov	r2, r3
 8000d7e:	4b9d      	ldr	r3, [pc, #628]	; (8000ff4 <main+0x2cc>)
 8000d80:	7819      	ldrb	r1, [r3, #0]
 8000d82:	4b9e      	ldr	r3, [pc, #632]	; (8000ffc <main+0x2d4>)
 8000d84:	5499      	strb	r1, [r3, r2]
			counterReception++;
 8000d86:	4b9c      	ldr	r3, [pc, #624]	; (8000ff8 <main+0x2d0>)
 8000d88:	881b      	ldrh	r3, [r3, #0]
 8000d8a:	3301      	adds	r3, #1
 8000d8c:	b29a      	uxth	r2, r3
 8000d8e:	4b9a      	ldr	r3, [pc, #616]	; (8000ff8 <main+0x2d0>)
 8000d90:	801a      	strh	r2, [r3, #0]

			//Se define el siguiente caracter para indicar que el string está completo
			if(rxData == ','){
 8000d92:	4b98      	ldr	r3, [pc, #608]	; (8000ff4 <main+0x2cc>)
 8000d94:	781b      	ldrb	r3, [r3, #0]
 8000d96:	2b2c      	cmp	r3, #44	; 0x2c
 8000d98:	d10b      	bne.n	8000db2 <main+0x8a>

				stringComplete = true;
 8000d9a:	4b99      	ldr	r3, [pc, #612]	; (8001000 <main+0x2d8>)
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	701a      	strb	r2, [r3, #0]

				//Agrego esta línea para crear el string con null al final
				bufferReception[counterReception-1] = '\0';
 8000da0:	4b95      	ldr	r3, [pc, #596]	; (8000ff8 <main+0x2d0>)
 8000da2:	881b      	ldrh	r3, [r3, #0]
 8000da4:	3b01      	subs	r3, #1
 8000da6:	4a95      	ldr	r2, [pc, #596]	; (8000ffc <main+0x2d4>)
 8000da8:	2100      	movs	r1, #0
 8000daa:	54d1      	strb	r1, [r2, r3]

				counterReception = 0;
 8000dac:	4b92      	ldr	r3, [pc, #584]	; (8000ff8 <main+0x2d0>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	801a      	strh	r2, [r3, #0]
			}
			//Para que no vuelva a entrar, Solo cambia debido a la interrupción
			rxData = '\0';
 8000db2:	4b90      	ldr	r3, [pc, #576]	; (8000ff4 <main+0x2cc>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	701a      	strb	r2, [r3, #0]
		}
		if (rxData == '.'){
 8000db8:	4b8e      	ldr	r3, [pc, #568]	; (8000ff4 <main+0x2cc>)
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	2b2e      	cmp	r3, #46	; 0x2e
 8000dbe:	d11a      	bne.n	8000df6 <main+0xce>
			writeMsg(&handlerUsart1, "\n~Iniciando Sistema~\n");
 8000dc0:	4990      	ldr	r1, [pc, #576]	; (8001004 <main+0x2dc>)
 8000dc2:	488b      	ldr	r0, [pc, #556]	; (8000ff0 <main+0x2c8>)
 8000dc4:	f002 f93a 	bl	800303c <writeMsg>
			writeMsg(&handlerUsart1, "\nacc  -->  Calibración del Accel-Gyro \n");
 8000dc8:	498f      	ldr	r1, [pc, #572]	; (8001008 <main+0x2e0>)
 8000dca:	4889      	ldr	r0, [pc, #548]	; (8000ff0 <main+0x2c8>)
 8000dcc:	f002 f936 	bl	800303c <writeMsg>
			writeMsg(&handlerUsart1, "\nshow  -->  Presenta los datos actuales capturados por los sensores \n");
 8000dd0:	498e      	ldr	r1, [pc, #568]	; (800100c <main+0x2e4>)
 8000dd2:	4887      	ldr	r0, [pc, #540]	; (8000ff0 <main+0x2c8>)
 8000dd4:	f002 f932 	bl	800303c <writeMsg>
			writeMsg(&handlerUsart1, "\ndata  -->  Muestra de manera periodica los datos tomados por los sesores \n");
 8000dd8:	498d      	ldr	r1, [pc, #564]	; (8001010 <main+0x2e8>)
 8000dda:	4885      	ldr	r0, [pc, #532]	; (8000ff0 <main+0x2c8>)
 8000ddc:	f002 f92e 	bl	800303c <writeMsg>
			writeMsg(&handlerUsart1, "\nstop  -->  Detiene la muestra de datos \n");
 8000de0:	498c      	ldr	r1, [pc, #560]	; (8001014 <main+0x2ec>)
 8000de2:	4883      	ldr	r0, [pc, #524]	; (8000ff0 <main+0x2c8>)
 8000de4:	f002 f92a 	bl	800303c <writeMsg>
			writeMsg(&handlerUsart1, "\nvalve  -->  Alto o bajo para cerrar o abrir la valvula de combustible \n");
 8000de8:	498b      	ldr	r1, [pc, #556]	; (8001018 <main+0x2f0>)
 8000dea:	4881      	ldr	r0, [pc, #516]	; (8000ff0 <main+0x2c8>)
 8000dec:	f002 f926 	bl	800303c <writeMsg>
			rxData = '\0';
 8000df0:	4b80      	ldr	r3, [pc, #512]	; (8000ff4 <main+0x2cc>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	701a      	strb	r2, [r3, #0]
		}

		//Hacemos un análisis de la cadena de datos obtenida
		if(stringComplete){
 8000df6:	4b82      	ldr	r3, [pc, #520]	; (8001000 <main+0x2d8>)
 8000df8:	781b      	ldrb	r3, [r3, #0]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d005      	beq.n	8000e0a <main+0xe2>

			parseCommands(bufferReception);
 8000dfe:	487f      	ldr	r0, [pc, #508]	; (8000ffc <main+0x2d4>)
 8000e00:	f000 f93a 	bl	8001078 <parseCommands>
			stringComplete = false;
 8000e04:	4b7e      	ldr	r3, [pc, #504]	; (8001000 <main+0x2d8>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	701a      	strb	r2, [r3, #0]
		}

		if(dataOn == 1){
 8000e0a:	4b84      	ldr	r3, [pc, #528]	; (800101c <main+0x2f4>)
 8000e0c:	781b      	ldrb	r3, [r3, #0]
 8000e0e:	2b01      	cmp	r3, #1
 8000e10:	d1aa      	bne.n	8000d68 <main+0x40>

			if(flagData == 1){
 8000e12:	4b83      	ldr	r3, [pc, #524]	; (8001020 <main+0x2f8>)
 8000e14:	781b      	ldrb	r3, [r3, #0]
 8000e16:	2b01      	cmp	r3, #1
 8000e18:	d1a6      	bne.n	8000d68 <main+0x40>

				//Accel X
				sprintf(bufferData, "\nAceleración X: %.2f m/s²", ((float)AccelX*converFactAcc)-0.54);
 8000e1a:	4b82      	ldr	r3, [pc, #520]	; (8001024 <main+0x2fc>)
 8000e1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e20:	ee07 3a90 	vmov	s15, r3
 8000e24:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e28:	4b7f      	ldr	r3, [pc, #508]	; (8001028 <main+0x300>)
 8000e2a:	edd3 7a00 	vldr	s15, [r3]
 8000e2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e32:	ee17 0a90 	vmov	r0, s15
 8000e36:	f7ff fb9f 	bl	8000578 <__aeabi_f2d>
 8000e3a:	a363      	add	r3, pc, #396	; (adr r3, 8000fc8 <main+0x2a0>)
 8000e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e40:	f7ff fa3a 	bl	80002b8 <__aeabi_dsub>
 8000e44:	4602      	mov	r2, r0
 8000e46:	460b      	mov	r3, r1
 8000e48:	4978      	ldr	r1, [pc, #480]	; (800102c <main+0x304>)
 8000e4a:	4879      	ldr	r0, [pc, #484]	; (8001030 <main+0x308>)
 8000e4c:	f003 f958 	bl	8004100 <siprintf>
				writeMsg(&handlerUsart1, bufferData);
 8000e50:	4977      	ldr	r1, [pc, #476]	; (8001030 <main+0x308>)
 8000e52:	4867      	ldr	r0, [pc, #412]	; (8000ff0 <main+0x2c8>)
 8000e54:	f002 f8f2 	bl	800303c <writeMsg>

				//Accel Y
				sprintf(bufferData, "\nAceleración Y: %.2f m/s²", ((float)AccelY*converFactAcc)+0.15);
 8000e58:	4b76      	ldr	r3, [pc, #472]	; (8001034 <main+0x30c>)
 8000e5a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e5e:	ee07 3a90 	vmov	s15, r3
 8000e62:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e66:	4b70      	ldr	r3, [pc, #448]	; (8001028 <main+0x300>)
 8000e68:	edd3 7a00 	vldr	s15, [r3]
 8000e6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e70:	ee17 0a90 	vmov	r0, s15
 8000e74:	f7ff fb80 	bl	8000578 <__aeabi_f2d>
 8000e78:	a355      	add	r3, pc, #340	; (adr r3, 8000fd0 <main+0x2a8>)
 8000e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e7e:	f7ff fa1d 	bl	80002bc <__adddf3>
 8000e82:	4602      	mov	r2, r0
 8000e84:	460b      	mov	r3, r1
 8000e86:	496c      	ldr	r1, [pc, #432]	; (8001038 <main+0x310>)
 8000e88:	4869      	ldr	r0, [pc, #420]	; (8001030 <main+0x308>)
 8000e8a:	f003 f939 	bl	8004100 <siprintf>
				writeMsg(&handlerUsart1, bufferData);
 8000e8e:	4968      	ldr	r1, [pc, #416]	; (8001030 <main+0x308>)
 8000e90:	4857      	ldr	r0, [pc, #348]	; (8000ff0 <main+0x2c8>)
 8000e92:	f002 f8d3 	bl	800303c <writeMsg>

				//Accel Z
				sprintf(bufferData, "\nAceleración Z: %.2f m/s²", ((float)AccelZ*converFactAcc)+0.47);
 8000e96:	4b69      	ldr	r3, [pc, #420]	; (800103c <main+0x314>)
 8000e98:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e9c:	ee07 3a90 	vmov	s15, r3
 8000ea0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ea4:	4b60      	ldr	r3, [pc, #384]	; (8001028 <main+0x300>)
 8000ea6:	edd3 7a00 	vldr	s15, [r3]
 8000eaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000eae:	ee17 0a90 	vmov	r0, s15
 8000eb2:	f7ff fb61 	bl	8000578 <__aeabi_f2d>
 8000eb6:	a348      	add	r3, pc, #288	; (adr r3, 8000fd8 <main+0x2b0>)
 8000eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ebc:	f7ff f9fe 	bl	80002bc <__adddf3>
 8000ec0:	4602      	mov	r2, r0
 8000ec2:	460b      	mov	r3, r1
 8000ec4:	495e      	ldr	r1, [pc, #376]	; (8001040 <main+0x318>)
 8000ec6:	485a      	ldr	r0, [pc, #360]	; (8001030 <main+0x308>)
 8000ec8:	f003 f91a 	bl	8004100 <siprintf>
				writeMsg(&handlerUsart1, bufferData);
 8000ecc:	4958      	ldr	r1, [pc, #352]	; (8001030 <main+0x308>)
 8000ece:	4848      	ldr	r0, [pc, #288]	; (8000ff0 <main+0x2c8>)
 8000ed0:	f002 f8b4 	bl	800303c <writeMsg>

				//Gyro X
				sprintf(bufferData, "\nÁngulo X: %.2f °", (float)GyrX*converFactGyr);
 8000ed4:	4b5b      	ldr	r3, [pc, #364]	; (8001044 <main+0x31c>)
 8000ed6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000eda:	ee07 3a90 	vmov	s15, r3
 8000ede:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ee2:	4b59      	ldr	r3, [pc, #356]	; (8001048 <main+0x320>)
 8000ee4:	edd3 7a00 	vldr	s15, [r3]
 8000ee8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000eec:	ee17 0a90 	vmov	r0, s15
 8000ef0:	f7ff fb42 	bl	8000578 <__aeabi_f2d>
 8000ef4:	4602      	mov	r2, r0
 8000ef6:	460b      	mov	r3, r1
 8000ef8:	4954      	ldr	r1, [pc, #336]	; (800104c <main+0x324>)
 8000efa:	484d      	ldr	r0, [pc, #308]	; (8001030 <main+0x308>)
 8000efc:	f003 f900 	bl	8004100 <siprintf>
				writeMsg(&handlerUsart1, bufferData);
 8000f00:	494b      	ldr	r1, [pc, #300]	; (8001030 <main+0x308>)
 8000f02:	483b      	ldr	r0, [pc, #236]	; (8000ff0 <main+0x2c8>)
 8000f04:	f002 f89a 	bl	800303c <writeMsg>

				//Gyro Y
				sprintf(bufferData, "\nÁngulo Y: %.2f °", (float)GyrY*converFactGyr);
 8000f08:	4b51      	ldr	r3, [pc, #324]	; (8001050 <main+0x328>)
 8000f0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f0e:	ee07 3a90 	vmov	s15, r3
 8000f12:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f16:	4b4c      	ldr	r3, [pc, #304]	; (8001048 <main+0x320>)
 8000f18:	edd3 7a00 	vldr	s15, [r3]
 8000f1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f20:	ee17 0a90 	vmov	r0, s15
 8000f24:	f7ff fb28 	bl	8000578 <__aeabi_f2d>
 8000f28:	4602      	mov	r2, r0
 8000f2a:	460b      	mov	r3, r1
 8000f2c:	4949      	ldr	r1, [pc, #292]	; (8001054 <main+0x32c>)
 8000f2e:	4840      	ldr	r0, [pc, #256]	; (8001030 <main+0x308>)
 8000f30:	f003 f8e6 	bl	8004100 <siprintf>
				writeMsg(&handlerUsart1, bufferData);
 8000f34:	493e      	ldr	r1, [pc, #248]	; (8001030 <main+0x308>)
 8000f36:	482e      	ldr	r0, [pc, #184]	; (8000ff0 <main+0x2c8>)
 8000f38:	f002 f880 	bl	800303c <writeMsg>

				//Gyro Z
				sprintf(bufferData, "\nÁngulo Z: %.2f °", (float)GyrZ*converFactGyr);
 8000f3c:	4b46      	ldr	r3, [pc, #280]	; (8001058 <main+0x330>)
 8000f3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f42:	ee07 3a90 	vmov	s15, r3
 8000f46:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f4a:	4b3f      	ldr	r3, [pc, #252]	; (8001048 <main+0x320>)
 8000f4c:	edd3 7a00 	vldr	s15, [r3]
 8000f50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f54:	ee17 0a90 	vmov	r0, s15
 8000f58:	f7ff fb0e 	bl	8000578 <__aeabi_f2d>
 8000f5c:	4602      	mov	r2, r0
 8000f5e:	460b      	mov	r3, r1
 8000f60:	493e      	ldr	r1, [pc, #248]	; (800105c <main+0x334>)
 8000f62:	4833      	ldr	r0, [pc, #204]	; (8001030 <main+0x308>)
 8000f64:	f003 f8cc 	bl	8004100 <siprintf>
				writeMsg(&handlerUsart1, bufferData);
 8000f68:	4931      	ldr	r1, [pc, #196]	; (8001030 <main+0x308>)
 8000f6a:	4821      	ldr	r0, [pc, #132]	; (8000ff0 <main+0x2c8>)
 8000f6c:	f002 f866 	bl	800303c <writeMsg>

				//Presión
				sprintf(bufferData, "\nPresión: %.2f hPa", (float)Press);
 8000f70:	4b3b      	ldr	r3, [pc, #236]	; (8001060 <main+0x338>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4618      	mov	r0, r3
 8000f76:	f7ff faff 	bl	8000578 <__aeabi_f2d>
 8000f7a:	4602      	mov	r2, r0
 8000f7c:	460b      	mov	r3, r1
 8000f7e:	4939      	ldr	r1, [pc, #228]	; (8001064 <main+0x33c>)
 8000f80:	482b      	ldr	r0, [pc, #172]	; (8001030 <main+0x308>)
 8000f82:	f003 f8bd 	bl	8004100 <siprintf>
				writeMsg(&handlerUsart1, bufferData);
 8000f86:	492a      	ldr	r1, [pc, #168]	; (8001030 <main+0x308>)
 8000f88:	4819      	ldr	r0, [pc, #100]	; (8000ff0 <main+0x2c8>)
 8000f8a:	f002 f857 	bl	800303c <writeMsg>

				//Temperatura
				sprintf(bufferData, "\nTemperatura: %.2f°C", (float)Temp);
 8000f8e:	4b36      	ldr	r3, [pc, #216]	; (8001068 <main+0x340>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	4618      	mov	r0, r3
 8000f94:	f7ff faf0 	bl	8000578 <__aeabi_f2d>
 8000f98:	4602      	mov	r2, r0
 8000f9a:	460b      	mov	r3, r1
 8000f9c:	4933      	ldr	r1, [pc, #204]	; (800106c <main+0x344>)
 8000f9e:	4824      	ldr	r0, [pc, #144]	; (8001030 <main+0x308>)
 8000fa0:	f003 f8ae 	bl	8004100 <siprintf>
				writeMsg(&handlerUsart1, bufferData);
 8000fa4:	4922      	ldr	r1, [pc, #136]	; (8001030 <main+0x308>)
 8000fa6:	4812      	ldr	r0, [pc, #72]	; (8000ff0 <main+0x2c8>)
 8000fa8:	f002 f848 	bl	800303c <writeMsg>

				writeMsg(&handlerUsart1, "\n--------------------------------------------------------------------------------------------");
 8000fac:	4930      	ldr	r1, [pc, #192]	; (8001070 <main+0x348>)
 8000fae:	4810      	ldr	r0, [pc, #64]	; (8000ff0 <main+0x2c8>)
 8000fb0:	f002 f844 	bl	800303c <writeMsg>
				rxData = '\0';
 8000fb4:	4b0f      	ldr	r3, [pc, #60]	; (8000ff4 <main+0x2cc>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	701a      	strb	r2, [r3, #0]

				flagData = 0;
 8000fba:	4b19      	ldr	r3, [pc, #100]	; (8001020 <main+0x2f8>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	701a      	strb	r2, [r3, #0]
		if ((rxData != '\0') && (rxData != '.')){
 8000fc0:	e6d2      	b.n	8000d68 <main+0x40>
 8000fc2:	bf00      	nop
 8000fc4:	f3af 8000 	nop.w
 8000fc8:	147ae148 	.word	0x147ae148
 8000fcc:	3fe147ae 	.word	0x3fe147ae
 8000fd0:	33333333 	.word	0x33333333
 8000fd4:	3fc33333 	.word	0x3fc33333
 8000fd8:	e147ae14 	.word	0xe147ae14
 8000fdc:	3fde147a 	.word	0x3fde147a
 8000fe0:	40023800 	.word	0x40023800
 8000fe4:	e000ed00 	.word	0xe000ed00
 8000fe8:	2000023c 	.word	0x2000023c
 8000fec:	08008590 	.word	0x08008590
 8000ff0:	20000270 	.word	0x20000270
 8000ff4:	200003b8 	.word	0x200003b8
 8000ff8:	200003fe 	.word	0x200003fe
 8000ffc:	20000500 	.word	0x20000500
 8001000:	200003fc 	.word	0x200003fc
 8001004:	0800859c 	.word	0x0800859c
 8001008:	080085b4 	.word	0x080085b4
 800100c:	080085e0 	.word	0x080085e0
 8001010:	08008628 	.word	0x08008628
 8001014:	08008674 	.word	0x08008674
 8001018:	080086a0 	.word	0x080086a0
 800101c:	200003ba 	.word	0x200003ba
 8001020:	200003b9 	.word	0x200003b9
 8001024:	20000600 	.word	0x20000600
 8001028:	20000000 	.word	0x20000000
 800102c:	080086ec 	.word	0x080086ec
 8001030:	200003bc 	.word	0x200003bc
 8001034:	20000602 	.word	0x20000602
 8001038:	08008708 	.word	0x08008708
 800103c:	20000604 	.word	0x20000604
 8001040:	08008724 	.word	0x08008724
 8001044:	20000606 	.word	0x20000606
 8001048:	20000004 	.word	0x20000004
 800104c:	08008740 	.word	0x08008740
 8001050:	20000608 	.word	0x20000608
 8001054:	08008754 	.word	0x08008754
 8001058:	2000060a 	.word	0x2000060a
 800105c:	08008768 	.word	0x08008768
 8001060:	2000060c 	.word	0x2000060c
 8001064:	0800877c 	.word	0x0800877c
 8001068:	20000610 	.word	0x20000610
 800106c:	08008790 	.word	0x08008790
 8001070:	080087a8 	.word	0x080087a8
 8001074:	00000000 	.word	0x00000000

08001078 <parseCommands>:
		}
	}
	return 0;
}

void parseCommands(char *ptrBufferReception){
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]

	sscanf(ptrBufferReception, "%s", cmd);
 8001080:	4a97      	ldr	r2, [pc, #604]	; (80012e0 <parseCommands+0x268>)
 8001082:	4998      	ldr	r1, [pc, #608]	; (80012e4 <parseCommands+0x26c>)
 8001084:	6878      	ldr	r0, [r7, #4]
 8001086:	f003 f85b 	bl	8004140 <siscanf>

	if(strcmp(cmd, "acc") == 0){
 800108a:	4997      	ldr	r1, [pc, #604]	; (80012e8 <parseCommands+0x270>)
 800108c:	4894      	ldr	r0, [pc, #592]	; (80012e0 <parseCommands+0x268>)
 800108e:	f7ff f8a7 	bl	80001e0 <strcmp>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d102      	bne.n	800109e <parseCommands+0x26>

		//Inicialización del MPU6050
		MPU6050();
 8001098:	f000 fb2c 	bl	80016f4 <MPU6050>
		}
	}
	else{
		writeMsg(&handlerUsart1, "\nError!: Wrong command \n");
	}
}
 800109c:	e110      	b.n	80012c0 <parseCommands+0x248>
	else if(strcmp(cmd, "show") == 0){
 800109e:	4993      	ldr	r1, [pc, #588]	; (80012ec <parseCommands+0x274>)
 80010a0:	488f      	ldr	r0, [pc, #572]	; (80012e0 <parseCommands+0x268>)
 80010a2:	f7ff f89d 	bl	80001e0 <strcmp>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	f040 80d5 	bne.w	8001258 <parseCommands+0x1e0>
		calibrationDataAcc();
 80010ae:	f000 fcb7 	bl	8001a20 <calibrationDataAcc>
		BMP085();
 80010b2:	f000 fa93 	bl	80015dc <BMP085>
		sprintf(bufferData, "\nLa aceleración en X es: %.2f m/s² \n", ((float)AccelX*converFactAcc)-0.54);
 80010b6:	4b8e      	ldr	r3, [pc, #568]	; (80012f0 <parseCommands+0x278>)
 80010b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010bc:	ee07 3a90 	vmov	s15, r3
 80010c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010c4:	4b8b      	ldr	r3, [pc, #556]	; (80012f4 <parseCommands+0x27c>)
 80010c6:	edd3 7a00 	vldr	s15, [r3]
 80010ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010ce:	ee17 0a90 	vmov	r0, s15
 80010d2:	f7ff fa51 	bl	8000578 <__aeabi_f2d>
 80010d6:	a37c      	add	r3, pc, #496	; (adr r3, 80012c8 <parseCommands+0x250>)
 80010d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010dc:	f7ff f8ec 	bl	80002b8 <__aeabi_dsub>
 80010e0:	4602      	mov	r2, r0
 80010e2:	460b      	mov	r3, r1
 80010e4:	4984      	ldr	r1, [pc, #528]	; (80012f8 <parseCommands+0x280>)
 80010e6:	4885      	ldr	r0, [pc, #532]	; (80012fc <parseCommands+0x284>)
 80010e8:	f003 f80a 	bl	8004100 <siprintf>
		writeMsg(&handlerUsart1, bufferData);
 80010ec:	4983      	ldr	r1, [pc, #524]	; (80012fc <parseCommands+0x284>)
 80010ee:	4884      	ldr	r0, [pc, #528]	; (8001300 <parseCommands+0x288>)
 80010f0:	f001 ffa4 	bl	800303c <writeMsg>
		sprintf(bufferData, "\nLa aceleración en Y es: %.2f m/s² \n", ((float)AccelY*converFactAcc)+0.15);
 80010f4:	4b83      	ldr	r3, [pc, #524]	; (8001304 <parseCommands+0x28c>)
 80010f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010fa:	ee07 3a90 	vmov	s15, r3
 80010fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001102:	4b7c      	ldr	r3, [pc, #496]	; (80012f4 <parseCommands+0x27c>)
 8001104:	edd3 7a00 	vldr	s15, [r3]
 8001108:	ee67 7a27 	vmul.f32	s15, s14, s15
 800110c:	ee17 0a90 	vmov	r0, s15
 8001110:	f7ff fa32 	bl	8000578 <__aeabi_f2d>
 8001114:	a36e      	add	r3, pc, #440	; (adr r3, 80012d0 <parseCommands+0x258>)
 8001116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800111a:	f7ff f8cf 	bl	80002bc <__adddf3>
 800111e:	4602      	mov	r2, r0
 8001120:	460b      	mov	r3, r1
 8001122:	4979      	ldr	r1, [pc, #484]	; (8001308 <parseCommands+0x290>)
 8001124:	4875      	ldr	r0, [pc, #468]	; (80012fc <parseCommands+0x284>)
 8001126:	f002 ffeb 	bl	8004100 <siprintf>
		writeMsg(&handlerUsart1, bufferData);
 800112a:	4974      	ldr	r1, [pc, #464]	; (80012fc <parseCommands+0x284>)
 800112c:	4874      	ldr	r0, [pc, #464]	; (8001300 <parseCommands+0x288>)
 800112e:	f001 ff85 	bl	800303c <writeMsg>
		sprintf(bufferData, "\nLa aceleración en Z es: %.2f m/s² \n", ((float)AccelZ*converFactAcc)+0.47);
 8001132:	4b76      	ldr	r3, [pc, #472]	; (800130c <parseCommands+0x294>)
 8001134:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001138:	ee07 3a90 	vmov	s15, r3
 800113c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001140:	4b6c      	ldr	r3, [pc, #432]	; (80012f4 <parseCommands+0x27c>)
 8001142:	edd3 7a00 	vldr	s15, [r3]
 8001146:	ee67 7a27 	vmul.f32	s15, s14, s15
 800114a:	ee17 0a90 	vmov	r0, s15
 800114e:	f7ff fa13 	bl	8000578 <__aeabi_f2d>
 8001152:	a361      	add	r3, pc, #388	; (adr r3, 80012d8 <parseCommands+0x260>)
 8001154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001158:	f7ff f8b0 	bl	80002bc <__adddf3>
 800115c:	4602      	mov	r2, r0
 800115e:	460b      	mov	r3, r1
 8001160:	496b      	ldr	r1, [pc, #428]	; (8001310 <parseCommands+0x298>)
 8001162:	4866      	ldr	r0, [pc, #408]	; (80012fc <parseCommands+0x284>)
 8001164:	f002 ffcc 	bl	8004100 <siprintf>
		writeMsg(&handlerUsart1, bufferData);
 8001168:	4964      	ldr	r1, [pc, #400]	; (80012fc <parseCommands+0x284>)
 800116a:	4865      	ldr	r0, [pc, #404]	; (8001300 <parseCommands+0x288>)
 800116c:	f001 ff66 	bl	800303c <writeMsg>
		sprintf(bufferData, "\nEl ángulo en X es: %.2f ° \n", (float)GyrX*converFactGyr);
 8001170:	4b68      	ldr	r3, [pc, #416]	; (8001314 <parseCommands+0x29c>)
 8001172:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001176:	ee07 3a90 	vmov	s15, r3
 800117a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800117e:	4b66      	ldr	r3, [pc, #408]	; (8001318 <parseCommands+0x2a0>)
 8001180:	edd3 7a00 	vldr	s15, [r3]
 8001184:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001188:	ee17 0a90 	vmov	r0, s15
 800118c:	f7ff f9f4 	bl	8000578 <__aeabi_f2d>
 8001190:	4602      	mov	r2, r0
 8001192:	460b      	mov	r3, r1
 8001194:	4961      	ldr	r1, [pc, #388]	; (800131c <parseCommands+0x2a4>)
 8001196:	4859      	ldr	r0, [pc, #356]	; (80012fc <parseCommands+0x284>)
 8001198:	f002 ffb2 	bl	8004100 <siprintf>
		writeMsg(&handlerUsart1, bufferData);
 800119c:	4957      	ldr	r1, [pc, #348]	; (80012fc <parseCommands+0x284>)
 800119e:	4858      	ldr	r0, [pc, #352]	; (8001300 <parseCommands+0x288>)
 80011a0:	f001 ff4c 	bl	800303c <writeMsg>
		sprintf(bufferData, "\nEl ángulo en Y es: %.2f ° \n", (float)GyrY*converFactGyr);
 80011a4:	4b5e      	ldr	r3, [pc, #376]	; (8001320 <parseCommands+0x2a8>)
 80011a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011aa:	ee07 3a90 	vmov	s15, r3
 80011ae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011b2:	4b59      	ldr	r3, [pc, #356]	; (8001318 <parseCommands+0x2a0>)
 80011b4:	edd3 7a00 	vldr	s15, [r3]
 80011b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011bc:	ee17 0a90 	vmov	r0, s15
 80011c0:	f7ff f9da 	bl	8000578 <__aeabi_f2d>
 80011c4:	4602      	mov	r2, r0
 80011c6:	460b      	mov	r3, r1
 80011c8:	4956      	ldr	r1, [pc, #344]	; (8001324 <parseCommands+0x2ac>)
 80011ca:	484c      	ldr	r0, [pc, #304]	; (80012fc <parseCommands+0x284>)
 80011cc:	f002 ff98 	bl	8004100 <siprintf>
		writeMsg(&handlerUsart1, bufferData);
 80011d0:	494a      	ldr	r1, [pc, #296]	; (80012fc <parseCommands+0x284>)
 80011d2:	484b      	ldr	r0, [pc, #300]	; (8001300 <parseCommands+0x288>)
 80011d4:	f001 ff32 	bl	800303c <writeMsg>
		sprintf(bufferData, "\nEl ángulo en Z es: %.2f °\n", (float)GyrZ*converFactGyr);
 80011d8:	4b53      	ldr	r3, [pc, #332]	; (8001328 <parseCommands+0x2b0>)
 80011da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011de:	ee07 3a90 	vmov	s15, r3
 80011e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011e6:	4b4c      	ldr	r3, [pc, #304]	; (8001318 <parseCommands+0x2a0>)
 80011e8:	edd3 7a00 	vldr	s15, [r3]
 80011ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011f0:	ee17 0a90 	vmov	r0, s15
 80011f4:	f7ff f9c0 	bl	8000578 <__aeabi_f2d>
 80011f8:	4602      	mov	r2, r0
 80011fa:	460b      	mov	r3, r1
 80011fc:	494b      	ldr	r1, [pc, #300]	; (800132c <parseCommands+0x2b4>)
 80011fe:	483f      	ldr	r0, [pc, #252]	; (80012fc <parseCommands+0x284>)
 8001200:	f002 ff7e 	bl	8004100 <siprintf>
		writeMsg(&handlerUsart1, bufferData);
 8001204:	493d      	ldr	r1, [pc, #244]	; (80012fc <parseCommands+0x284>)
 8001206:	483e      	ldr	r0, [pc, #248]	; (8001300 <parseCommands+0x288>)
 8001208:	f001 ff18 	bl	800303c <writeMsg>
		sprintf(bufferData, "\nLa presión es: %.2f hPa \n", (float)Press);
 800120c:	4b48      	ldr	r3, [pc, #288]	; (8001330 <parseCommands+0x2b8>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4618      	mov	r0, r3
 8001212:	f7ff f9b1 	bl	8000578 <__aeabi_f2d>
 8001216:	4602      	mov	r2, r0
 8001218:	460b      	mov	r3, r1
 800121a:	4946      	ldr	r1, [pc, #280]	; (8001334 <parseCommands+0x2bc>)
 800121c:	4837      	ldr	r0, [pc, #220]	; (80012fc <parseCommands+0x284>)
 800121e:	f002 ff6f 	bl	8004100 <siprintf>
		writeMsg(&handlerUsart1, bufferData);
 8001222:	4936      	ldr	r1, [pc, #216]	; (80012fc <parseCommands+0x284>)
 8001224:	4836      	ldr	r0, [pc, #216]	; (8001300 <parseCommands+0x288>)
 8001226:	f001 ff09 	bl	800303c <writeMsg>
		sprintf(bufferData, "\nLa temperatura es: %.2f°C \n", (float)Temp);
 800122a:	4b43      	ldr	r3, [pc, #268]	; (8001338 <parseCommands+0x2c0>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4618      	mov	r0, r3
 8001230:	f7ff f9a2 	bl	8000578 <__aeabi_f2d>
 8001234:	4602      	mov	r2, r0
 8001236:	460b      	mov	r3, r1
 8001238:	4940      	ldr	r1, [pc, #256]	; (800133c <parseCommands+0x2c4>)
 800123a:	4830      	ldr	r0, [pc, #192]	; (80012fc <parseCommands+0x284>)
 800123c:	f002 ff60 	bl	8004100 <siprintf>
		writeMsg(&handlerUsart1, bufferData);
 8001240:	492e      	ldr	r1, [pc, #184]	; (80012fc <parseCommands+0x284>)
 8001242:	482f      	ldr	r0, [pc, #188]	; (8001300 <parseCommands+0x288>)
 8001244:	f001 fefa 	bl	800303c <writeMsg>
		writeMsg(&handlerUsart1, "\n--------------------------------------------------------------------------------------------\n");
 8001248:	493d      	ldr	r1, [pc, #244]	; (8001340 <parseCommands+0x2c8>)
 800124a:	482d      	ldr	r0, [pc, #180]	; (8001300 <parseCommands+0x288>)
 800124c:	f001 fef6 	bl	800303c <writeMsg>
		rxData = '\0';
 8001250:	4b3c      	ldr	r3, [pc, #240]	; (8001344 <parseCommands+0x2cc>)
 8001252:	2200      	movs	r2, #0
 8001254:	701a      	strb	r2, [r3, #0]
}
 8001256:	e033      	b.n	80012c0 <parseCommands+0x248>
	else if(strcmp(cmd, "data") == 0){
 8001258:	493b      	ldr	r1, [pc, #236]	; (8001348 <parseCommands+0x2d0>)
 800125a:	4821      	ldr	r0, [pc, #132]	; (80012e0 <parseCommands+0x268>)
 800125c:	f7fe ffc0 	bl	80001e0 <strcmp>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d103      	bne.n	800126e <parseCommands+0x1f6>
		dataOn = 1;
 8001266:	4b39      	ldr	r3, [pc, #228]	; (800134c <parseCommands+0x2d4>)
 8001268:	2201      	movs	r2, #1
 800126a:	701a      	strb	r2, [r3, #0]
}
 800126c:	e028      	b.n	80012c0 <parseCommands+0x248>
	else if(strcmp(cmd, "stop") == 0){
 800126e:	4938      	ldr	r1, [pc, #224]	; (8001350 <parseCommands+0x2d8>)
 8001270:	481b      	ldr	r0, [pc, #108]	; (80012e0 <parseCommands+0x268>)
 8001272:	f7fe ffb5 	bl	80001e0 <strcmp>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d103      	bne.n	8001284 <parseCommands+0x20c>
		dataOn = 0;
 800127c:	4b33      	ldr	r3, [pc, #204]	; (800134c <parseCommands+0x2d4>)
 800127e:	2200      	movs	r2, #0
 8001280:	701a      	strb	r2, [r3, #0]
}
 8001282:	e01d      	b.n	80012c0 <parseCommands+0x248>
	else if(strcmp(cmd, "valve") == 0){
 8001284:	4933      	ldr	r1, [pc, #204]	; (8001354 <parseCommands+0x2dc>)
 8001286:	4816      	ldr	r0, [pc, #88]	; (80012e0 <parseCommands+0x268>)
 8001288:	f7fe ffaa 	bl	80001e0 <strcmp>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d112      	bne.n	80012b8 <parseCommands+0x240>
		GPIOxTooglePin(&handlerValvePin);
 8001292:	4831      	ldr	r0, [pc, #196]	; (8001358 <parseCommands+0x2e0>)
 8001294:	f001 f96f 	bl	8002576 <GPIOxTooglePin>
		if(GPIO_ReadPin(&handlerValvePin) == 1){
 8001298:	482f      	ldr	r0, [pc, #188]	; (8001358 <parseCommands+0x2e0>)
 800129a:	f001 f956 	bl	800254a <GPIO_ReadPin>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b01      	cmp	r3, #1
 80012a2:	d104      	bne.n	80012ae <parseCommands+0x236>
			writeMsg(&handlerUsart1, "\nVálvula cerrada \n");
 80012a4:	492d      	ldr	r1, [pc, #180]	; (800135c <parseCommands+0x2e4>)
 80012a6:	4816      	ldr	r0, [pc, #88]	; (8001300 <parseCommands+0x288>)
 80012a8:	f001 fec8 	bl	800303c <writeMsg>
}
 80012ac:	e008      	b.n	80012c0 <parseCommands+0x248>
			writeMsg(&handlerUsart1, "\nVálvula abierta \n");
 80012ae:	492c      	ldr	r1, [pc, #176]	; (8001360 <parseCommands+0x2e8>)
 80012b0:	4813      	ldr	r0, [pc, #76]	; (8001300 <parseCommands+0x288>)
 80012b2:	f001 fec3 	bl	800303c <writeMsg>
}
 80012b6:	e003      	b.n	80012c0 <parseCommands+0x248>
		writeMsg(&handlerUsart1, "\nError!: Wrong command \n");
 80012b8:	492a      	ldr	r1, [pc, #168]	; (8001364 <parseCommands+0x2ec>)
 80012ba:	4811      	ldr	r0, [pc, #68]	; (8001300 <parseCommands+0x288>)
 80012bc:	f001 febe 	bl	800303c <writeMsg>
}
 80012c0:	bf00      	nop
 80012c2:	3708      	adds	r7, #8
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	147ae148 	.word	0x147ae148
 80012cc:	3fe147ae 	.word	0x3fe147ae
 80012d0:	33333333 	.word	0x33333333
 80012d4:	3fc33333 	.word	0x3fc33333
 80012d8:	e147ae14 	.word	0xe147ae14
 80012dc:	3fde147a 	.word	0x3fde147a
 80012e0:	20000400 	.word	0x20000400
 80012e4:	08008808 	.word	0x08008808
 80012e8:	0800880c 	.word	0x0800880c
 80012ec:	08008810 	.word	0x08008810
 80012f0:	20000600 	.word	0x20000600
 80012f4:	20000000 	.word	0x20000000
 80012f8:	08008818 	.word	0x08008818
 80012fc:	200003bc 	.word	0x200003bc
 8001300:	20000270 	.word	0x20000270
 8001304:	20000602 	.word	0x20000602
 8001308:	08008840 	.word	0x08008840
 800130c:	20000604 	.word	0x20000604
 8001310:	08008868 	.word	0x08008868
 8001314:	20000606 	.word	0x20000606
 8001318:	20000004 	.word	0x20000004
 800131c:	08008890 	.word	0x08008890
 8001320:	20000608 	.word	0x20000608
 8001324:	080088b0 	.word	0x080088b0
 8001328:	2000060a 	.word	0x2000060a
 800132c:	080088d0 	.word	0x080088d0
 8001330:	2000060c 	.word	0x2000060c
 8001334:	080088f0 	.word	0x080088f0
 8001338:	20000610 	.word	0x20000610
 800133c:	0800890c 	.word	0x0800890c
 8001340:	0800892c 	.word	0x0800892c
 8001344:	200003b8 	.word	0x200003b8
 8001348:	0800898c 	.word	0x0800898c
 800134c:	200003ba 	.word	0x200003ba
 8001350:	08008994 	.word	0x08008994
 8001354:	0800899c 	.word	0x0800899c
 8001358:	2000023c 	.word	0x2000023c
 800135c:	080089a4 	.word	0x080089a4
 8001360:	080089b8 	.word	0x080089b8
 8001364:	080089cc 	.word	0x080089cc

08001368 <initSystem>:

void initSystem(void){
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0

	//Configuración del Blinky
	handlerBlinky.pGPIOx 									= GPIOC;
 800136c:	4b87      	ldr	r3, [pc, #540]	; (800158c <initSystem+0x224>)
 800136e:	4a88      	ldr	r2, [pc, #544]	; (8001590 <initSystem+0x228>)
 8001370:	601a      	str	r2, [r3, #0]
	handlerBlinky.GPIO_PinConfig.GPIO_PinNumber 			= PIN_0;
 8001372:	4b86      	ldr	r3, [pc, #536]	; (800158c <initSystem+0x224>)
 8001374:	2200      	movs	r2, #0
 8001376:	711a      	strb	r2, [r3, #4]
	handlerBlinky.GPIO_PinConfig.GPIO_PinMode 				= GPIO_MODE_OUT;
 8001378:	4b84      	ldr	r3, [pc, #528]	; (800158c <initSystem+0x224>)
 800137a:	2201      	movs	r2, #1
 800137c:	715a      	strb	r2, [r3, #5]
	handlerBlinky.GPIO_PinConfig.GPIO_PinOPType 			= GPIO_OTYPE_PUSHPULL;
 800137e:	4b83      	ldr	r3, [pc, #524]	; (800158c <initSystem+0x224>)
 8001380:	2200      	movs	r2, #0
 8001382:	721a      	strb	r2, [r3, #8]
	handlerBlinky.GPIO_PinConfig.GPIO_PinSpeed 				= GPIO_OSPEEDR_FAST;
 8001384:	4b81      	ldr	r3, [pc, #516]	; (800158c <initSystem+0x224>)
 8001386:	2202      	movs	r2, #2
 8001388:	719a      	strb	r2, [r3, #6]
	handlerBlinky.GPIO_PinConfig.GPIO_PinPuPdControl 		= GPIO_PUPDR_NOTHING;
 800138a:	4b80      	ldr	r3, [pc, #512]	; (800158c <initSystem+0x224>)
 800138c:	2200      	movs	r2, #0
 800138e:	71da      	strb	r2, [r3, #7]
	GPIO_Config(&handlerBlinky);
 8001390:	487e      	ldr	r0, [pc, #504]	; (800158c <initSystem+0x224>)
 8001392:	f000 ffa5 	bl	80022e0 <GPIO_Config>

	//Configuración del TIM2 (Blinky)
	handlerTimerBlinky.ptrTIMx 								= TIM2;
 8001396:	4b7f      	ldr	r3, [pc, #508]	; (8001594 <initSystem+0x22c>)
 8001398:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800139c:	601a      	str	r2, [r3, #0]
	handlerTimerBlinky.TIMx_Config.TIMx_mode 				= BTIMER_MODE_UP;
 800139e:	4b7d      	ldr	r3, [pc, #500]	; (8001594 <initSystem+0x22c>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	711a      	strb	r2, [r3, #4]
	handlerTimerBlinky.TIMx_Config.TIMx_speed 				= BTIMER_SPEED_100us;
 80013a4:	4b7b      	ldr	r3, [pc, #492]	; (8001594 <initSystem+0x22c>)
 80013a6:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80013aa:	609a      	str	r2, [r3, #8]
	handlerTimerBlinky.TIMx_Config.TIMx_period 				= 2500;
 80013ac:	4b79      	ldr	r3, [pc, #484]	; (8001594 <initSystem+0x22c>)
 80013ae:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80013b2:	60da      	str	r2, [r3, #12]
	handlerTimerBlinky.TIMx_Config.TIMx_interruptEnable 	= 1;
 80013b4:	4b77      	ldr	r3, [pc, #476]	; (8001594 <initSystem+0x22c>)
 80013b6:	2201      	movs	r2, #1
 80013b8:	741a      	strb	r2, [r3, #16]
	BasicTimer_Config(&handlerTimerBlinky);
 80013ba:	4876      	ldr	r0, [pc, #472]	; (8001594 <initSystem+0x22c>)
 80013bc:	f000 fe7c 	bl	80020b8 <BasicTimer_Config>

	//Configuración del TIM5 (Data)
	handlerTimerData.ptrTIMx 								= TIM5;
 80013c0:	4b75      	ldr	r3, [pc, #468]	; (8001598 <initSystem+0x230>)
 80013c2:	4a76      	ldr	r2, [pc, #472]	; (800159c <initSystem+0x234>)
 80013c4:	601a      	str	r2, [r3, #0]
	handlerTimerData.TIMx_Config.TIMx_mode 					= BTIMER_MODE_UP;
 80013c6:	4b74      	ldr	r3, [pc, #464]	; (8001598 <initSystem+0x230>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	711a      	strb	r2, [r3, #4]
	handlerTimerData.TIMx_Config.TIMx_speed 				= BTIMER_SPEED_100us;
 80013cc:	4b72      	ldr	r3, [pc, #456]	; (8001598 <initSystem+0x230>)
 80013ce:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80013d2:	609a      	str	r2, [r3, #8]
	handlerTimerData.TIMx_Config.TIMx_period 				= 30000;
 80013d4:	4b70      	ldr	r3, [pc, #448]	; (8001598 <initSystem+0x230>)
 80013d6:	f247 5230 	movw	r2, #30000	; 0x7530
 80013da:	60da      	str	r2, [r3, #12]
	handlerTimerData.TIMx_Config.TIMx_interruptEnable 		= 1;
 80013dc:	4b6e      	ldr	r3, [pc, #440]	; (8001598 <initSystem+0x230>)
 80013de:	2201      	movs	r2, #1
 80013e0:	741a      	strb	r2, [r3, #16]
	BasicTimer_Config(&handlerTimerData);
 80013e2:	486d      	ldr	r0, [pc, #436]	; (8001598 <initSystem+0x230>)
 80013e4:	f000 fe68 	bl	80020b8 <BasicTimer_Config>

	//Configuración comunicación I2C (ACCEL)
	//SDA
	handlerI2cSDA.pGPIOx									= GPIOB;
 80013e8:	4b6d      	ldr	r3, [pc, #436]	; (80015a0 <initSystem+0x238>)
 80013ea:	4a6e      	ldr	r2, [pc, #440]	; (80015a4 <initSystem+0x23c>)
 80013ec:	601a      	str	r2, [r3, #0]
	handlerI2cSDA.GPIO_PinConfig.GPIO_PinNumber				= PIN_9;
 80013ee:	4b6c      	ldr	r3, [pc, #432]	; (80015a0 <initSystem+0x238>)
 80013f0:	2209      	movs	r2, #9
 80013f2:	711a      	strb	r2, [r3, #4]
	handlerI2cSDA.GPIO_PinConfig.GPIO_PinMode				= GPIO_MODE_ALTFN;
 80013f4:	4b6a      	ldr	r3, [pc, #424]	; (80015a0 <initSystem+0x238>)
 80013f6:	2202      	movs	r2, #2
 80013f8:	715a      	strb	r2, [r3, #5]
	handlerI2cSDA.GPIO_PinConfig.GPIO_PinOPType				= GPIO_OTYPE_OPENDRAIN;
 80013fa:	4b69      	ldr	r3, [pc, #420]	; (80015a0 <initSystem+0x238>)
 80013fc:	2201      	movs	r2, #1
 80013fe:	721a      	strb	r2, [r3, #8]
	handlerI2cSDA.GPIO_PinConfig.GPIO_PinPuPdControl		= GPIO_PUPDR_NOTHING;
 8001400:	4b67      	ldr	r3, [pc, #412]	; (80015a0 <initSystem+0x238>)
 8001402:	2200      	movs	r2, #0
 8001404:	71da      	strb	r2, [r3, #7]
	handlerI2cSDA.GPIO_PinConfig.GPIO_PinSpeed				= GPIO_OSPEEDR_FAST;
 8001406:	4b66      	ldr	r3, [pc, #408]	; (80015a0 <initSystem+0x238>)
 8001408:	2202      	movs	r2, #2
 800140a:	719a      	strb	r2, [r3, #6]
	handlerI2cSDA.GPIO_PinConfig.GPIO_PinAltFunMode			= AF4;
 800140c:	4b64      	ldr	r3, [pc, #400]	; (80015a0 <initSystem+0x238>)
 800140e:	2204      	movs	r2, #4
 8001410:	725a      	strb	r2, [r3, #9]
	GPIO_Config(&handlerI2cSDA);
 8001412:	4863      	ldr	r0, [pc, #396]	; (80015a0 <initSystem+0x238>)
 8001414:	f000 ff64 	bl	80022e0 <GPIO_Config>

	//SCL
	handlerI2cSCL.pGPIOx									= GPIOB;
 8001418:	4b63      	ldr	r3, [pc, #396]	; (80015a8 <initSystem+0x240>)
 800141a:	4a62      	ldr	r2, [pc, #392]	; (80015a4 <initSystem+0x23c>)
 800141c:	601a      	str	r2, [r3, #0]
	handlerI2cSCL.GPIO_PinConfig.GPIO_PinNumber				= PIN_8;
 800141e:	4b62      	ldr	r3, [pc, #392]	; (80015a8 <initSystem+0x240>)
 8001420:	2208      	movs	r2, #8
 8001422:	711a      	strb	r2, [r3, #4]
	handlerI2cSCL.GPIO_PinConfig.GPIO_PinMode				= GPIO_MODE_ALTFN;
 8001424:	4b60      	ldr	r3, [pc, #384]	; (80015a8 <initSystem+0x240>)
 8001426:	2202      	movs	r2, #2
 8001428:	715a      	strb	r2, [r3, #5]
	handlerI2cSCL.GPIO_PinConfig.GPIO_PinOPType				= GPIO_OTYPE_OPENDRAIN;
 800142a:	4b5f      	ldr	r3, [pc, #380]	; (80015a8 <initSystem+0x240>)
 800142c:	2201      	movs	r2, #1
 800142e:	721a      	strb	r2, [r3, #8]
	handlerI2cSCL.GPIO_PinConfig.GPIO_PinPuPdControl		= GPIO_PUPDR_NOTHING;
 8001430:	4b5d      	ldr	r3, [pc, #372]	; (80015a8 <initSystem+0x240>)
 8001432:	2200      	movs	r2, #0
 8001434:	71da      	strb	r2, [r3, #7]
	handlerI2cSCL.GPIO_PinConfig.GPIO_PinSpeed				= GPIO_OSPEEDR_FAST;
 8001436:	4b5c      	ldr	r3, [pc, #368]	; (80015a8 <initSystem+0x240>)
 8001438:	2202      	movs	r2, #2
 800143a:	719a      	strb	r2, [r3, #6]
	handlerI2cSCL.GPIO_PinConfig.GPIO_PinAltFunMode			= AF4;
 800143c:	4b5a      	ldr	r3, [pc, #360]	; (80015a8 <initSystem+0x240>)
 800143e:	2204      	movs	r2, #4
 8001440:	725a      	strb	r2, [r3, #9]
	GPIO_Config(&handlerI2cSCL);
 8001442:	4859      	ldr	r0, [pc, #356]	; (80015a8 <initSystem+0x240>)
 8001444:	f000 ff4c 	bl	80022e0 <GPIO_Config>

	//Configuraciòn I2C (ACCEL)
	handlerAccelerometer.PLL_ON								= PLL_DISABLE;
 8001448:	4b58      	ldr	r3, [pc, #352]	; (80015ac <initSystem+0x244>)
 800144a:	2200      	movs	r2, #0
 800144c:	71da      	strb	r2, [r3, #7]
	handlerAccelerometer.ptrI2Cx							= I2C1;
 800144e:	4b57      	ldr	r3, [pc, #348]	; (80015ac <initSystem+0x244>)
 8001450:	4a57      	ldr	r2, [pc, #348]	; (80015b0 <initSystem+0x248>)
 8001452:	601a      	str	r2, [r3, #0]
	handlerAccelerometer.slaveAddress						= ACCEL_ADDRESS;
 8001454:	4b55      	ldr	r3, [pc, #340]	; (80015ac <initSystem+0x244>)
 8001456:	2269      	movs	r2, #105	; 0x69
 8001458:	711a      	strb	r2, [r3, #4]
	handlerAccelerometer.modeI2C							= I2C_MODE_FM;
 800145a:	4b54      	ldr	r3, [pc, #336]	; (80015ac <initSystem+0x244>)
 800145c:	2201      	movs	r2, #1
 800145e:	715a      	strb	r2, [r3, #5]
	i2c_Config(&handlerAccelerometer);
 8001460:	4852      	ldr	r0, [pc, #328]	; (80015ac <initSystem+0x244>)
 8001462:	f001 f8a1 	bl	80025a8 <i2c_Config>

	//Configuraciòn I2C (BAR)
	handlerBarometer.PLL_ON									= PLL_DISABLE;
 8001466:	4b53      	ldr	r3, [pc, #332]	; (80015b4 <initSystem+0x24c>)
 8001468:	2200      	movs	r2, #0
 800146a:	71da      	strb	r2, [r3, #7]
	handlerBarometer.ptrI2Cx								= I2C1;
 800146c:	4b51      	ldr	r3, [pc, #324]	; (80015b4 <initSystem+0x24c>)
 800146e:	4a50      	ldr	r2, [pc, #320]	; (80015b0 <initSystem+0x248>)
 8001470:	601a      	str	r2, [r3, #0]
	handlerBarometer.slaveAddress							= BAR_ADDRESS;
 8001472:	4b50      	ldr	r3, [pc, #320]	; (80015b4 <initSystem+0x24c>)
 8001474:	2277      	movs	r2, #119	; 0x77
 8001476:	711a      	strb	r2, [r3, #4]
	handlerBarometer.modeI2C								= I2C_MODE_FM;
 8001478:	4b4e      	ldr	r3, [pc, #312]	; (80015b4 <initSystem+0x24c>)
 800147a:	2201      	movs	r2, #1
 800147c:	715a      	strb	r2, [r3, #5]
	i2c_Config(&handlerBarometer);
 800147e:	484d      	ldr	r0, [pc, #308]	; (80015b4 <initSystem+0x24c>)
 8001480:	f001 f892 	bl	80025a8 <i2c_Config>

	//Configuración de pines para USART1
	//TX Pin (USART1)
	handlerPinTX1.pGPIOx									= GPIOA;
 8001484:	4b4c      	ldr	r3, [pc, #304]	; (80015b8 <initSystem+0x250>)
 8001486:	4a4d      	ldr	r2, [pc, #308]	; (80015bc <initSystem+0x254>)
 8001488:	601a      	str	r2, [r3, #0]
	handlerPinTX1.GPIO_PinConfig.GPIO_PinNumber				= PIN_9;
 800148a:	4b4b      	ldr	r3, [pc, #300]	; (80015b8 <initSystem+0x250>)
 800148c:	2209      	movs	r2, #9
 800148e:	711a      	strb	r2, [r3, #4]
	handlerPinTX1.GPIO_PinConfig.GPIO_PinMode				= GPIO_MODE_ALTFN;
 8001490:	4b49      	ldr	r3, [pc, #292]	; (80015b8 <initSystem+0x250>)
 8001492:	2202      	movs	r2, #2
 8001494:	715a      	strb	r2, [r3, #5]
	handlerPinTX1.GPIO_PinConfig.GPIO_PinAltFunMode			= AF7;
 8001496:	4b48      	ldr	r3, [pc, #288]	; (80015b8 <initSystem+0x250>)
 8001498:	2207      	movs	r2, #7
 800149a:	725a      	strb	r2, [r3, #9]
	GPIO_Config(&handlerPinTX1);
 800149c:	4846      	ldr	r0, [pc, #280]	; (80015b8 <initSystem+0x250>)
 800149e:	f000 ff1f 	bl	80022e0 <GPIO_Config>

	//RX Pin (USART1)
	handlerPinRX1.pGPIOx									= GPIOA;
 80014a2:	4b47      	ldr	r3, [pc, #284]	; (80015c0 <initSystem+0x258>)
 80014a4:	4a45      	ldr	r2, [pc, #276]	; (80015bc <initSystem+0x254>)
 80014a6:	601a      	str	r2, [r3, #0]
	handlerPinRX1.GPIO_PinConfig.GPIO_PinNumber				= PIN_10;
 80014a8:	4b45      	ldr	r3, [pc, #276]	; (80015c0 <initSystem+0x258>)
 80014aa:	220a      	movs	r2, #10
 80014ac:	711a      	strb	r2, [r3, #4]
	handlerPinRX1.GPIO_PinConfig.GPIO_PinMode				= GPIO_MODE_ALTFN;
 80014ae:	4b44      	ldr	r3, [pc, #272]	; (80015c0 <initSystem+0x258>)
 80014b0:	2202      	movs	r2, #2
 80014b2:	715a      	strb	r2, [r3, #5]
	handlerPinRX1.GPIO_PinConfig.GPIO_PinAltFunMode			= AF7;
 80014b4:	4b42      	ldr	r3, [pc, #264]	; (80015c0 <initSystem+0x258>)
 80014b6:	2207      	movs	r2, #7
 80014b8:	725a      	strb	r2, [r3, #9]
	GPIO_Config(&handlerPinRX1);
 80014ba:	4841      	ldr	r0, [pc, #260]	; (80015c0 <initSystem+0x258>)
 80014bc:	f000 ff10 	bl	80022e0 <GPIO_Config>

	//Configuración de pines para USART6
	//RX Pin (USART6)
	handlerPinRX6.pGPIOx									= GPIOC;
 80014c0:	4b40      	ldr	r3, [pc, #256]	; (80015c4 <initSystem+0x25c>)
 80014c2:	4a33      	ldr	r2, [pc, #204]	; (8001590 <initSystem+0x228>)
 80014c4:	601a      	str	r2, [r3, #0]
	handlerPinRX6.GPIO_PinConfig.GPIO_PinNumber				= PIN_7;
 80014c6:	4b3f      	ldr	r3, [pc, #252]	; (80015c4 <initSystem+0x25c>)
 80014c8:	2207      	movs	r2, #7
 80014ca:	711a      	strb	r2, [r3, #4]
	handlerPinRX6.GPIO_PinConfig.GPIO_PinMode				= GPIO_MODE_ALTFN;
 80014cc:	4b3d      	ldr	r3, [pc, #244]	; (80015c4 <initSystem+0x25c>)
 80014ce:	2202      	movs	r2, #2
 80014d0:	715a      	strb	r2, [r3, #5]
	handlerPinRX6.GPIO_PinConfig.GPIO_PinAltFunMode			= AF8;
 80014d2:	4b3c      	ldr	r3, [pc, #240]	; (80015c4 <initSystem+0x25c>)
 80014d4:	2208      	movs	r2, #8
 80014d6:	725a      	strb	r2, [r3, #9]
	GPIO_Config(&handlerPinRX6);
 80014d8:	483a      	ldr	r0, [pc, #232]	; (80015c4 <initSystem+0x25c>)
 80014da:	f000 ff01 	bl	80022e0 <GPIO_Config>

	//Configuración de la comunicación serial USART1
	handlerUsart1.ptrUSARTx	 								= USART1;
 80014de:	4b3a      	ldr	r3, [pc, #232]	; (80015c8 <initSystem+0x260>)
 80014e0:	4a3a      	ldr	r2, [pc, #232]	; (80015cc <initSystem+0x264>)
 80014e2:	601a      	str	r2, [r3, #0]
	handlerUsart1.USART_Config.USART_baudrate				= USART_BAUDRATE_9600;
 80014e4:	4b38      	ldr	r3, [pc, #224]	; (80015c8 <initSystem+0x260>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	715a      	strb	r2, [r3, #5]
	handlerUsart1.USART_Config.USART_PLL_EN					= PLL_DISABLE;
 80014ea:	4b37      	ldr	r3, [pc, #220]	; (80015c8 <initSystem+0x260>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	719a      	strb	r2, [r3, #6]
	handlerUsart1.USART_Config.USART_datasize				= USART_DATASIZE_8BIT;
 80014f0:	4b35      	ldr	r3, [pc, #212]	; (80015c8 <initSystem+0x260>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	71da      	strb	r2, [r3, #7]
	handlerUsart1.USART_Config.USART_parity					= USART_PARITY_NONE;
 80014f6:	4b34      	ldr	r3, [pc, #208]	; (80015c8 <initSystem+0x260>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	721a      	strb	r2, [r3, #8]
	handlerUsart1.USART_Config.USART_stopbits				= USART_STOPBIT_1;
 80014fc:	4b32      	ldr	r3, [pc, #200]	; (80015c8 <initSystem+0x260>)
 80014fe:	2200      	movs	r2, #0
 8001500:	725a      	strb	r2, [r3, #9]
	handlerUsart1.USART_Config.USART_mode					= USART_MODE_RXTX;
 8001502:	4b31      	ldr	r3, [pc, #196]	; (80015c8 <initSystem+0x260>)
 8001504:	2202      	movs	r2, #2
 8001506:	711a      	strb	r2, [r3, #4]
	handlerUsart1.USART_Config.USART_enableIntTX			= USART_TX_INTERRUP_DISABLE;
 8001508:	4b2f      	ldr	r3, [pc, #188]	; (80015c8 <initSystem+0x260>)
 800150a:	2200      	movs	r2, #0
 800150c:	72da      	strb	r2, [r3, #11]
	handlerUsart1.USART_Config.USART_enableIntRX			= USART_RX_INTERRUP_ENABLE;
 800150e:	4b2e      	ldr	r3, [pc, #184]	; (80015c8 <initSystem+0x260>)
 8001510:	2201      	movs	r2, #1
 8001512:	729a      	strb	r2, [r3, #10]
	USART_Config(&handlerUsart1);
 8001514:	482c      	ldr	r0, [pc, #176]	; (80015c8 <initSystem+0x260>)
 8001516:	f001 fb4f 	bl	8002bb8 <USART_Config>

	//Configuración de la comunicación serial USART6
	handlerUsart6.ptrUSARTx	 								= USART6;
 800151a:	4b2d      	ldr	r3, [pc, #180]	; (80015d0 <initSystem+0x268>)
 800151c:	4a2d      	ldr	r2, [pc, #180]	; (80015d4 <initSystem+0x26c>)
 800151e:	601a      	str	r2, [r3, #0]
	handlerUsart6.USART_Config.USART_baudrate				= USART_BAUDRATE_9600;
 8001520:	4b2b      	ldr	r3, [pc, #172]	; (80015d0 <initSystem+0x268>)
 8001522:	2200      	movs	r2, #0
 8001524:	715a      	strb	r2, [r3, #5]
	handlerUsart6.USART_Config.USART_PLL_EN					= PLL_DISABLE;
 8001526:	4b2a      	ldr	r3, [pc, #168]	; (80015d0 <initSystem+0x268>)
 8001528:	2200      	movs	r2, #0
 800152a:	719a      	strb	r2, [r3, #6]
	handlerUsart6.USART_Config.USART_datasize				= USART_DATASIZE_8BIT;
 800152c:	4b28      	ldr	r3, [pc, #160]	; (80015d0 <initSystem+0x268>)
 800152e:	2200      	movs	r2, #0
 8001530:	71da      	strb	r2, [r3, #7]
	handlerUsart6.USART_Config.USART_parity					= USART_PARITY_NONE;
 8001532:	4b27      	ldr	r3, [pc, #156]	; (80015d0 <initSystem+0x268>)
 8001534:	2200      	movs	r2, #0
 8001536:	721a      	strb	r2, [r3, #8]
	handlerUsart6.USART_Config.USART_stopbits				= USART_STOPBIT_1;
 8001538:	4b25      	ldr	r3, [pc, #148]	; (80015d0 <initSystem+0x268>)
 800153a:	2200      	movs	r2, #0
 800153c:	725a      	strb	r2, [r3, #9]
	handlerUsart6.USART_Config.USART_mode					= USART_MODE_RXTX;
 800153e:	4b24      	ldr	r3, [pc, #144]	; (80015d0 <initSystem+0x268>)
 8001540:	2202      	movs	r2, #2
 8001542:	711a      	strb	r2, [r3, #4]
	handlerUsart6.USART_Config.USART_enableIntTX			= USART_TX_INTERRUP_DISABLE;
 8001544:	4b22      	ldr	r3, [pc, #136]	; (80015d0 <initSystem+0x268>)
 8001546:	2200      	movs	r2, #0
 8001548:	72da      	strb	r2, [r3, #11]
	handlerUsart6.USART_Config.USART_enableIntRX			= USART_RX_INTERRUP_ENABLE;
 800154a:	4b21      	ldr	r3, [pc, #132]	; (80015d0 <initSystem+0x268>)
 800154c:	2201      	movs	r2, #1
 800154e:	729a      	strb	r2, [r3, #10]
	USART_Config(&handlerUsart6);
 8001550:	481f      	ldr	r0, [pc, #124]	; (80015d0 <initSystem+0x268>)
 8001552:	f001 fb31 	bl	8002bb8 <USART_Config>

	//Configuración Pin de salida
	handlerValvePin.pGPIOx 									= GPIOA;
 8001556:	4b20      	ldr	r3, [pc, #128]	; (80015d8 <initSystem+0x270>)
 8001558:	4a18      	ldr	r2, [pc, #96]	; (80015bc <initSystem+0x254>)
 800155a:	601a      	str	r2, [r3, #0]
	handlerValvePin.GPIO_PinConfig.GPIO_PinNumber 			= PIN_0;
 800155c:	4b1e      	ldr	r3, [pc, #120]	; (80015d8 <initSystem+0x270>)
 800155e:	2200      	movs	r2, #0
 8001560:	711a      	strb	r2, [r3, #4]
	handlerValvePin.GPIO_PinConfig.GPIO_PinMode 			= GPIO_MODE_OUT;
 8001562:	4b1d      	ldr	r3, [pc, #116]	; (80015d8 <initSystem+0x270>)
 8001564:	2201      	movs	r2, #1
 8001566:	715a      	strb	r2, [r3, #5]
	handlerValvePin.GPIO_PinConfig.GPIO_PinOPType 			= GPIO_OTYPE_PUSHPULL;
 8001568:	4b1b      	ldr	r3, [pc, #108]	; (80015d8 <initSystem+0x270>)
 800156a:	2200      	movs	r2, #0
 800156c:	721a      	strb	r2, [r3, #8]
	handlerValvePin.GPIO_PinConfig.GPIO_PinSpeed 			= GPIO_OSPEEDR_FAST;
 800156e:	4b1a      	ldr	r3, [pc, #104]	; (80015d8 <initSystem+0x270>)
 8001570:	2202      	movs	r2, #2
 8001572:	719a      	strb	r2, [r3, #6]
	handlerValvePin.GPIO_PinConfig.GPIO_PinPuPdControl 		= GPIO_PUPDR_NOTHING;
 8001574:	4b18      	ldr	r3, [pc, #96]	; (80015d8 <initSystem+0x270>)
 8001576:	2200      	movs	r2, #0
 8001578:	71da      	strb	r2, [r3, #7]
	handlerValvePin.GPIO_PinConfig.GPIO_PinAltFunMode 		= AF0;
 800157a:	4b17      	ldr	r3, [pc, #92]	; (80015d8 <initSystem+0x270>)
 800157c:	2200      	movs	r2, #0
 800157e:	725a      	strb	r2, [r3, #9]
	GPIO_Config(&handlerValvePin);
 8001580:	4815      	ldr	r0, [pc, #84]	; (80015d8 <initSystem+0x270>)
 8001582:	f000 fead 	bl	80022e0 <GPIO_Config>
}
 8001586:	bf00      	nop
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	2000020c 	.word	0x2000020c
 8001590:	40020800 	.word	0x40020800
 8001594:	20000248 	.word	0x20000248
 8001598:	2000025c 	.word	0x2000025c
 800159c:	40000c00 	.word	0x40000c00
 80015a0:	20000390 	.word	0x20000390
 80015a4:	40020400 	.word	0x40020400
 80015a8:	2000039c 	.word	0x2000039c
 80015ac:	200003a8 	.word	0x200003a8
 80015b0:	40005400 	.word	0x40005400
 80015b4:	200003b0 	.word	0x200003b0
 80015b8:	20000218 	.word	0x20000218
 80015bc:	40020000 	.word	0x40020000
 80015c0:	20000224 	.word	0x20000224
 80015c4:	20000230 	.word	0x20000230
 80015c8:	20000270 	.word	0x20000270
 80015cc:	40011000 	.word	0x40011000
 80015d0:	20000300 	.word	0x20000300
 80015d4:	40011400 	.word	0x40011400
 80015d8:	2000023c 	.word	0x2000023c

080015dc <BMP085>:

void BMP085(void){
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0

	//Se configura el SysTick en 16 MHz
	config_SysTick_ms(0);
 80015e2:	2000      	movs	r0, #0
 80015e4:	f001 fa0c 	bl	8002a00 <config_SysTick_ms>

	//Guardar el valor que hay en cada registro para los datos de calibración
	calibrationDataBar();
 80015e8:	f000 f900 	bl	80017ec <calibrationDataBar>

	/* Leer el valor de la temperatura no compensado
	 */
	i2c_writeSingleRegister(&handlerBarometer, 0xF4, 0x2E);
 80015ec:	222e      	movs	r2, #46	; 0x2e
 80015ee:	21f4      	movs	r1, #244	; 0xf4
 80015f0:	4839      	ldr	r0, [pc, #228]	; (80016d8 <BMP085+0xfc>)
 80015f2:	f001 f9c4 	bl	800297e <i2c_writeSingleRegister>

	//Tiempo de espera para reescribir el registro
	delay_ms(30);
 80015f6:	201e      	movs	r0, #30
 80015f8:	f001 fa6a 	bl	8002ad0 <delay_ms>

	//Se guarda el valor en la variable de la temperatura
	uint8_t Temp_low = i2c_readSingleRegister(&handlerBarometer, 0xF7);
 80015fc:	21f7      	movs	r1, #247	; 0xf7
 80015fe:	4836      	ldr	r0, [pc, #216]	; (80016d8 <BMP085+0xfc>)
 8001600:	f001 f98c 	bl	800291c <i2c_readSingleRegister>
 8001604:	4603      	mov	r3, r0
 8001606:	71fb      	strb	r3, [r7, #7]
	uint8_t Temp_high = i2c_readSingleRegister(&handlerBarometer, 0xF6);
 8001608:	21f6      	movs	r1, #246	; 0xf6
 800160a:	4833      	ldr	r0, [pc, #204]	; (80016d8 <BMP085+0xfc>)
 800160c:	f001 f986 	bl	800291c <i2c_readSingleRegister>
 8001610:	4603      	mov	r3, r0
 8001612:	71bb      	strb	r3, [r7, #6]
	UT = (Temp_high << 8) + Temp_low;
 8001614:	79bb      	ldrb	r3, [r7, #6]
 8001616:	021a      	lsls	r2, r3, #8
 8001618:	79fb      	ldrb	r3, [r7, #7]
 800161a:	4413      	add	r3, r2
 800161c:	4a2f      	ldr	r2, [pc, #188]	; (80016dc <BMP085+0x100>)
 800161e:	6013      	str	r3, [r2, #0]
	delay_ms(10);
 8001620:	200a      	movs	r0, #10
 8001622:	f001 fa55 	bl	8002ad0 <delay_ms>

	/* Leer el valor de la presión no compensado
	 */
	i2c_writeSingleRegister(&handlerBarometer, 0xF4, 0x34+(oss<<6));
 8001626:	4b2e      	ldr	r3, [pc, #184]	; (80016e0 <BMP085+0x104>)
 8001628:	f9b3 3000 	ldrsh.w	r3, [r3]
 800162c:	b2db      	uxtb	r3, r3
 800162e:	019b      	lsls	r3, r3, #6
 8001630:	b2db      	uxtb	r3, r3
 8001632:	3334      	adds	r3, #52	; 0x34
 8001634:	b2db      	uxtb	r3, r3
 8001636:	461a      	mov	r2, r3
 8001638:	21f4      	movs	r1, #244	; 0xf4
 800163a:	4827      	ldr	r0, [pc, #156]	; (80016d8 <BMP085+0xfc>)
 800163c:	f001 f99f 	bl	800297e <i2c_writeSingleRegister>

	//Tiempo de espera para reescribir el registro
	delay_ms(30);
 8001640:	201e      	movs	r0, #30
 8001642:	f001 fa45 	bl	8002ad0 <delay_ms>

	//Se guarda el valor en la variable de la presión
	uint8_t Press_low = i2c_readSingleRegister(&handlerBarometer, 0xF7);
 8001646:	21f7      	movs	r1, #247	; 0xf7
 8001648:	4823      	ldr	r0, [pc, #140]	; (80016d8 <BMP085+0xfc>)
 800164a:	f001 f967 	bl	800291c <i2c_readSingleRegister>
 800164e:	4603      	mov	r3, r0
 8001650:	717b      	strb	r3, [r7, #5]
	uint8_t Press_high = i2c_readSingleRegister(&handlerBarometer, 0xF6);
 8001652:	21f6      	movs	r1, #246	; 0xf6
 8001654:	4820      	ldr	r0, [pc, #128]	; (80016d8 <BMP085+0xfc>)
 8001656:	f001 f961 	bl	800291c <i2c_readSingleRegister>
 800165a:	4603      	mov	r3, r0
 800165c:	713b      	strb	r3, [r7, #4]
	uint8_t Press_Xlow = i2c_readSingleRegister(&handlerBarometer, 0xF8);
 800165e:	21f8      	movs	r1, #248	; 0xf8
 8001660:	481d      	ldr	r0, [pc, #116]	; (80016d8 <BMP085+0xfc>)
 8001662:	f001 f95b 	bl	800291c <i2c_readSingleRegister>
 8001666:	4603      	mov	r3, r0
 8001668:	70fb      	strb	r3, [r7, #3]
	UP = ((Press_high<<16) + (Press_low<<8) + Press_Xlow) >> (8-oss);
 800166a:	793b      	ldrb	r3, [r7, #4]
 800166c:	041a      	lsls	r2, r3, #16
 800166e:	797b      	ldrb	r3, [r7, #5]
 8001670:	021b      	lsls	r3, r3, #8
 8001672:	441a      	add	r2, r3
 8001674:	78fb      	ldrb	r3, [r7, #3]
 8001676:	441a      	add	r2, r3
 8001678:	4b19      	ldr	r3, [pc, #100]	; (80016e0 <BMP085+0x104>)
 800167a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800167e:	f1c3 0308 	rsb	r3, r3, #8
 8001682:	fa42 f303 	asr.w	r3, r2, r3
 8001686:	4a17      	ldr	r2, [pc, #92]	; (80016e4 <BMP085+0x108>)
 8001688:	6013      	str	r3, [r2, #0]
	delay_ms(10);
 800168a:	200a      	movs	r0, #10
 800168c:	f001 fa20 	bl	8002ad0 <delay_ms>

	//Calcular la temperatura real con los datos de calibración
    getTemp();
 8001690:	f000 fa5a 	bl	8001b48 <getTemp>

	//Guardamos el valor de la temperatura para posteriormente leerlo
    /* El dispositivo entrega por defecto el valor en K, para hacer la conversión
     * a °C solo se debe restar 297 al valor de la medida
     */
	Temp = (getTemp()-297);
 8001694:	f000 fa58 	bl	8001b48 <getTemp>
 8001698:	4603      	mov	r3, r0
 800169a:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800169e:	ee07 3a90 	vmov	s15, r3
 80016a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016a6:	4b10      	ldr	r3, [pc, #64]	; (80016e8 <BMP085+0x10c>)
 80016a8:	edc3 7a00 	vstr	s15, [r3]

	//Calcular la presión real con los datos de calibración
	getPress();
 80016ac:	f000 fa9a 	bl	8001be4 <getPress>

	//Guardamos el valor de la presión para posteriormente leerlo
	/* El dispositivo entrega por defecto el valor en Pa, para hacer la conversión
	 * a hPa solo se debe dividir la medida entre 100
	 */
	Press = (getPress()/100);
 80016b0:	f000 fa98 	bl	8001be4 <getPress>
 80016b4:	4603      	mov	r3, r0
 80016b6:	4a0d      	ldr	r2, [pc, #52]	; (80016ec <BMP085+0x110>)
 80016b8:	fb82 1203 	smull	r1, r2, r2, r3
 80016bc:	1152      	asrs	r2, r2, #5
 80016be:	17db      	asrs	r3, r3, #31
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	ee07 3a90 	vmov	s15, r3
 80016c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016ca:	4b09      	ldr	r3, [pc, #36]	; (80016f0 <BMP085+0x114>)
 80016cc:	edc3 7a00 	vstr	s15, [r3]
}
 80016d0:	bf00      	nop
 80016d2:	3708      	adds	r7, #8
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	200003b0 	.word	0x200003b0
 80016dc:	2000062c 	.word	0x2000062c
 80016e0:	20000008 	.word	0x20000008
 80016e4:	20000630 	.word	0x20000630
 80016e8:	20000610 	.word	0x20000610
 80016ec:	51eb851f 	.word	0x51eb851f
 80016f0:	2000060c 	.word	0x2000060c

080016f4 <MPU6050>:

void MPU6050(void){
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0

	//Se lee el dispositivo para realizar la comunicación
	sprintf(bufferData, "\nWHO_AM_I? (r)\n");
 80016f8:	4932      	ldr	r1, [pc, #200]	; (80017c4 <MPU6050+0xd0>)
 80016fa:	4833      	ldr	r0, [pc, #204]	; (80017c8 <MPU6050+0xd4>)
 80016fc:	f002 fd00 	bl	8004100 <siprintf>
	writeMsgTX(&handlerUsart1, bufferData);
 8001700:	4931      	ldr	r1, [pc, #196]	; (80017c8 <MPU6050+0xd4>)
 8001702:	4832      	ldr	r0, [pc, #200]	; (80017cc <MPU6050+0xd8>)
 8001704:	f001 fcbe 	bl	8003084 <writeMsgTX>

	i2cBuffer = i2c_readSingleRegister(&handlerAccelerometer, WHO_AM_I);
 8001708:	2175      	movs	r1, #117	; 0x75
 800170a:	4831      	ldr	r0, [pc, #196]	; (80017d0 <MPU6050+0xdc>)
 800170c:	f001 f906 	bl	800291c <i2c_readSingleRegister>
 8001710:	4603      	mov	r3, r0
 8001712:	461a      	mov	r2, r3
 8001714:	4b2f      	ldr	r3, [pc, #188]	; (80017d4 <MPU6050+0xe0>)
 8001716:	701a      	strb	r2, [r3, #0]
	sprintf(bufferData, "\ndataRead = 0x%x \n", (unsigned int) i2cBuffer);
 8001718:	4b2e      	ldr	r3, [pc, #184]	; (80017d4 <MPU6050+0xe0>)
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	461a      	mov	r2, r3
 800171e:	492e      	ldr	r1, [pc, #184]	; (80017d8 <MPU6050+0xe4>)
 8001720:	4829      	ldr	r0, [pc, #164]	; (80017c8 <MPU6050+0xd4>)
 8001722:	f002 fced 	bl	8004100 <siprintf>
	writeMsgTX(&handlerUsart1, bufferData);
 8001726:	4928      	ldr	r1, [pc, #160]	; (80017c8 <MPU6050+0xd4>)
 8001728:	4828      	ldr	r0, [pc, #160]	; (80017cc <MPU6050+0xd8>)
 800172a:	f001 fcab 	bl	8003084 <writeMsgTX>
	rxData = '\0';
 800172e:	4b2b      	ldr	r3, [pc, #172]	; (80017dc <MPU6050+0xe8>)
 8001730:	2200      	movs	r2, #0
 8001732:	701a      	strb	r2, [r3, #0]

	//Estado por defecto del Accel
	sprintf(bufferData, "\nPWR_MGMT_1 state (r)\n");
 8001734:	492a      	ldr	r1, [pc, #168]	; (80017e0 <MPU6050+0xec>)
 8001736:	4824      	ldr	r0, [pc, #144]	; (80017c8 <MPU6050+0xd4>)
 8001738:	f002 fce2 	bl	8004100 <siprintf>
	writeMsgTX(&handlerUsart1, bufferData);
 800173c:	4922      	ldr	r1, [pc, #136]	; (80017c8 <MPU6050+0xd4>)
 800173e:	4823      	ldr	r0, [pc, #140]	; (80017cc <MPU6050+0xd8>)
 8001740:	f001 fca0 	bl	8003084 <writeMsgTX>

	i2cBuffer = i2c_readSingleRegister(&handlerAccelerometer, PWR_MGMT_1);
 8001744:	216b      	movs	r1, #107	; 0x6b
 8001746:	4822      	ldr	r0, [pc, #136]	; (80017d0 <MPU6050+0xdc>)
 8001748:	f001 f8e8 	bl	800291c <i2c_readSingleRegister>
 800174c:	4603      	mov	r3, r0
 800174e:	461a      	mov	r2, r3
 8001750:	4b20      	ldr	r3, [pc, #128]	; (80017d4 <MPU6050+0xe0>)
 8001752:	701a      	strb	r2, [r3, #0]
	sprintf(bufferData, "\ndataRead = 0x%x \n", (unsigned int) i2cBuffer);
 8001754:	4b1f      	ldr	r3, [pc, #124]	; (80017d4 <MPU6050+0xe0>)
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	461a      	mov	r2, r3
 800175a:	491f      	ldr	r1, [pc, #124]	; (80017d8 <MPU6050+0xe4>)
 800175c:	481a      	ldr	r0, [pc, #104]	; (80017c8 <MPU6050+0xd4>)
 800175e:	f002 fccf 	bl	8004100 <siprintf>
	writeMsgTX(&handlerUsart1, bufferData);
 8001762:	4919      	ldr	r1, [pc, #100]	; (80017c8 <MPU6050+0xd4>)
 8001764:	4819      	ldr	r0, [pc, #100]	; (80017cc <MPU6050+0xd8>)
 8001766:	f001 fc8d 	bl	8003084 <writeMsgTX>
	rxData = '\0';
 800176a:	4b1c      	ldr	r3, [pc, #112]	; (80017dc <MPU6050+0xe8>)
 800176c:	2200      	movs	r2, #0
 800176e:	701a      	strb	r2, [r3, #0]

	//Se escriben los registros de calibración para el Accel
	//Se reinician las rutas de las señales del Accel y el Gyro
	i2c_writeSingleRegister(&handlerAccelerometer, 0x68, 0b11 << 1);
 8001770:	2206      	movs	r2, #6
 8001772:	2168      	movs	r1, #104	; 0x68
 8001774:	4816      	ldr	r0, [pc, #88]	; (80017d0 <MPU6050+0xdc>)
 8001776:	f001 f902 	bl	800297e <i2c_writeSingleRegister>

	//Se selecciona el modo de ultra alta resolución para el Accel
	i2c_writeSingleRegister(&handlerAccelerometer, 0x1C, 0b00 << 4);
 800177a:	2200      	movs	r2, #0
 800177c:	211c      	movs	r1, #28
 800177e:	4814      	ldr	r0, [pc, #80]	; (80017d0 <MPU6050+0xdc>)
 8001780:	f001 f8fd 	bl	800297e <i2c_writeSingleRegister>

	//Se selecciona el modo de ultra alta resolución para el Gyro
	i2c_writeSingleRegister(&handlerAccelerometer, 0x1B, 0b00 << 4);
 8001784:	2200      	movs	r2, #0
 8001786:	211b      	movs	r1, #27
 8001788:	4811      	ldr	r0, [pc, #68]	; (80017d0 <MPU6050+0xdc>)
 800178a:	f001 f8f8 	bl	800297e <i2c_writeSingleRegister>

	//Desactivamos el sensor de temperatura integrado en el MPU6050
	i2c_writeSingleRegister(&handlerAccelerometer, 0x6B, 0b01 << 3);
 800178e:	2208      	movs	r2, #8
 8001790:	216b      	movs	r1, #107	; 0x6b
 8001792:	480f      	ldr	r0, [pc, #60]	; (80017d0 <MPU6050+0xdc>)
 8001794:	f001 f8f3 	bl	800297e <i2c_writeSingleRegister>

	//Se reinicia la configuración del accel
	i2c_writeSingleRegister(&handlerAccelerometer, PWR_MGMT_1, 0x00);
 8001798:	2200      	movs	r2, #0
 800179a:	216b      	movs	r1, #107	; 0x6b
 800179c:	480c      	ldr	r0, [pc, #48]	; (80017d0 <MPU6050+0xdc>)
 800179e:	f001 f8ee 	bl	800297e <i2c_writeSingleRegister>
	rxData = '\0';
 80017a2:	4b0e      	ldr	r3, [pc, #56]	; (80017dc <MPU6050+0xe8>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	701a      	strb	r2, [r3, #0]

	sprintf(bufferData, "\nPWR_MGMT_1 reset (w)\n");
 80017a8:	490e      	ldr	r1, [pc, #56]	; (80017e4 <MPU6050+0xf0>)
 80017aa:	4807      	ldr	r0, [pc, #28]	; (80017c8 <MPU6050+0xd4>)
 80017ac:	f002 fca8 	bl	8004100 <siprintf>
	writeMsgTX(&handlerUsart1, bufferData);
 80017b0:	4905      	ldr	r1, [pc, #20]	; (80017c8 <MPU6050+0xd4>)
 80017b2:	4806      	ldr	r0, [pc, #24]	; (80017cc <MPU6050+0xd8>)
 80017b4:	f001 fc66 	bl	8003084 <writeMsgTX>

	writeMsg(&handlerUsart1, "\nAccel calibrado correctamente \n");
 80017b8:	490b      	ldr	r1, [pc, #44]	; (80017e8 <MPU6050+0xf4>)
 80017ba:	4804      	ldr	r0, [pc, #16]	; (80017cc <MPU6050+0xd8>)
 80017bc:	f001 fc3e 	bl	800303c <writeMsg>
}
 80017c0:	bf00      	nop
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	080089e8 	.word	0x080089e8
 80017c8:	200003bc 	.word	0x200003bc
 80017cc:	20000270 	.word	0x20000270
 80017d0:	200003a8 	.word	0x200003a8
 80017d4:	200003bb 	.word	0x200003bb
 80017d8:	080089f8 	.word	0x080089f8
 80017dc:	200003b8 	.word	0x200003b8
 80017e0:	08008a0c 	.word	0x08008a0c
 80017e4:	08008a24 	.word	0x08008a24
 80017e8:	08008a3c 	.word	0x08008a3c

080017ec <calibrationDataBar>:

/* Función para guardar en datos que se puedan manipular toda la información de calibración
 * necesaria que se encuentra en los registros del dispositivo.
 */

void calibrationDataBar(void){
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b086      	sub	sp, #24
 80017f0:	af00      	add	r7, sp, #0

	//AC1
	uint8_t AC1_high = i2c_readSingleRegister(&handlerBarometer, 0xAA);
 80017f2:	21aa      	movs	r1, #170	; 0xaa
 80017f4:	487e      	ldr	r0, [pc, #504]	; (80019f0 <calibrationDataBar+0x204>)
 80017f6:	f001 f891 	bl	800291c <i2c_readSingleRegister>
 80017fa:	4603      	mov	r3, r0
 80017fc:	75fb      	strb	r3, [r7, #23]
	uint8_t AC1_low = i2c_readSingleRegister(&handlerBarometer, 0xAB);
 80017fe:	21ab      	movs	r1, #171	; 0xab
 8001800:	487b      	ldr	r0, [pc, #492]	; (80019f0 <calibrationDataBar+0x204>)
 8001802:	f001 f88b 	bl	800291c <i2c_readSingleRegister>
 8001806:	4603      	mov	r3, r0
 8001808:	75bb      	strb	r3, [r7, #22]
	AC1 = (AC1_high << 8) + AC1_low;
 800180a:	7dfb      	ldrb	r3, [r7, #23]
 800180c:	b29b      	uxth	r3, r3
 800180e:	021b      	lsls	r3, r3, #8
 8001810:	b29a      	uxth	r2, r3
 8001812:	7dbb      	ldrb	r3, [r7, #22]
 8001814:	b29b      	uxth	r3, r3
 8001816:	4413      	add	r3, r2
 8001818:	b29b      	uxth	r3, r3
 800181a:	b21a      	sxth	r2, r3
 800181c:	4b75      	ldr	r3, [pc, #468]	; (80019f4 <calibrationDataBar+0x208>)
 800181e:	801a      	strh	r2, [r3, #0]

	//AC2
	uint8_t AC2_high = i2c_readSingleRegister(&handlerBarometer, 0xAC);
 8001820:	21ac      	movs	r1, #172	; 0xac
 8001822:	4873      	ldr	r0, [pc, #460]	; (80019f0 <calibrationDataBar+0x204>)
 8001824:	f001 f87a 	bl	800291c <i2c_readSingleRegister>
 8001828:	4603      	mov	r3, r0
 800182a:	757b      	strb	r3, [r7, #21]
	uint8_t AC2_low = i2c_readSingleRegister(&handlerBarometer, 0xAD);
 800182c:	21ad      	movs	r1, #173	; 0xad
 800182e:	4870      	ldr	r0, [pc, #448]	; (80019f0 <calibrationDataBar+0x204>)
 8001830:	f001 f874 	bl	800291c <i2c_readSingleRegister>
 8001834:	4603      	mov	r3, r0
 8001836:	753b      	strb	r3, [r7, #20]
	AC2 = (AC2_high << 8) + AC2_low;
 8001838:	7d7b      	ldrb	r3, [r7, #21]
 800183a:	b29b      	uxth	r3, r3
 800183c:	021b      	lsls	r3, r3, #8
 800183e:	b29a      	uxth	r2, r3
 8001840:	7d3b      	ldrb	r3, [r7, #20]
 8001842:	b29b      	uxth	r3, r3
 8001844:	4413      	add	r3, r2
 8001846:	b29b      	uxth	r3, r3
 8001848:	b21a      	sxth	r2, r3
 800184a:	4b6b      	ldr	r3, [pc, #428]	; (80019f8 <calibrationDataBar+0x20c>)
 800184c:	801a      	strh	r2, [r3, #0]

	//AC3
	uint8_t AC3_high = i2c_readSingleRegister(&handlerBarometer, 0xAE);
 800184e:	21ae      	movs	r1, #174	; 0xae
 8001850:	4867      	ldr	r0, [pc, #412]	; (80019f0 <calibrationDataBar+0x204>)
 8001852:	f001 f863 	bl	800291c <i2c_readSingleRegister>
 8001856:	4603      	mov	r3, r0
 8001858:	74fb      	strb	r3, [r7, #19]
	uint8_t AC3_low = i2c_readSingleRegister(&handlerBarometer, 0xAF);
 800185a:	21af      	movs	r1, #175	; 0xaf
 800185c:	4864      	ldr	r0, [pc, #400]	; (80019f0 <calibrationDataBar+0x204>)
 800185e:	f001 f85d 	bl	800291c <i2c_readSingleRegister>
 8001862:	4603      	mov	r3, r0
 8001864:	74bb      	strb	r3, [r7, #18]
	AC3 = (AC3_high << 8) + AC3_low;
 8001866:	7cfb      	ldrb	r3, [r7, #19]
 8001868:	b29b      	uxth	r3, r3
 800186a:	021b      	lsls	r3, r3, #8
 800186c:	b29a      	uxth	r2, r3
 800186e:	7cbb      	ldrb	r3, [r7, #18]
 8001870:	b29b      	uxth	r3, r3
 8001872:	4413      	add	r3, r2
 8001874:	b29b      	uxth	r3, r3
 8001876:	b21a      	sxth	r2, r3
 8001878:	4b60      	ldr	r3, [pc, #384]	; (80019fc <calibrationDataBar+0x210>)
 800187a:	801a      	strh	r2, [r3, #0]

	//AC4
	uint8_t AC4_high = i2c_readSingleRegister(&handlerBarometer, 0xB0);
 800187c:	21b0      	movs	r1, #176	; 0xb0
 800187e:	485c      	ldr	r0, [pc, #368]	; (80019f0 <calibrationDataBar+0x204>)
 8001880:	f001 f84c 	bl	800291c <i2c_readSingleRegister>
 8001884:	4603      	mov	r3, r0
 8001886:	747b      	strb	r3, [r7, #17]
	uint8_t AC4_low = i2c_readSingleRegister(&handlerBarometer, 0xB1);
 8001888:	21b1      	movs	r1, #177	; 0xb1
 800188a:	4859      	ldr	r0, [pc, #356]	; (80019f0 <calibrationDataBar+0x204>)
 800188c:	f001 f846 	bl	800291c <i2c_readSingleRegister>
 8001890:	4603      	mov	r3, r0
 8001892:	743b      	strb	r3, [r7, #16]
	AC4 = (AC4_high << 8) + AC4_low;
 8001894:	7c7b      	ldrb	r3, [r7, #17]
 8001896:	b29b      	uxth	r3, r3
 8001898:	021b      	lsls	r3, r3, #8
 800189a:	b29a      	uxth	r2, r3
 800189c:	7c3b      	ldrb	r3, [r7, #16]
 800189e:	b29b      	uxth	r3, r3
 80018a0:	4413      	add	r3, r2
 80018a2:	b29a      	uxth	r2, r3
 80018a4:	4b56      	ldr	r3, [pc, #344]	; (8001a00 <calibrationDataBar+0x214>)
 80018a6:	801a      	strh	r2, [r3, #0]

	//AC5
	uint8_t AC5_high = i2c_readSingleRegister(&handlerBarometer, 0xB2);
 80018a8:	21b2      	movs	r1, #178	; 0xb2
 80018aa:	4851      	ldr	r0, [pc, #324]	; (80019f0 <calibrationDataBar+0x204>)
 80018ac:	f001 f836 	bl	800291c <i2c_readSingleRegister>
 80018b0:	4603      	mov	r3, r0
 80018b2:	73fb      	strb	r3, [r7, #15]
	uint8_t AC5_low = i2c_readSingleRegister(&handlerBarometer, 0xB3);
 80018b4:	21b3      	movs	r1, #179	; 0xb3
 80018b6:	484e      	ldr	r0, [pc, #312]	; (80019f0 <calibrationDataBar+0x204>)
 80018b8:	f001 f830 	bl	800291c <i2c_readSingleRegister>
 80018bc:	4603      	mov	r3, r0
 80018be:	73bb      	strb	r3, [r7, #14]
	AC5 = (AC5_high << 8) + AC5_low;
 80018c0:	7bfb      	ldrb	r3, [r7, #15]
 80018c2:	b29b      	uxth	r3, r3
 80018c4:	021b      	lsls	r3, r3, #8
 80018c6:	b29a      	uxth	r2, r3
 80018c8:	7bbb      	ldrb	r3, [r7, #14]
 80018ca:	b29b      	uxth	r3, r3
 80018cc:	4413      	add	r3, r2
 80018ce:	b29a      	uxth	r2, r3
 80018d0:	4b4c      	ldr	r3, [pc, #304]	; (8001a04 <calibrationDataBar+0x218>)
 80018d2:	801a      	strh	r2, [r3, #0]

	//AC6
	uint8_t AC6_high = i2c_readSingleRegister(&handlerBarometer, 0xB4);
 80018d4:	21b4      	movs	r1, #180	; 0xb4
 80018d6:	4846      	ldr	r0, [pc, #280]	; (80019f0 <calibrationDataBar+0x204>)
 80018d8:	f001 f820 	bl	800291c <i2c_readSingleRegister>
 80018dc:	4603      	mov	r3, r0
 80018de:	737b      	strb	r3, [r7, #13]
	uint8_t AC6_low = i2c_readSingleRegister(&handlerBarometer, 0xB5);
 80018e0:	21b5      	movs	r1, #181	; 0xb5
 80018e2:	4843      	ldr	r0, [pc, #268]	; (80019f0 <calibrationDataBar+0x204>)
 80018e4:	f001 f81a 	bl	800291c <i2c_readSingleRegister>
 80018e8:	4603      	mov	r3, r0
 80018ea:	733b      	strb	r3, [r7, #12]
	AC6 = (AC6_high << 8) + AC6_low;
 80018ec:	7b7b      	ldrb	r3, [r7, #13]
 80018ee:	b29b      	uxth	r3, r3
 80018f0:	021b      	lsls	r3, r3, #8
 80018f2:	b29a      	uxth	r2, r3
 80018f4:	7b3b      	ldrb	r3, [r7, #12]
 80018f6:	b29b      	uxth	r3, r3
 80018f8:	4413      	add	r3, r2
 80018fa:	b29a      	uxth	r2, r3
 80018fc:	4b42      	ldr	r3, [pc, #264]	; (8001a08 <calibrationDataBar+0x21c>)
 80018fe:	801a      	strh	r2, [r3, #0]

	//B1
	uint8_t B1_low = i2c_readSingleRegister(&handlerBarometer, 0xB7);
 8001900:	21b7      	movs	r1, #183	; 0xb7
 8001902:	483b      	ldr	r0, [pc, #236]	; (80019f0 <calibrationDataBar+0x204>)
 8001904:	f001 f80a 	bl	800291c <i2c_readSingleRegister>
 8001908:	4603      	mov	r3, r0
 800190a:	72fb      	strb	r3, [r7, #11]
	uint8_t B1_high = i2c_readSingleRegister(&handlerBarometer, 0xB6);
 800190c:	21b6      	movs	r1, #182	; 0xb6
 800190e:	4838      	ldr	r0, [pc, #224]	; (80019f0 <calibrationDataBar+0x204>)
 8001910:	f001 f804 	bl	800291c <i2c_readSingleRegister>
 8001914:	4603      	mov	r3, r0
 8001916:	72bb      	strb	r3, [r7, #10]
	B1 = (B1_high << 8) + B1_low;
 8001918:	7abb      	ldrb	r3, [r7, #10]
 800191a:	b29b      	uxth	r3, r3
 800191c:	021b      	lsls	r3, r3, #8
 800191e:	b29a      	uxth	r2, r3
 8001920:	7afb      	ldrb	r3, [r7, #11]
 8001922:	b29b      	uxth	r3, r3
 8001924:	4413      	add	r3, r2
 8001926:	b29b      	uxth	r3, r3
 8001928:	b21a      	sxth	r2, r3
 800192a:	4b38      	ldr	r3, [pc, #224]	; (8001a0c <calibrationDataBar+0x220>)
 800192c:	801a      	strh	r2, [r3, #0]

	//B2
	uint8_t B2_high = i2c_readSingleRegister(&handlerBarometer, 0xB8);
 800192e:	21b8      	movs	r1, #184	; 0xb8
 8001930:	482f      	ldr	r0, [pc, #188]	; (80019f0 <calibrationDataBar+0x204>)
 8001932:	f000 fff3 	bl	800291c <i2c_readSingleRegister>
 8001936:	4603      	mov	r3, r0
 8001938:	727b      	strb	r3, [r7, #9]
	uint8_t B2_low = i2c_readSingleRegister(&handlerBarometer, 0xB9);
 800193a:	21b9      	movs	r1, #185	; 0xb9
 800193c:	482c      	ldr	r0, [pc, #176]	; (80019f0 <calibrationDataBar+0x204>)
 800193e:	f000 ffed 	bl	800291c <i2c_readSingleRegister>
 8001942:	4603      	mov	r3, r0
 8001944:	723b      	strb	r3, [r7, #8]
	B2 = (B2_high << 8) + B2_low;
 8001946:	7a7b      	ldrb	r3, [r7, #9]
 8001948:	b29b      	uxth	r3, r3
 800194a:	021b      	lsls	r3, r3, #8
 800194c:	b29a      	uxth	r2, r3
 800194e:	7a3b      	ldrb	r3, [r7, #8]
 8001950:	b29b      	uxth	r3, r3
 8001952:	4413      	add	r3, r2
 8001954:	b29b      	uxth	r3, r3
 8001956:	b21a      	sxth	r2, r3
 8001958:	4b2d      	ldr	r3, [pc, #180]	; (8001a10 <calibrationDataBar+0x224>)
 800195a:	801a      	strh	r2, [r3, #0]

	//MB
	uint8_t MB_high = i2c_readSingleRegister(&handlerBarometer, 0xBA);
 800195c:	21ba      	movs	r1, #186	; 0xba
 800195e:	4824      	ldr	r0, [pc, #144]	; (80019f0 <calibrationDataBar+0x204>)
 8001960:	f000 ffdc 	bl	800291c <i2c_readSingleRegister>
 8001964:	4603      	mov	r3, r0
 8001966:	71fb      	strb	r3, [r7, #7]
	uint8_t MB_low = i2c_readSingleRegister(&handlerBarometer, 0xBB);
 8001968:	21bb      	movs	r1, #187	; 0xbb
 800196a:	4821      	ldr	r0, [pc, #132]	; (80019f0 <calibrationDataBar+0x204>)
 800196c:	f000 ffd6 	bl	800291c <i2c_readSingleRegister>
 8001970:	4603      	mov	r3, r0
 8001972:	71bb      	strb	r3, [r7, #6]
	MB = (MB_high << 8) + MB_low;
 8001974:	79fb      	ldrb	r3, [r7, #7]
 8001976:	b29b      	uxth	r3, r3
 8001978:	021b      	lsls	r3, r3, #8
 800197a:	b29a      	uxth	r2, r3
 800197c:	79bb      	ldrb	r3, [r7, #6]
 800197e:	b29b      	uxth	r3, r3
 8001980:	4413      	add	r3, r2
 8001982:	b29b      	uxth	r3, r3
 8001984:	b21a      	sxth	r2, r3
 8001986:	4b23      	ldr	r3, [pc, #140]	; (8001a14 <calibrationDataBar+0x228>)
 8001988:	801a      	strh	r2, [r3, #0]

	//MC
	uint8_t MC_high = i2c_readSingleRegister(&handlerBarometer, 0xBC);
 800198a:	21bc      	movs	r1, #188	; 0xbc
 800198c:	4818      	ldr	r0, [pc, #96]	; (80019f0 <calibrationDataBar+0x204>)
 800198e:	f000 ffc5 	bl	800291c <i2c_readSingleRegister>
 8001992:	4603      	mov	r3, r0
 8001994:	717b      	strb	r3, [r7, #5]
	uint8_t MC_low = i2c_readSingleRegister(&handlerBarometer, 0xBD);
 8001996:	21bd      	movs	r1, #189	; 0xbd
 8001998:	4815      	ldr	r0, [pc, #84]	; (80019f0 <calibrationDataBar+0x204>)
 800199a:	f000 ffbf 	bl	800291c <i2c_readSingleRegister>
 800199e:	4603      	mov	r3, r0
 80019a0:	713b      	strb	r3, [r7, #4]
	MC = (MC_high << 8) + MC_low;
 80019a2:	797b      	ldrb	r3, [r7, #5]
 80019a4:	b29b      	uxth	r3, r3
 80019a6:	021b      	lsls	r3, r3, #8
 80019a8:	b29a      	uxth	r2, r3
 80019aa:	793b      	ldrb	r3, [r7, #4]
 80019ac:	b29b      	uxth	r3, r3
 80019ae:	4413      	add	r3, r2
 80019b0:	b29b      	uxth	r3, r3
 80019b2:	b21a      	sxth	r2, r3
 80019b4:	4b18      	ldr	r3, [pc, #96]	; (8001a18 <calibrationDataBar+0x22c>)
 80019b6:	801a      	strh	r2, [r3, #0]

	//MD
	uint8_t MD_high = i2c_readSingleRegister(&handlerBarometer, 0xBE);
 80019b8:	21be      	movs	r1, #190	; 0xbe
 80019ba:	480d      	ldr	r0, [pc, #52]	; (80019f0 <calibrationDataBar+0x204>)
 80019bc:	f000 ffae 	bl	800291c <i2c_readSingleRegister>
 80019c0:	4603      	mov	r3, r0
 80019c2:	70fb      	strb	r3, [r7, #3]
	uint8_t MD_low = i2c_readSingleRegister(&handlerBarometer, 0xBF);
 80019c4:	21bf      	movs	r1, #191	; 0xbf
 80019c6:	480a      	ldr	r0, [pc, #40]	; (80019f0 <calibrationDataBar+0x204>)
 80019c8:	f000 ffa8 	bl	800291c <i2c_readSingleRegister>
 80019cc:	4603      	mov	r3, r0
 80019ce:	70bb      	strb	r3, [r7, #2]
	MD = (MD_high << 8) + MD_low;
 80019d0:	78fb      	ldrb	r3, [r7, #3]
 80019d2:	b29b      	uxth	r3, r3
 80019d4:	021b      	lsls	r3, r3, #8
 80019d6:	b29a      	uxth	r2, r3
 80019d8:	78bb      	ldrb	r3, [r7, #2]
 80019da:	b29b      	uxth	r3, r3
 80019dc:	4413      	add	r3, r2
 80019de:	b29b      	uxth	r3, r3
 80019e0:	b21a      	sxth	r2, r3
 80019e2:	4b0e      	ldr	r3, [pc, #56]	; (8001a1c <calibrationDataBar+0x230>)
 80019e4:	801a      	strh	r2, [r3, #0]
}
 80019e6:	bf00      	nop
 80019e8:	3718      	adds	r7, #24
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	200003b0 	.word	0x200003b0
 80019f4:	20000614 	.word	0x20000614
 80019f8:	20000616 	.word	0x20000616
 80019fc:	20000618 	.word	0x20000618
 8001a00:	2000061a 	.word	0x2000061a
 8001a04:	2000061c 	.word	0x2000061c
 8001a08:	2000061e 	.word	0x2000061e
 8001a0c:	20000620 	.word	0x20000620
 8001a10:	20000622 	.word	0x20000622
 8001a14:	20000624 	.word	0x20000624
 8001a18:	20000626 	.word	0x20000626
 8001a1c:	20000628 	.word	0x20000628

08001a20 <calibrationDataAcc>:

void calibrationDataAcc(void){
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b084      	sub	sp, #16
 8001a24:	af00      	add	r7, sp, #0

	uint8_t AccelX_low = i2c_readSingleRegister(&handlerAccelerometer, ACCEL_XOUT_L);
 8001a26:	213c      	movs	r1, #60	; 0x3c
 8001a28:	4840      	ldr	r0, [pc, #256]	; (8001b2c <calibrationDataAcc+0x10c>)
 8001a2a:	f000 ff77 	bl	800291c <i2c_readSingleRegister>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	73fb      	strb	r3, [r7, #15]
	uint8_t AccelX_high = i2c_readSingleRegister(&handlerAccelerometer, ACCEL_XOUT_H);
 8001a32:	213b      	movs	r1, #59	; 0x3b
 8001a34:	483d      	ldr	r0, [pc, #244]	; (8001b2c <calibrationDataAcc+0x10c>)
 8001a36:	f000 ff71 	bl	800291c <i2c_readSingleRegister>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	73bb      	strb	r3, [r7, #14]
	AccelX = AccelX_high << 8 | AccelX_low;
 8001a3e:	7bbb      	ldrb	r3, [r7, #14]
 8001a40:	021b      	lsls	r3, r3, #8
 8001a42:	b21a      	sxth	r2, r3
 8001a44:	7bfb      	ldrb	r3, [r7, #15]
 8001a46:	b21b      	sxth	r3, r3
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	b21a      	sxth	r2, r3
 8001a4c:	4b38      	ldr	r3, [pc, #224]	; (8001b30 <calibrationDataAcc+0x110>)
 8001a4e:	801a      	strh	r2, [r3, #0]

	uint8_t AccelY_low = i2c_readSingleRegister(&handlerAccelerometer, ACCEL_YOUT_L);
 8001a50:	213e      	movs	r1, #62	; 0x3e
 8001a52:	4836      	ldr	r0, [pc, #216]	; (8001b2c <calibrationDataAcc+0x10c>)
 8001a54:	f000 ff62 	bl	800291c <i2c_readSingleRegister>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	737b      	strb	r3, [r7, #13]
	uint8_t AccelY_high = i2c_readSingleRegister(&handlerAccelerometer, ACCEL_YOUT_H);
 8001a5c:	213d      	movs	r1, #61	; 0x3d
 8001a5e:	4833      	ldr	r0, [pc, #204]	; (8001b2c <calibrationDataAcc+0x10c>)
 8001a60:	f000 ff5c 	bl	800291c <i2c_readSingleRegister>
 8001a64:	4603      	mov	r3, r0
 8001a66:	733b      	strb	r3, [r7, #12]
	AccelY = AccelY_high << 8 | AccelY_low;
 8001a68:	7b3b      	ldrb	r3, [r7, #12]
 8001a6a:	021b      	lsls	r3, r3, #8
 8001a6c:	b21a      	sxth	r2, r3
 8001a6e:	7b7b      	ldrb	r3, [r7, #13]
 8001a70:	b21b      	sxth	r3, r3
 8001a72:	4313      	orrs	r3, r2
 8001a74:	b21a      	sxth	r2, r3
 8001a76:	4b2f      	ldr	r3, [pc, #188]	; (8001b34 <calibrationDataAcc+0x114>)
 8001a78:	801a      	strh	r2, [r3, #0]

	uint8_t AccelZ_low = i2c_readSingleRegister(&handlerAccelerometer, ACCEL_ZOUT_L);
 8001a7a:	2140      	movs	r1, #64	; 0x40
 8001a7c:	482b      	ldr	r0, [pc, #172]	; (8001b2c <calibrationDataAcc+0x10c>)
 8001a7e:	f000 ff4d 	bl	800291c <i2c_readSingleRegister>
 8001a82:	4603      	mov	r3, r0
 8001a84:	72fb      	strb	r3, [r7, #11]
	uint8_t AccelZ_high = i2c_readSingleRegister(&handlerAccelerometer, ACCEL_ZOUT_H);
 8001a86:	213f      	movs	r1, #63	; 0x3f
 8001a88:	4828      	ldr	r0, [pc, #160]	; (8001b2c <calibrationDataAcc+0x10c>)
 8001a8a:	f000 ff47 	bl	800291c <i2c_readSingleRegister>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	72bb      	strb	r3, [r7, #10]
	AccelZ = AccelZ_high << 8 | AccelZ_low;
 8001a92:	7abb      	ldrb	r3, [r7, #10]
 8001a94:	021b      	lsls	r3, r3, #8
 8001a96:	b21a      	sxth	r2, r3
 8001a98:	7afb      	ldrb	r3, [r7, #11]
 8001a9a:	b21b      	sxth	r3, r3
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	b21a      	sxth	r2, r3
 8001aa0:	4b25      	ldr	r3, [pc, #148]	; (8001b38 <calibrationDataAcc+0x118>)
 8001aa2:	801a      	strh	r2, [r3, #0]

	uint8_t GyrX_low = i2c_readSingleRegister(&handlerAccelerometer, GYRO_XOUT_L);
 8001aa4:	2144      	movs	r1, #68	; 0x44
 8001aa6:	4821      	ldr	r0, [pc, #132]	; (8001b2c <calibrationDataAcc+0x10c>)
 8001aa8:	f000 ff38 	bl	800291c <i2c_readSingleRegister>
 8001aac:	4603      	mov	r3, r0
 8001aae:	727b      	strb	r3, [r7, #9]
	uint8_t GyrX_high = i2c_readSingleRegister(&handlerAccelerometer, GYRO_XOUT_H);
 8001ab0:	2143      	movs	r1, #67	; 0x43
 8001ab2:	481e      	ldr	r0, [pc, #120]	; (8001b2c <calibrationDataAcc+0x10c>)
 8001ab4:	f000 ff32 	bl	800291c <i2c_readSingleRegister>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	723b      	strb	r3, [r7, #8]
	GyrX = GyrX_high << 8 | GyrX_low;
 8001abc:	7a3b      	ldrb	r3, [r7, #8]
 8001abe:	021b      	lsls	r3, r3, #8
 8001ac0:	b21a      	sxth	r2, r3
 8001ac2:	7a7b      	ldrb	r3, [r7, #9]
 8001ac4:	b21b      	sxth	r3, r3
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	b21a      	sxth	r2, r3
 8001aca:	4b1c      	ldr	r3, [pc, #112]	; (8001b3c <calibrationDataAcc+0x11c>)
 8001acc:	801a      	strh	r2, [r3, #0]

	uint8_t GyrY_low = i2c_readSingleRegister(&handlerAccelerometer, GYRO_YOUT_L);
 8001ace:	2146      	movs	r1, #70	; 0x46
 8001ad0:	4816      	ldr	r0, [pc, #88]	; (8001b2c <calibrationDataAcc+0x10c>)
 8001ad2:	f000 ff23 	bl	800291c <i2c_readSingleRegister>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	71fb      	strb	r3, [r7, #7]
	uint8_t GyrY_high = i2c_readSingleRegister(&handlerAccelerometer, GYRO_YOUT_H);
 8001ada:	2145      	movs	r1, #69	; 0x45
 8001adc:	4813      	ldr	r0, [pc, #76]	; (8001b2c <calibrationDataAcc+0x10c>)
 8001ade:	f000 ff1d 	bl	800291c <i2c_readSingleRegister>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	71bb      	strb	r3, [r7, #6]
	GyrY = GyrY_high << 8 | GyrY_low;
 8001ae6:	79bb      	ldrb	r3, [r7, #6]
 8001ae8:	021b      	lsls	r3, r3, #8
 8001aea:	b21a      	sxth	r2, r3
 8001aec:	79fb      	ldrb	r3, [r7, #7]
 8001aee:	b21b      	sxth	r3, r3
 8001af0:	4313      	orrs	r3, r2
 8001af2:	b21a      	sxth	r2, r3
 8001af4:	4b12      	ldr	r3, [pc, #72]	; (8001b40 <calibrationDataAcc+0x120>)
 8001af6:	801a      	strh	r2, [r3, #0]

	uint8_t GyrZ_low = i2c_readSingleRegister(&handlerAccelerometer, GYRO_ZOUT_L);
 8001af8:	2148      	movs	r1, #72	; 0x48
 8001afa:	480c      	ldr	r0, [pc, #48]	; (8001b2c <calibrationDataAcc+0x10c>)
 8001afc:	f000 ff0e 	bl	800291c <i2c_readSingleRegister>
 8001b00:	4603      	mov	r3, r0
 8001b02:	717b      	strb	r3, [r7, #5]
	uint8_t GyrZ_high = i2c_readSingleRegister(&handlerAccelerometer, GYRO_ZOUT_H);
 8001b04:	2147      	movs	r1, #71	; 0x47
 8001b06:	4809      	ldr	r0, [pc, #36]	; (8001b2c <calibrationDataAcc+0x10c>)
 8001b08:	f000 ff08 	bl	800291c <i2c_readSingleRegister>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	713b      	strb	r3, [r7, #4]
	GyrZ = GyrZ_high << 8 | GyrZ_low;
 8001b10:	793b      	ldrb	r3, [r7, #4]
 8001b12:	021b      	lsls	r3, r3, #8
 8001b14:	b21a      	sxth	r2, r3
 8001b16:	797b      	ldrb	r3, [r7, #5]
 8001b18:	b21b      	sxth	r3, r3
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	b21a      	sxth	r2, r3
 8001b1e:	4b09      	ldr	r3, [pc, #36]	; (8001b44 <calibrationDataAcc+0x124>)
 8001b20:	801a      	strh	r2, [r3, #0]
}
 8001b22:	bf00      	nop
 8001b24:	3710      	adds	r7, #16
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	200003a8 	.word	0x200003a8
 8001b30:	20000600 	.word	0x20000600
 8001b34:	20000602 	.word	0x20000602
 8001b38:	20000604 	.word	0x20000604
 8001b3c:	20000606 	.word	0x20000606
 8001b40:	20000608 	.word	0x20000608
 8001b44:	2000060a 	.word	0x2000060a

08001b48 <getTemp>:

//Función que entrega la temperatura final ya calibrada
long getTemp(void){
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0

	X1 = ((UT-AC6)*AC5)/(32768);
 8001b4c:	4b1c      	ldr	r3, [pc, #112]	; (8001bc0 <getTemp+0x78>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a1c      	ldr	r2, [pc, #112]	; (8001bc4 <getTemp+0x7c>)
 8001b52:	8812      	ldrh	r2, [r2, #0]
 8001b54:	1a9b      	subs	r3, r3, r2
 8001b56:	4a1c      	ldr	r2, [pc, #112]	; (8001bc8 <getTemp+0x80>)
 8001b58:	8812      	ldrh	r2, [r2, #0]
 8001b5a:	fb02 f303 	mul.w	r3, r2, r3
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	da02      	bge.n	8001b68 <getTemp+0x20>
 8001b62:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 8001b66:	337f      	adds	r3, #127	; 0x7f
 8001b68:	13db      	asrs	r3, r3, #15
 8001b6a:	461a      	mov	r2, r3
 8001b6c:	4b17      	ldr	r3, [pc, #92]	; (8001bcc <getTemp+0x84>)
 8001b6e:	601a      	str	r2, [r3, #0]
	X2 = (MC*(2048))/(X1 + MD);
 8001b70:	4b17      	ldr	r3, [pc, #92]	; (8001bd0 <getTemp+0x88>)
 8001b72:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b76:	02da      	lsls	r2, r3, #11
 8001b78:	4b16      	ldr	r3, [pc, #88]	; (8001bd4 <getTemp+0x8c>)
 8001b7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b7e:	4619      	mov	r1, r3
 8001b80:	4b12      	ldr	r3, [pc, #72]	; (8001bcc <getTemp+0x84>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	440b      	add	r3, r1
 8001b86:	fb92 f3f3 	sdiv	r3, r2, r3
 8001b8a:	4a13      	ldr	r2, [pc, #76]	; (8001bd8 <getTemp+0x90>)
 8001b8c:	6013      	str	r3, [r2, #0]
	B5 = X1 + X2;
 8001b8e:	4b0f      	ldr	r3, [pc, #60]	; (8001bcc <getTemp+0x84>)
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	4b11      	ldr	r3, [pc, #68]	; (8001bd8 <getTemp+0x90>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4413      	add	r3, r2
 8001b98:	4a10      	ldr	r2, [pc, #64]	; (8001bdc <getTemp+0x94>)
 8001b9a:	6013      	str	r3, [r2, #0]
	T = (B5 + 8)/(16);
 8001b9c:	4b0f      	ldr	r3, [pc, #60]	; (8001bdc <getTemp+0x94>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	3308      	adds	r3, #8
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	da00      	bge.n	8001ba8 <getTemp+0x60>
 8001ba6:	330f      	adds	r3, #15
 8001ba8:	111b      	asrs	r3, r3, #4
 8001baa:	461a      	mov	r2, r3
 8001bac:	4b0c      	ldr	r3, [pc, #48]	; (8001be0 <getTemp+0x98>)
 8001bae:	601a      	str	r2, [r3, #0]
	return T;
 8001bb0:	4b0b      	ldr	r3, [pc, #44]	; (8001be0 <getTemp+0x98>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr
 8001bbe:	bf00      	nop
 8001bc0:	2000062c 	.word	0x2000062c
 8001bc4:	2000061e 	.word	0x2000061e
 8001bc8:	2000061c 	.word	0x2000061c
 8001bcc:	20000634 	.word	0x20000634
 8001bd0:	20000626 	.word	0x20000626
 8001bd4:	20000628 	.word	0x20000628
 8001bd8:	20000638 	.word	0x20000638
 8001bdc:	20000644 	.word	0x20000644
 8001be0:	2000064c 	.word	0x2000064c

08001be4 <getPress>:


//Función que entrega la pressión final ya calibrada
long getPress(void){
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0

	B6 = B5 - 4000;
 8001be8:	4b74      	ldr	r3, [pc, #464]	; (8001dbc <getPress+0x1d8>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f5a3 637a 	sub.w	r3, r3, #4000	; 0xfa0
 8001bf0:	4a73      	ldr	r2, [pc, #460]	; (8001dc0 <getPress+0x1dc>)
 8001bf2:	6013      	str	r3, [r2, #0]
	X1 = (B2 * (B6 * B6/(4096))) / (2048);
 8001bf4:	4b73      	ldr	r3, [pc, #460]	; (8001dc4 <getPress+0x1e0>)
 8001bf6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	4b70      	ldr	r3, [pc, #448]	; (8001dc0 <getPress+0x1dc>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a6f      	ldr	r2, [pc, #444]	; (8001dc0 <getPress+0x1dc>)
 8001c02:	6812      	ldr	r2, [r2, #0]
 8001c04:	fb02 f303 	mul.w	r3, r2, r3
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	da01      	bge.n	8001c10 <getPress+0x2c>
 8001c0c:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8001c10:	131b      	asrs	r3, r3, #12
 8001c12:	fb01 f303 	mul.w	r3, r1, r3
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	da01      	bge.n	8001c1e <getPress+0x3a>
 8001c1a:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8001c1e:	12db      	asrs	r3, r3, #11
 8001c20:	461a      	mov	r2, r3
 8001c22:	4b69      	ldr	r3, [pc, #420]	; (8001dc8 <getPress+0x1e4>)
 8001c24:	601a      	str	r2, [r3, #0]
	X2 = (AC2 * B6) / (2048);
 8001c26:	4b69      	ldr	r3, [pc, #420]	; (8001dcc <getPress+0x1e8>)
 8001c28:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c2c:	461a      	mov	r2, r3
 8001c2e:	4b64      	ldr	r3, [pc, #400]	; (8001dc0 <getPress+0x1dc>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	fb02 f303 	mul.w	r3, r2, r3
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	da01      	bge.n	8001c3e <getPress+0x5a>
 8001c3a:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8001c3e:	12db      	asrs	r3, r3, #11
 8001c40:	461a      	mov	r2, r3
 8001c42:	4b63      	ldr	r3, [pc, #396]	; (8001dd0 <getPress+0x1ec>)
 8001c44:	601a      	str	r2, [r3, #0]
	X3 = X1 + X2;
 8001c46:	4b60      	ldr	r3, [pc, #384]	; (8001dc8 <getPress+0x1e4>)
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	4b61      	ldr	r3, [pc, #388]	; (8001dd0 <getPress+0x1ec>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4413      	add	r3, r2
 8001c50:	4a60      	ldr	r2, [pc, #384]	; (8001dd4 <getPress+0x1f0>)
 8001c52:	6013      	str	r3, [r2, #0]
	B3 = (((AC1*4)+(X3 << oss)) + 2)/4;
 8001c54:	4b60      	ldr	r3, [pc, #384]	; (8001dd8 <getPress+0x1f4>)
 8001c56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c5a:	009a      	lsls	r2, r3, #2
 8001c5c:	4b5d      	ldr	r3, [pc, #372]	; (8001dd4 <getPress+0x1f0>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	495e      	ldr	r1, [pc, #376]	; (8001ddc <getPress+0x1f8>)
 8001c62:	f9b1 1000 	ldrsh.w	r1, [r1]
 8001c66:	408b      	lsls	r3, r1
 8001c68:	4413      	add	r3, r2
 8001c6a:	3302      	adds	r3, #2
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	da00      	bge.n	8001c72 <getPress+0x8e>
 8001c70:	3303      	adds	r3, #3
 8001c72:	109b      	asrs	r3, r3, #2
 8001c74:	461a      	mov	r2, r3
 8001c76:	4b5a      	ldr	r3, [pc, #360]	; (8001de0 <getPress+0x1fc>)
 8001c78:	601a      	str	r2, [r3, #0]
	X1 = (AC3 * B6) / (8192);
 8001c7a:	4b5a      	ldr	r3, [pc, #360]	; (8001de4 <getPress+0x200>)
 8001c7c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c80:	461a      	mov	r2, r3
 8001c82:	4b4f      	ldr	r3, [pc, #316]	; (8001dc0 <getPress+0x1dc>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	fb02 f303 	mul.w	r3, r2, r3
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	da02      	bge.n	8001c94 <getPress+0xb0>
 8001c8e:	f503 53ff 	add.w	r3, r3, #8160	; 0x1fe0
 8001c92:	331f      	adds	r3, #31
 8001c94:	135b      	asrs	r3, r3, #13
 8001c96:	461a      	mov	r2, r3
 8001c98:	4b4b      	ldr	r3, [pc, #300]	; (8001dc8 <getPress+0x1e4>)
 8001c9a:	601a      	str	r2, [r3, #0]
	X2 = (B1 * (B6 * B6 / (4096)))/(65536);
 8001c9c:	4b52      	ldr	r3, [pc, #328]	; (8001de8 <getPress+0x204>)
 8001c9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	4b46      	ldr	r3, [pc, #280]	; (8001dc0 <getPress+0x1dc>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a45      	ldr	r2, [pc, #276]	; (8001dc0 <getPress+0x1dc>)
 8001caa:	6812      	ldr	r2, [r2, #0]
 8001cac:	fb02 f303 	mul.w	r3, r2, r3
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	da01      	bge.n	8001cb8 <getPress+0xd4>
 8001cb4:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8001cb8:	131b      	asrs	r3, r3, #12
 8001cba:	fb01 f303 	mul.w	r3, r1, r3
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	da02      	bge.n	8001cc8 <getPress+0xe4>
 8001cc2:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001cc6:	33ff      	adds	r3, #255	; 0xff
 8001cc8:	141b      	asrs	r3, r3, #16
 8001cca:	461a      	mov	r2, r3
 8001ccc:	4b40      	ldr	r3, [pc, #256]	; (8001dd0 <getPress+0x1ec>)
 8001cce:	601a      	str	r2, [r3, #0]
	X3 = ((X1+X2)+2) / (4) ;
 8001cd0:	4b3d      	ldr	r3, [pc, #244]	; (8001dc8 <getPress+0x1e4>)
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	4b3e      	ldr	r3, [pc, #248]	; (8001dd0 <getPress+0x1ec>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4413      	add	r3, r2
 8001cda:	3302      	adds	r3, #2
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	da00      	bge.n	8001ce2 <getPress+0xfe>
 8001ce0:	3303      	adds	r3, #3
 8001ce2:	109b      	asrs	r3, r3, #2
 8001ce4:	461a      	mov	r2, r3
 8001ce6:	4b3b      	ldr	r3, [pc, #236]	; (8001dd4 <getPress+0x1f0>)
 8001ce8:	601a      	str	r2, [r3, #0]
	B4 = (AC4 * (unsigned long)(X3 + 32768)) / (32768);
 8001cea:	4b40      	ldr	r3, [pc, #256]	; (8001dec <getPress+0x208>)
 8001cec:	881b      	ldrh	r3, [r3, #0]
 8001cee:	461a      	mov	r2, r3
 8001cf0:	4b38      	ldr	r3, [pc, #224]	; (8001dd4 <getPress+0x1f0>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001cf8:	fb02 f303 	mul.w	r3, r2, r3
 8001cfc:	0bdb      	lsrs	r3, r3, #15
 8001cfe:	4a3c      	ldr	r2, [pc, #240]	; (8001df0 <getPress+0x20c>)
 8001d00:	6013      	str	r3, [r2, #0]
	B7 = ((unsigned long)UP - B3) * (50000 >> oss);
 8001d02:	4b3c      	ldr	r3, [pc, #240]	; (8001df4 <getPress+0x210>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	461a      	mov	r2, r3
 8001d08:	4b35      	ldr	r3, [pc, #212]	; (8001de0 <getPress+0x1fc>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	4a33      	ldr	r2, [pc, #204]	; (8001ddc <getPress+0x1f8>)
 8001d10:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001d14:	4611      	mov	r1, r2
 8001d16:	f24c 3250 	movw	r2, #50000	; 0xc350
 8001d1a:	410a      	asrs	r2, r1
 8001d1c:	fb02 f303 	mul.w	r3, r2, r3
 8001d20:	4a35      	ldr	r2, [pc, #212]	; (8001df8 <getPress+0x214>)
 8001d22:	6013      	str	r3, [r2, #0]

	if(B7 < 0x80000000){
 8001d24:	4b34      	ldr	r3, [pc, #208]	; (8001df8 <getPress+0x214>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	db0a      	blt.n	8001d42 <getPress+0x15e>
		p = (B7*2) / B4;
 8001d2c:	4b32      	ldr	r3, [pc, #200]	; (8001df8 <getPress+0x214>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	005a      	lsls	r2, r3, #1
 8001d32:	4b2f      	ldr	r3, [pc, #188]	; (8001df0 <getPress+0x20c>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d3a:	461a      	mov	r2, r3
 8001d3c:	4b2f      	ldr	r3, [pc, #188]	; (8001dfc <getPress+0x218>)
 8001d3e:	601a      	str	r2, [r3, #0]
 8001d40:	e009      	b.n	8001d56 <getPress+0x172>
	}
	else{
		p = (B7/B4) * 2;
 8001d42:	4b2d      	ldr	r3, [pc, #180]	; (8001df8 <getPress+0x214>)
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	4b2a      	ldr	r3, [pc, #168]	; (8001df0 <getPress+0x20c>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d4e:	005b      	lsls	r3, r3, #1
 8001d50:	461a      	mov	r2, r3
 8001d52:	4b2a      	ldr	r3, [pc, #168]	; (8001dfc <getPress+0x218>)
 8001d54:	601a      	str	r2, [r3, #0]
	}

	X1 = (p >> 8) * (p >> 8);
 8001d56:	4b29      	ldr	r3, [pc, #164]	; (8001dfc <getPress+0x218>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	121b      	asrs	r3, r3, #8
 8001d5c:	4a27      	ldr	r2, [pc, #156]	; (8001dfc <getPress+0x218>)
 8001d5e:	6812      	ldr	r2, [r2, #0]
 8001d60:	1212      	asrs	r2, r2, #8
 8001d62:	fb02 f303 	mul.w	r3, r2, r3
 8001d66:	4a18      	ldr	r2, [pc, #96]	; (8001dc8 <getPress+0x1e4>)
 8001d68:	6013      	str	r3, [r2, #0]
	X1 = (X1 * 3038) >> 16;
 8001d6a:	4b17      	ldr	r3, [pc, #92]	; (8001dc8 <getPress+0x1e4>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f640 32de 	movw	r2, #3038	; 0xbde
 8001d72:	fb02 f303 	mul.w	r3, r2, r3
 8001d76:	141b      	asrs	r3, r3, #16
 8001d78:	4a13      	ldr	r2, [pc, #76]	; (8001dc8 <getPress+0x1e4>)
 8001d7a:	6013      	str	r3, [r2, #0]
	X2 = (-7357 * p) >> 16;
 8001d7c:	4b1f      	ldr	r3, [pc, #124]	; (8001dfc <getPress+0x218>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a1f      	ldr	r2, [pc, #124]	; (8001e00 <getPress+0x21c>)
 8001d82:	fb02 f303 	mul.w	r3, r2, r3
 8001d86:	141b      	asrs	r3, r3, #16
 8001d88:	4a11      	ldr	r2, [pc, #68]	; (8001dd0 <getPress+0x1ec>)
 8001d8a:	6013      	str	r3, [r2, #0]
	P = p + (X1 + X2 + 3791)/(16);
 8001d8c:	4b0e      	ldr	r3, [pc, #56]	; (8001dc8 <getPress+0x1e4>)
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	4b0f      	ldr	r3, [pc, #60]	; (8001dd0 <getPress+0x1ec>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4413      	add	r3, r2
 8001d96:	f603 63cf 	addw	r3, r3, #3791	; 0xecf
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	da00      	bge.n	8001da0 <getPress+0x1bc>
 8001d9e:	330f      	adds	r3, #15
 8001da0:	111b      	asrs	r3, r3, #4
 8001da2:	461a      	mov	r2, r3
 8001da4:	4b15      	ldr	r3, [pc, #84]	; (8001dfc <getPress+0x218>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4413      	add	r3, r2
 8001daa:	4a16      	ldr	r2, [pc, #88]	; (8001e04 <getPress+0x220>)
 8001dac:	6013      	str	r3, [r2, #0]

	return P;
 8001dae:	4b15      	ldr	r3, [pc, #84]	; (8001e04 <getPress+0x220>)
 8001db0:	681b      	ldr	r3, [r3, #0]
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr
 8001dbc:	20000644 	.word	0x20000644
 8001dc0:	20000648 	.word	0x20000648
 8001dc4:	20000622 	.word	0x20000622
 8001dc8:	20000634 	.word	0x20000634
 8001dcc:	20000616 	.word	0x20000616
 8001dd0:	20000638 	.word	0x20000638
 8001dd4:	2000063c 	.word	0x2000063c
 8001dd8:	20000614 	.word	0x20000614
 8001ddc:	20000008 	.word	0x20000008
 8001de0:	20000640 	.word	0x20000640
 8001de4:	20000618 	.word	0x20000618
 8001de8:	20000620 	.word	0x20000620
 8001dec:	2000061a 	.word	0x2000061a
 8001df0:	20000658 	.word	0x20000658
 8001df4:	20000630 	.word	0x20000630
 8001df8:	2000065c 	.word	0x2000065c
 8001dfc:	20000654 	.word	0x20000654
 8001e00:	ffffe343 	.word	0xffffe343
 8001e04:	20000650 	.word	0x20000650

08001e08 <usart1Rx_Callback>:

void usart1Rx_Callback(void){
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	af00      	add	r7, sp, #0
	//Leemos el valor del registro DR, donde se almacena el dato que llega.
	rxData = getRxData();
 8001e0c:	f001 f92e 	bl	800306c <getRxData>
 8001e10:	4603      	mov	r3, r0
 8001e12:	461a      	mov	r2, r3
 8001e14:	4b01      	ldr	r3, [pc, #4]	; (8001e1c <usart1Rx_Callback+0x14>)
 8001e16:	701a      	strb	r2, [r3, #0]
}
 8001e18:	bf00      	nop
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	200003b8 	.word	0x200003b8

08001e20 <BasicTimer2_Callback>:

void BasicTimer2_Callback(void){
 8001e20:	b580      	push	{r7, lr}
 8001e22:	af00      	add	r7, sp, #0
	GPIOxTooglePin(&handlerBlinky);
 8001e24:	4802      	ldr	r0, [pc, #8]	; (8001e30 <BasicTimer2_Callback+0x10>)
 8001e26:	f000 fba6 	bl	8002576 <GPIOxTooglePin>
}
 8001e2a:	bf00      	nop
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	2000020c 	.word	0x2000020c

08001e34 <BasicTimer5_Callback>:

void BasicTimer5_Callback(void){
 8001e34:	b480      	push	{r7}
 8001e36:	af00      	add	r7, sp, #0

	//Bandera que se levanta cada medio segundo para mostrar los datos en consola
	flagData = 1;
 8001e38:	4b03      	ldr	r3, [pc, #12]	; (8001e48 <BasicTimer5_Callback+0x14>)
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	701a      	strb	r2, [r3, #0]
}
 8001e3e:	bf00      	nop
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr
 8001e48:	200003b9 	.word	0x200003b9

08001e4c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001e4c:	480d      	ldr	r0, [pc, #52]	; (8001e84 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001e4e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001e50:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e54:	480c      	ldr	r0, [pc, #48]	; (8001e88 <LoopForever+0x6>)
  ldr r1, =_edata
 8001e56:	490d      	ldr	r1, [pc, #52]	; (8001e8c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001e58:	4a0d      	ldr	r2, [pc, #52]	; (8001e90 <LoopForever+0xe>)
  movs r3, #0
 8001e5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e5c:	e002      	b.n	8001e64 <LoopCopyDataInit>

08001e5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e62:	3304      	adds	r3, #4

08001e64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e68:	d3f9      	bcc.n	8001e5e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e6a:	4a0a      	ldr	r2, [pc, #40]	; (8001e94 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001e6c:	4c0a      	ldr	r4, [pc, #40]	; (8001e98 <LoopForever+0x16>)
  movs r3, #0
 8001e6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e70:	e001      	b.n	8001e76 <LoopFillZerobss>

08001e72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e74:	3204      	adds	r2, #4

08001e76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e78:	d3fb      	bcc.n	8001e72 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001e7a:	f001 fa95 	bl	80033a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001e7e:	f7fe ff53 	bl	8000d28 <main>

08001e82 <LoopForever>:

LoopForever:
    b LoopForever
 8001e82:	e7fe      	b.n	8001e82 <LoopForever>
  ldr   r0, =_estack
 8001e84:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001e88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e8c:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8001e90:	08008f2c 	.word	0x08008f2c
  ldr r2, =_sbss
 8001e94:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8001e98:	200006fc 	.word	0x200006fc

08001e9c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e9c:	e7fe      	b.n	8001e9c <ADC_IRQHandler>

08001e9e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e9e:	b480      	push	{r7}
 8001ea0:	af00      	add	r7, sp, #0
	return 1;
 8001ea2:	2301      	movs	r3, #1
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr

08001eae <_kill>:

int _kill(int pid, int sig)
{
 8001eae:	b580      	push	{r7, lr}
 8001eb0:	b082      	sub	sp, #8
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	6078      	str	r0, [r7, #4]
 8001eb6:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001eb8:	f001 fa70 	bl	800339c <__errno>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2216      	movs	r2, #22
 8001ec0:	601a      	str	r2, [r3, #0]
	return -1;
 8001ec2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3708      	adds	r7, #8
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}

08001ece <_exit>:

void _exit (int status)
{
 8001ece:	b580      	push	{r7, lr}
 8001ed0:	b082      	sub	sp, #8
 8001ed2:	af00      	add	r7, sp, #0
 8001ed4:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001ed6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	f7ff ffe7 	bl	8001eae <_kill>
	while (1) {}		/* Make sure we hang here */
 8001ee0:	e7fe      	b.n	8001ee0 <_exit+0x12>

08001ee2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ee2:	b580      	push	{r7, lr}
 8001ee4:	b086      	sub	sp, #24
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	60f8      	str	r0, [r7, #12]
 8001eea:	60b9      	str	r1, [r7, #8]
 8001eec:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eee:	2300      	movs	r3, #0
 8001ef0:	617b      	str	r3, [r7, #20]
 8001ef2:	e00a      	b.n	8001f0a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001ef4:	f3af 8000 	nop.w
 8001ef8:	4601      	mov	r1, r0
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	1c5a      	adds	r2, r3, #1
 8001efe:	60ba      	str	r2, [r7, #8]
 8001f00:	b2ca      	uxtb	r2, r1
 8001f02:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	3301      	adds	r3, #1
 8001f08:	617b      	str	r3, [r7, #20]
 8001f0a:	697a      	ldr	r2, [r7, #20]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	429a      	cmp	r2, r3
 8001f10:	dbf0      	blt.n	8001ef4 <_read+0x12>
	}

return len;
 8001f12:	687b      	ldr	r3, [r7, #4]
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	3718      	adds	r7, #24
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}

08001f1c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b086      	sub	sp, #24
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	60f8      	str	r0, [r7, #12]
 8001f24:	60b9      	str	r1, [r7, #8]
 8001f26:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f28:	2300      	movs	r3, #0
 8001f2a:	617b      	str	r3, [r7, #20]
 8001f2c:	e009      	b.n	8001f42 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	1c5a      	adds	r2, r3, #1
 8001f32:	60ba      	str	r2, [r7, #8]
 8001f34:	781b      	ldrb	r3, [r3, #0]
 8001f36:	4618      	mov	r0, r3
 8001f38:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	3301      	adds	r3, #1
 8001f40:	617b      	str	r3, [r7, #20]
 8001f42:	697a      	ldr	r2, [r7, #20]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	429a      	cmp	r2, r3
 8001f48:	dbf1      	blt.n	8001f2e <_write+0x12>
	}
	return len;
 8001f4a:	687b      	ldr	r3, [r7, #4]
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	3718      	adds	r7, #24
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}

08001f54 <_close>:

int _close(int file)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b083      	sub	sp, #12
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
	return -1;
 8001f5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	370c      	adds	r7, #12
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr

08001f6c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b083      	sub	sp, #12
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
 8001f74:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f7c:	605a      	str	r2, [r3, #4]
	return 0;
 8001f7e:	2300      	movs	r3, #0
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	370c      	adds	r7, #12
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr

08001f8c <_isatty>:

int _isatty(int file)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b083      	sub	sp, #12
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
	return 1;
 8001f94:	2301      	movs	r3, #1
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	370c      	adds	r7, #12
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr

08001fa2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001fa2:	b480      	push	{r7}
 8001fa4:	b085      	sub	sp, #20
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	60f8      	str	r0, [r7, #12]
 8001faa:	60b9      	str	r1, [r7, #8]
 8001fac:	607a      	str	r2, [r7, #4]
	return 0;
 8001fae:	2300      	movs	r3, #0
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	3714      	adds	r7, #20
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr

08001fbc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b086      	sub	sp, #24
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fc4:	4a14      	ldr	r2, [pc, #80]	; (8002018 <_sbrk+0x5c>)
 8001fc6:	4b15      	ldr	r3, [pc, #84]	; (800201c <_sbrk+0x60>)
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fd0:	4b13      	ldr	r3, [pc, #76]	; (8002020 <_sbrk+0x64>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d102      	bne.n	8001fde <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fd8:	4b11      	ldr	r3, [pc, #68]	; (8002020 <_sbrk+0x64>)
 8001fda:	4a12      	ldr	r2, [pc, #72]	; (8002024 <_sbrk+0x68>)
 8001fdc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fde:	4b10      	ldr	r3, [pc, #64]	; (8002020 <_sbrk+0x64>)
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4413      	add	r3, r2
 8001fe6:	693a      	ldr	r2, [r7, #16]
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d207      	bcs.n	8001ffc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fec:	f001 f9d6 	bl	800339c <__errno>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	220c      	movs	r2, #12
 8001ff4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ff6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ffa:	e009      	b.n	8002010 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ffc:	4b08      	ldr	r3, [pc, #32]	; (8002020 <_sbrk+0x64>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002002:	4b07      	ldr	r3, [pc, #28]	; (8002020 <_sbrk+0x64>)
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4413      	add	r3, r2
 800200a:	4a05      	ldr	r2, [pc, #20]	; (8002020 <_sbrk+0x64>)
 800200c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800200e:	68fb      	ldr	r3, [r7, #12]
}
 8002010:	4618      	mov	r0, r3
 8002012:	3718      	adds	r7, #24
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}
 8002018:	20020000 	.word	0x20020000
 800201c:	00000400 	.word	0x00000400
 8002020:	20000660 	.word	0x20000660
 8002024:	20000700 	.word	0x20000700

08002028 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	4603      	mov	r3, r0
 8002030:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002032:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002036:	2b00      	cmp	r3, #0
 8002038:	db0b      	blt.n	8002052 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800203a:	79fb      	ldrb	r3, [r7, #7]
 800203c:	f003 021f 	and.w	r2, r3, #31
 8002040:	4907      	ldr	r1, [pc, #28]	; (8002060 <__NVIC_EnableIRQ+0x38>)
 8002042:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002046:	095b      	lsrs	r3, r3, #5
 8002048:	2001      	movs	r0, #1
 800204a:	fa00 f202 	lsl.w	r2, r0, r2
 800204e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002052:	bf00      	nop
 8002054:	370c      	adds	r7, #12
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr
 800205e:	bf00      	nop
 8002060:	e000e100 	.word	0xe000e100

08002064 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002064:	b480      	push	{r7}
 8002066:	b083      	sub	sp, #12
 8002068:	af00      	add	r7, sp, #0
 800206a:	4603      	mov	r3, r0
 800206c:	6039      	str	r1, [r7, #0]
 800206e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002070:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002074:	2b00      	cmp	r3, #0
 8002076:	db0a      	blt.n	800208e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	b2da      	uxtb	r2, r3
 800207c:	490c      	ldr	r1, [pc, #48]	; (80020b0 <__NVIC_SetPriority+0x4c>)
 800207e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002082:	0112      	lsls	r2, r2, #4
 8002084:	b2d2      	uxtb	r2, r2
 8002086:	440b      	add	r3, r1
 8002088:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800208c:	e00a      	b.n	80020a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	b2da      	uxtb	r2, r3
 8002092:	4908      	ldr	r1, [pc, #32]	; (80020b4 <__NVIC_SetPriority+0x50>)
 8002094:	79fb      	ldrb	r3, [r7, #7]
 8002096:	f003 030f 	and.w	r3, r3, #15
 800209a:	3b04      	subs	r3, #4
 800209c:	0112      	lsls	r2, r2, #4
 800209e:	b2d2      	uxtb	r2, r2
 80020a0:	440b      	add	r3, r1
 80020a2:	761a      	strb	r2, [r3, #24]
}
 80020a4:	bf00      	nop
 80020a6:	370c      	adds	r7, #12
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr
 80020b0:	e000e100 	.word	0xe000e100
 80020b4:	e000ed00 	.word	0xe000ed00

080020b8 <BasicTimer_Config>:
 *Como vamos a trabajar con interrupciones, antes de configurar una nueva, debemos desactivar
 *el sistema global de interrupciones, activar la IRQ especifica y luego volver a encender
 *el sistema
 */

void BasicTimer_Config(BasicTimer_Handler_t *ptrBTimerHandler){
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b082      	sub	sp, #8
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]

	//Guardamos una referencia al periferico que estamos utilizando

	ptrTimerUsed = ptrBTimerHandler->ptrTIMx;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a59      	ldr	r2, [pc, #356]	; (800222c <BasicTimer_Config+0x174>)
 80020c6:	6013      	str	r3, [r2, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020c8:	b672      	cpsid	i
}
 80020ca:	bf00      	nop

	__disable_irq();

	/*1.Activar la señal de reloj del periferico requerido*/

	if(ptrBTimerHandler->ptrTIMx == TIM2){
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020d4:	d106      	bne.n	80020e4 <BasicTimer_Config+0x2c>

		//Registro del RCC que nos activa la señal de reloj para el TIM2
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 80020d6:	4b56      	ldr	r3, [pc, #344]	; (8002230 <BasicTimer_Config+0x178>)
 80020d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020da:	4a55      	ldr	r2, [pc, #340]	; (8002230 <BasicTimer_Config+0x178>)
 80020dc:	f043 0301 	orr.w	r3, r3, #1
 80020e0:	6413      	str	r3, [r2, #64]	; 0x40
 80020e2:	e024      	b.n	800212e <BasicTimer_Config+0x76>

	}
	else if(ptrBTimerHandler->ptrTIMx == TIM3){
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a52      	ldr	r2, [pc, #328]	; (8002234 <BasicTimer_Config+0x17c>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d106      	bne.n	80020fc <BasicTimer_Config+0x44>

		//Registro del RCC que nos activa la señal de reloj para el TIM3
		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 80020ee:	4b50      	ldr	r3, [pc, #320]	; (8002230 <BasicTimer_Config+0x178>)
 80020f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f2:	4a4f      	ldr	r2, [pc, #316]	; (8002230 <BasicTimer_Config+0x178>)
 80020f4:	f043 0302 	orr.w	r3, r3, #2
 80020f8:	6413      	str	r3, [r2, #64]	; 0x40
 80020fa:	e018      	b.n	800212e <BasicTimer_Config+0x76>

	}
	else if(ptrBTimerHandler->ptrTIMx == TIM4){
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a4d      	ldr	r2, [pc, #308]	; (8002238 <BasicTimer_Config+0x180>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d106      	bne.n	8002114 <BasicTimer_Config+0x5c>

		//Registro del RCC que nos activa la señal de reloj para el TIM4
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 8002106:	4b4a      	ldr	r3, [pc, #296]	; (8002230 <BasicTimer_Config+0x178>)
 8002108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210a:	4a49      	ldr	r2, [pc, #292]	; (8002230 <BasicTimer_Config+0x178>)
 800210c:	f043 0304 	orr.w	r3, r3, #4
 8002110:	6413      	str	r3, [r2, #64]	; 0x40
 8002112:	e00c      	b.n	800212e <BasicTimer_Config+0x76>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM5){
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a48      	ldr	r2, [pc, #288]	; (800223c <BasicTimer_Config+0x184>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d106      	bne.n	800212c <BasicTimer_Config+0x74>

		//Registro del RCC que nos activa la señal de reloj para el TIM5
		RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 800211e:	4b44      	ldr	r3, [pc, #272]	; (8002230 <BasicTimer_Config+0x178>)
 8002120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002122:	4a43      	ldr	r2, [pc, #268]	; (8002230 <BasicTimer_Config+0x178>)
 8002124:	f043 0308 	orr.w	r3, r3, #8
 8002128:	6413      	str	r3, [r2, #64]	; 0x40
 800212a:	e000      	b.n	800212e <BasicTimer_Config+0x76>
	}
	else{
		__NOP();
 800212c:	bf00      	nop
	 * Recordar que el pre-escaler nos indica la velocidad a la que se incrementa el counter,
	 * de forma que periodo_incremento * veces_incremento_counter = periodo_update
	 * Modificar el valor del registro PSC en el TIM utilizado
	 */

	ptrBTimerHandler->ptrTIMx->PSC = ptrBTimerHandler->TIMx_Config.TIMx_speed;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	687a      	ldr	r2, [r7, #4]
 8002134:	6892      	ldr	r2, [r2, #8]
 8002136:	629a      	str	r2, [r3, #40]	; 0x28

	/*3.Configuramos la direccion del counter (up/down)*/

	if(ptrBTimerHandler->TIMx_Config.TIMx_mode == BTIMER_MODE_UP){
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	791b      	ldrb	r3, [r3, #4]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d112      	bne.n	8002166 <BasicTimer_Config+0xae>

		/*3a. Estamos en UP_Mode, el limite se carga en ARR y se comienza en 0 */
		//Configurar el registro que nos controla el modo up or down

		ptrBTimerHandler->ptrTIMx->ARR &= ~TIM_CR1_DIR;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f022 0210 	bic.w	r2, r2, #16
 800214e:	62da      	str	r2, [r3, #44]	; 0x2c

		/*3b. Configuramos el Autoreload. Este es el "limite" hasta donde el CNT va a contar */

		ptrBTimerHandler->ptrTIMx->ARR = ptrBTimerHandler->TIMx_Config.TIMx_period - 1;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	68da      	ldr	r2, [r3, #12]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	3a01      	subs	r2, #1
 800215a:	62da      	str	r2, [r3, #44]	; 0x2c

		/*3c. Reiniciamos el registro counter*/

		ptrBTimerHandler->ptrTIMx->CNT = RESET;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	2200      	movs	r2, #0
 8002162:	625a      	str	r2, [r3, #36]	; 0x24
 8002164:	e011      	b.n	800218a <BasicTimer_Config+0xd2>

	}else{
		/*3a. Estamos en DOWN_Mode, el limite se carga en ARR (0) y se comienza con un valor alto
		 * Trabaja contando en direccion descendente
		 */
		ptrBTimerHandler->ptrTIMx->ARR |= TIM_CR1_DIR;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f042 0210 	orr.w	r2, r2, #16
 8002174:	62da      	str	r2, [r3, #44]	; 0x2c

		/*3b. Configuramos el autoreload. Este es el limite hasta donde el CNT va a contar
		 * En modo descendente, con numeros positivos, cual es el minimo valor que el ARR puede tomar*/

		ptrBTimerHandler->ptrTIMx->CNT = 0;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	2200      	movs	r2, #0
 800217c:	625a      	str	r2, [r3, #36]	; 0x24

		/*3c. Reiniciamos el registro counter
		 * Este es el valor con el que el counter comienza */

		ptrBTimerHandler->ptrTIMx->CNT = ptrBTimerHandler->TIMx_Config.TIMx_period - 1;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	68da      	ldr	r2, [r3, #12]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	3a01      	subs	r2, #1
 8002188:	625a      	str	r2, [r3, #36]	; 0x24

	}

	/*4. Activamos el Timer (el CNT debe comenzar a contar */

	ptrBTimerHandler->ptrTIMx->CR1 |= TIM_CR1_CEN;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f042 0201 	orr.w	r2, r2, #1
 8002198:	601a      	str	r2, [r3, #0]

	/*5. Activamos la interrupcion debida al Timerx Utilizado
	 * Modificar el registro encargado de activar la interrupcion generada por el TIMx */

	if (ptrBTimerHandler->TIMx_Config.TIMx_interruptEnable == 1){
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	7c1b      	ldrb	r3, [r3, #16]
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d108      	bne.n	80021b4 <BasicTimer_Config+0xfc>
		ptrBTimerHandler->ptrTIMx->DIER |= TIM_DIER_UIE;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	68da      	ldr	r2, [r3, #12]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f042 0201 	orr.w	r2, r2, #1
 80021b0:	60da      	str	r2, [r3, #12]
 80021b2:	e007      	b.n	80021c4 <BasicTimer_Config+0x10c>
	}
	else{
		ptrBTimerHandler->ptrTIMx->DIER &= ~TIM_DIER_UIE;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	68da      	ldr	r2, [r3, #12]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f022 0201 	bic.w	r2, r2, #1
 80021c2:	60da      	str	r2, [r3, #12]
	}

	/*6. Activamos el canal del sistema NVIC para que lea la interrupcion */

	if (ptrBTimerHandler->ptrTIMx == TIM2){
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021cc:	d107      	bne.n	80021de <BasicTimer_Config+0x126>

		//Activando el NVIC para la interrupcion del TIM2


		NVIC_EnableIRQ(TIM2_IRQn);
 80021ce:	201c      	movs	r0, #28
 80021d0:	f7ff ff2a 	bl	8002028 <__NVIC_EnableIRQ>
		__NVIC_SetPriority(TIM2_IRQn, 3);
 80021d4:	2103      	movs	r1, #3
 80021d6:	201c      	movs	r0, #28
 80021d8:	f7ff ff44 	bl	8002064 <__NVIC_SetPriority>
 80021dc:	e01f      	b.n	800221e <BasicTimer_Config+0x166>
	}
	else if (ptrBTimerHandler->ptrTIMx == TIM3){
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a14      	ldr	r2, [pc, #80]	; (8002234 <BasicTimer_Config+0x17c>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d103      	bne.n	80021f0 <BasicTimer_Config+0x138>

		//Activando el NVIC para la interrupcion del TIM3

		NVIC_EnableIRQ(TIM3_IRQn);
 80021e8:	201d      	movs	r0, #29
 80021ea:	f7ff ff1d 	bl	8002028 <__NVIC_EnableIRQ>
 80021ee:	e016      	b.n	800221e <BasicTimer_Config+0x166>
	}
	else if(ptrTimerUsed == TIM4){
 80021f0:	4b0e      	ldr	r3, [pc, #56]	; (800222c <BasicTimer_Config+0x174>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a10      	ldr	r2, [pc, #64]	; (8002238 <BasicTimer_Config+0x180>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d103      	bne.n	8002202 <BasicTimer_Config+0x14a>

			// Activando en NVIC para la interrupción del TIM3

		NVIC_EnableIRQ(TIM4_IRQn);
 80021fa:	201e      	movs	r0, #30
 80021fc:	f7ff ff14 	bl	8002028 <__NVIC_EnableIRQ>
 8002200:	e00d      	b.n	800221e <BasicTimer_Config+0x166>
	}
	else if(ptrTimerUsed == TIM5){
 8002202:	4b0a      	ldr	r3, [pc, #40]	; (800222c <BasicTimer_Config+0x174>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a0d      	ldr	r2, [pc, #52]	; (800223c <BasicTimer_Config+0x184>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d107      	bne.n	800221c <BasicTimer_Config+0x164>

			// Activando en NVIC para la interrupción del TIM3

		NVIC_EnableIRQ(TIM5_IRQn);
 800220c:	2032      	movs	r0, #50	; 0x32
 800220e:	f7ff ff0b 	bl	8002028 <__NVIC_EnableIRQ>
		__NVIC_SetPriority(TIM5_IRQn, 5);
 8002212:	2105      	movs	r1, #5
 8002214:	2032      	movs	r0, #50	; 0x32
 8002216:	f7ff ff25 	bl	8002064 <__NVIC_SetPriority>
 800221a:	e000      	b.n	800221e <BasicTimer_Config+0x166>
	}
	else{
		__NOP();
 800221c:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 800221e:	b662      	cpsie	i
}
 8002220:	bf00      	nop
	}

	/*7. Volvemos a activar las interrupciones del sistema*/

	__enable_irq();
}
 8002222:	bf00      	nop
 8002224:	3708      	adds	r7, #8
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	20000664 	.word	0x20000664
 8002230:	40023800 	.word	0x40023800
 8002234:	40000400 	.word	0x40000400
 8002238:	40000800 	.word	0x40000800
 800223c:	40000c00 	.word	0x40000c00

08002240 <BasicTimer3_Callback>:
	/*NOTE: This function should not be modified, when the callback id needed
	 * the BasicTimer2_Callback could be implemented in the main file */
	__NOP();
}

__attribute__((weak)) void BasicTimer3_Callback(void){
 8002240:	b480      	push	{r7}
 8002242:	af00      	add	r7, sp, #0

	/*NOTE: This function should not be modified, when the callback id needed
	 * the BasicTimer3_Callback could be implemented in the main file */
	__NOP();
 8002244:	bf00      	nop
}
 8002246:	bf00      	nop
 8002248:	46bd      	mov	sp, r7
 800224a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224e:	4770      	bx	lr

08002250 <BasicTimer4_Callback>:

__attribute__((weak)) void BasicTimer4_Callback(void){
 8002250:	b480      	push	{r7}
 8002252:	af00      	add	r7, sp, #0

	/*NOTE: This function should not be modified, when the callback id needed
	 * the BasicTimer4_Callback could be implemented in the main file */
	__NOP();
 8002254:	bf00      	nop
}
 8002256:	bf00      	nop
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr

08002260 <TIM2_IRQHandler>:
/*Esta es la funcion a la que apunta el ssema en el vector de interrupciones.
 * Se debe utilizar usando el mismo nombre definido en el vector de interrupciones.
 * Al hacerlo correctamente, el sistema apunta a esta funcion y cuando la interrupcion se lanza
 * el sistema inmediatamente salta a este lugar en la memoria */

void TIM2_IRQHandler(void){
 8002260:	b580      	push	{r7, lr}
 8002262:	af00      	add	r7, sp, #0

	/*Limpiamos la bandera que indica que la interrupcion se ha generado */

	ptrTIM2->SR &= ~TIM_SR_UIF;
 8002264:	4b05      	ldr	r3, [pc, #20]	; (800227c <TIM2_IRQHandler+0x1c>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	691a      	ldr	r2, [r3, #16]
 800226a:	4b04      	ldr	r3, [pc, #16]	; (800227c <TIM2_IRQHandler+0x1c>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f022 0201 	bic.w	r2, r2, #1
 8002272:	611a      	str	r2, [r3, #16]

	/*Lamamos a la funcion que se debe encargar de hacer algo con esta interrupcion */

	BasicTimer2_Callback();
 8002274:	f7ff fdd4 	bl	8001e20 <BasicTimer2_Callback>
}
 8002278:	bf00      	nop
 800227a:	bd80      	pop	{r7, pc}
 800227c:	2000000c 	.word	0x2000000c

08002280 <TIM3_IRQHandler>:

void TIM3_IRQHandler(void){
 8002280:	b580      	push	{r7, lr}
 8002282:	af00      	add	r7, sp, #0

	/*Limpiamos la bandera que indica que la interrupcion se ha generado */

	ptrTIM3->SR &= ~TIM_SR_UIF;
 8002284:	4b05      	ldr	r3, [pc, #20]	; (800229c <TIM3_IRQHandler+0x1c>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	691a      	ldr	r2, [r3, #16]
 800228a:	4b04      	ldr	r3, [pc, #16]	; (800229c <TIM3_IRQHandler+0x1c>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f022 0201 	bic.w	r2, r2, #1
 8002292:	611a      	str	r2, [r3, #16]

	/*Lamamos a la funcion que se debe encargar de hacer algo con esta interrupcion */

	BasicTimer3_Callback();
 8002294:	f7ff ffd4 	bl	8002240 <BasicTimer3_Callback>
}
 8002298:	bf00      	nop
 800229a:	bd80      	pop	{r7, pc}
 800229c:	20000010 	.word	0x20000010

080022a0 <TIM4_IRQHandler>:

void TIM4_IRQHandler(void){
 80022a0:	b580      	push	{r7, lr}
 80022a2:	af00      	add	r7, sp, #0

	/*Limpiamos la bandera que indica que la interrupcion se ha generado */

	ptrTIM4->SR &= ~TIM_SR_UIF;
 80022a4:	4b05      	ldr	r3, [pc, #20]	; (80022bc <TIM4_IRQHandler+0x1c>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	691a      	ldr	r2, [r3, #16]
 80022aa:	4b04      	ldr	r3, [pc, #16]	; (80022bc <TIM4_IRQHandler+0x1c>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f022 0201 	bic.w	r2, r2, #1
 80022b2:	611a      	str	r2, [r3, #16]

	/*Lamamos a la funcion que se debe encargar de hacer algo con esta interrupcion */

	BasicTimer4_Callback();
 80022b4:	f7ff ffcc 	bl	8002250 <BasicTimer4_Callback>
}
 80022b8:	bf00      	nop
 80022ba:	bd80      	pop	{r7, pc}
 80022bc:	20000014 	.word	0x20000014

080022c0 <TIM5_IRQHandler>:

void TIM5_IRQHandler(void){
 80022c0:	b580      	push	{r7, lr}
 80022c2:	af00      	add	r7, sp, #0

	/*Limpiamos la bandera que indica que la interrupcion se ha generado */

	ptrTIM5->SR &= ~TIM_SR_UIF;
 80022c4:	4b05      	ldr	r3, [pc, #20]	; (80022dc <TIM5_IRQHandler+0x1c>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	691a      	ldr	r2, [r3, #16]
 80022ca:	4b04      	ldr	r3, [pc, #16]	; (80022dc <TIM5_IRQHandler+0x1c>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f022 0201 	bic.w	r2, r2, #1
 80022d2:	611a      	str	r2, [r3, #16]

	/*Lamamos a la funcion que se debe encargar de hacer algo con esta interrupcion */

	BasicTimer5_Callback();
 80022d4:	f7ff fdae 	bl	8001e34 <BasicTimer5_Callback>
}
 80022d8:	bf00      	nop
 80022da:	bd80      	pop	{r7, pc}
 80022dc:	20000018 	.word	0x20000018

080022e0 <GPIO_Config>:
 * Lo primero y mas importante es activar la señal de reloj principal hacia
 * ese elemento especifico (relacionado con el periferico RCC), a esto llamaremos
 * simplemente "activar el periferico o activar la señal de reloj del periferico
 */

void GPIO_Config (GPIO_Handler_t *pGPIOHandler){
 80022e0:	b480      	push	{r7}
 80022e2:	b085      	sub	sp, #20
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]

	//Variable para hacer todo paso a paso

	uint32_t auxConfig = 0;
 80022e8:	2300      	movs	r3, #0
 80022ea:	60fb      	str	r3, [r7, #12]
	uint32_t auxPosition = 0;
 80022ec:	2300      	movs	r3, #0
 80022ee:	60bb      	str	r3, [r7, #8]

	//1)Activar el periferico
	//Verificamos para GPIOA

	if (pGPIOHandler->pGPIOx == GPIOA){
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a78      	ldr	r2, [pc, #480]	; (80024d8 <GPIO_Config+0x1f8>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d106      	bne.n	8002308 <GPIO_Config+0x28>
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOA

		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOAEN);
 80022fa:	4b78      	ldr	r3, [pc, #480]	; (80024dc <GPIO_Config+0x1fc>)
 80022fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fe:	4a77      	ldr	r2, [pc, #476]	; (80024dc <GPIO_Config+0x1fc>)
 8002300:	f043 0301 	orr.w	r3, r3, #1
 8002304:	6313      	str	r3, [r2, #48]	; 0x30
 8002306:	e03a      	b.n	800237e <GPIO_Config+0x9e>
	}
	//Verificamos para GPIOB

	else if (pGPIOHandler->pGPIOx == GPIOB){
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a74      	ldr	r2, [pc, #464]	; (80024e0 <GPIO_Config+0x200>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d106      	bne.n	8002320 <GPIO_Config+0x40>
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOB

		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOBEN);
 8002312:	4b72      	ldr	r3, [pc, #456]	; (80024dc <GPIO_Config+0x1fc>)
 8002314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002316:	4a71      	ldr	r2, [pc, #452]	; (80024dc <GPIO_Config+0x1fc>)
 8002318:	f043 0302 	orr.w	r3, r3, #2
 800231c:	6313      	str	r3, [r2, #48]	; 0x30
 800231e:	e02e      	b.n	800237e <GPIO_Config+0x9e>
	}
	//Verificamos para GPIOC

	else if (pGPIOHandler->pGPIOx == GPIOC){
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a6f      	ldr	r2, [pc, #444]	; (80024e4 <GPIO_Config+0x204>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d106      	bne.n	8002338 <GPIO_Config+0x58>
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOC

		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOCEN);
 800232a:	4b6c      	ldr	r3, [pc, #432]	; (80024dc <GPIO_Config+0x1fc>)
 800232c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232e:	4a6b      	ldr	r2, [pc, #428]	; (80024dc <GPIO_Config+0x1fc>)
 8002330:	f043 0304 	orr.w	r3, r3, #4
 8002334:	6313      	str	r3, [r2, #48]	; 0x30
 8002336:	e022      	b.n	800237e <GPIO_Config+0x9e>
	}
	//Verificamos para GPIOD

	else if (pGPIOHandler->pGPIOx == GPIOD){
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a6a      	ldr	r2, [pc, #424]	; (80024e8 <GPIO_Config+0x208>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d106      	bne.n	8002350 <GPIO_Config+0x70>
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOD

		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIODEN);
 8002342:	4b66      	ldr	r3, [pc, #408]	; (80024dc <GPIO_Config+0x1fc>)
 8002344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002346:	4a65      	ldr	r2, [pc, #404]	; (80024dc <GPIO_Config+0x1fc>)
 8002348:	f043 0308 	orr.w	r3, r3, #8
 800234c:	6313      	str	r3, [r2, #48]	; 0x30
 800234e:	e016      	b.n	800237e <GPIO_Config+0x9e>
	}
	//Verificamos para GPIOE

	else if (pGPIOHandler->pGPIOx == GPIOE){
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a65      	ldr	r2, [pc, #404]	; (80024ec <GPIO_Config+0x20c>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d106      	bne.n	8002368 <GPIO_Config+0x88>
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOE

		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOEEN);
 800235a:	4b60      	ldr	r3, [pc, #384]	; (80024dc <GPIO_Config+0x1fc>)
 800235c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235e:	4a5f      	ldr	r2, [pc, #380]	; (80024dc <GPIO_Config+0x1fc>)
 8002360:	f043 0310 	orr.w	r3, r3, #16
 8002364:	6313      	str	r3, [r2, #48]	; 0x30
 8002366:	e00a      	b.n	800237e <GPIO_Config+0x9e>
	}
	//Verificamos para GPIOH
	else if (pGPIOHandler->pGPIOx ==GPIOH){
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a60      	ldr	r2, [pc, #384]	; (80024f0 <GPIO_Config+0x210>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d105      	bne.n	800237e <GPIO_Config+0x9e>
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOH

		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOHEN);
 8002372:	4b5a      	ldr	r3, [pc, #360]	; (80024dc <GPIO_Config+0x1fc>)
 8002374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002376:	4a59      	ldr	r2, [pc, #356]	; (80024dc <GPIO_Config+0x1fc>)
 8002378:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800237c:	6313      	str	r3, [r2, #48]	; 0x30
	//2.Configurando el registro GPIOx_MODER
	/*Aca estamos leyendo la config moviendo "PinNumber" veces hacia la izquierda ese valor (shift left)
	 * y todo eso lo cargamos a en la variable auxConfig
	 */

	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinMode << 2 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	795b      	ldrb	r3, [r3, #5]
 8002382:	461a      	mov	r2, r3
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	791b      	ldrb	r3, [r3, #4]
 8002388:	005b      	lsls	r3, r3, #1
 800238a:	fa02 f303 	lsl.w	r3, r2, r3
 800238e:	60fb      	str	r3, [r7, #12]

	/*Antes de cargar el nuevo valor, limpiamos los bits especificos de ese registro
	 * (debemos escribir 0b00) para lo cual aplicamos una mascara y una operacion bitwise AND
	 */

	pGPIOHandler->pGPIOx->MODER &= ~(0b11 << 2 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	791b      	ldrb	r3, [r3, #4]
 800239a:	005b      	lsls	r3, r3, #1
 800239c:	2103      	movs	r1, #3
 800239e:	fa01 f303 	lsl.w	r3, r1, r3
 80023a2:	43db      	mvns	r3, r3
 80023a4:	4619      	mov	r1, r3
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	400a      	ands	r2, r1
 80023ac:	601a      	str	r2, [r3, #0]

	//Cargamos a auxConfig en el registro MODER
	pGPIOHandler->pGPIOx->MODER |= auxConfig;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	6819      	ldr	r1, [r3, #0]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	68fa      	ldr	r2, [r7, #12]
 80023ba:	430a      	orrs	r2, r1
 80023bc:	601a      	str	r2, [r3, #0]

	//3.Configurando el registro GPIOx_OTYPER
	//De nuevo leemos y movemos el valor un numero "PinNumber de veces

	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	7a1b      	ldrb	r3, [r3, #8]
 80023c2:	461a      	mov	r2, r3
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	791b      	ldrb	r3, [r3, #4]
 80023c8:	fa02 f303 	lsl.w	r3, r2, r3
 80023cc:	60fb      	str	r3, [r7, #12]

	//Limpiamos antes de cargar
	pGPIOHandler->pGPIOx->OTYPER &= ~(SET << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	685a      	ldr	r2, [r3, #4]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	791b      	ldrb	r3, [r3, #4]
 80023d8:	4619      	mov	r1, r3
 80023da:	2301      	movs	r3, #1
 80023dc:	408b      	lsls	r3, r1
 80023de:	43db      	mvns	r3, r3
 80023e0:	4619      	mov	r1, r3
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	400a      	ands	r2, r1
 80023e8:	605a      	str	r2, [r3, #4]

	//Cargamos el resultado sobre el registro adecuado
	pGPIOHandler->pGPIOx->OTYPER |= auxConfig;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	6859      	ldr	r1, [r3, #4]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	68fa      	ldr	r2, [r7, #12]
 80023f6:	430a      	orrs	r2, r1
 80023f8:	605a      	str	r2, [r3, #4]

	//5.Configurando si se desea pull-up, pull-down o flotante
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinPuPdControl << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	79db      	ldrb	r3, [r3, #7]
 80023fe:	461a      	mov	r2, r3
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	791b      	ldrb	r3, [r3, #4]
 8002404:	005b      	lsls	r3, r3, #1
 8002406:	fa02 f303 	lsl.w	r3, r2, r3
 800240a:	60fb      	str	r3, [r7, #12]

	//Limpiamos la posicion antes de cargar la nueva configuracion
	pGPIOHandler->pGPIOx->PUPDR &= ~(0b11 << 2 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	68da      	ldr	r2, [r3, #12]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	791b      	ldrb	r3, [r3, #4]
 8002416:	005b      	lsls	r3, r3, #1
 8002418:	2103      	movs	r1, #3
 800241a:	fa01 f303 	lsl.w	r3, r1, r3
 800241e:	43db      	mvns	r3, r3
 8002420:	4619      	mov	r1, r3
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	400a      	ands	r2, r1
 8002428:	60da      	str	r2, [r3, #12]

	//Cargamos el resultado sobre el registro adecuado
	pGPIOHandler->pGPIOx->PUPDR |= auxConfig;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	68d9      	ldr	r1, [r3, #12]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	68fa      	ldr	r2, [r7, #12]
 8002436:	430a      	orrs	r2, r1
 8002438:	60da      	str	r2, [r3, #12]


	//Esta es la parte para la configuracion de las funciones alternativas
	if (pGPIOHandler->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN){
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	795b      	ldrb	r3, [r3, #5]
 800243e:	2b02      	cmp	r3, #2
 8002440:	d143      	bne.n	80024ca <GPIO_Config+0x1ea>

		//Seleccionamos primero si se debe utilizar el registro bajo (AFRL) o el alto (AFRH)
		if (pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber < 8){
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	791b      	ldrb	r3, [r3, #4]
 8002446:	2b07      	cmp	r3, #7
 8002448:	d81f      	bhi.n	800248a <GPIO_Config+0x1aa>

			//Estamos en el registro AFRL, que controla los pines del PIN_0 al PIN:7
			auxPosition = 4 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	791b      	ldrb	r3, [r3, #4]
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	60bb      	str	r3, [r7, #8]

			//Limpiamos primero la posicion del registro que deseamos escribir a continuacion
			pGPIOHandler->pGPIOx->AFR[0] &= ~(0b1111 << auxPosition);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	6a1a      	ldr	r2, [r3, #32]
 8002458:	210f      	movs	r1, #15
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	fa01 f303 	lsl.w	r3, r1, r3
 8002460:	43db      	mvns	r3, r3
 8002462:	4619      	mov	r1, r3
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	400a      	ands	r2, r1
 800246a:	621a      	str	r2, [r3, #32]

			//Escribimos el valor configurado en la posicion seleccionada
			pGPIOHandler->pGPIOx->AFR[0] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	6a1a      	ldr	r2, [r3, #32]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	7a5b      	ldrb	r3, [r3, #9]
 8002476:	4619      	mov	r1, r3
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	fa01 f303 	lsl.w	r3, r1, r3
 800247e:	4619      	mov	r1, r3
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	430a      	orrs	r2, r1
 8002486:	621a      	str	r2, [r3, #32]
			//Escribimos el valor configurado en la posicion seleccionada
			pGPIOHandler->pGPIOx->AFR[1] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);

		}
	}
}  //Fin del GPIO_config
 8002488:	e01f      	b.n	80024ca <GPIO_Config+0x1ea>
			auxPosition = 4 * (pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber -8);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	791b      	ldrb	r3, [r3, #4]
 800248e:	3b08      	subs	r3, #8
 8002490:	009b      	lsls	r3, r3, #2
 8002492:	60bb      	str	r3, [r7, #8]
			pGPIOHandler->pGPIOx->AFR[1] &= ~(0b1111 << auxPosition);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800249a:	210f      	movs	r1, #15
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	fa01 f303 	lsl.w	r3, r1, r3
 80024a2:	43db      	mvns	r3, r3
 80024a4:	4619      	mov	r1, r3
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	400a      	ands	r2, r1
 80024ac:	625a      	str	r2, [r3, #36]	; 0x24
			pGPIOHandler->pGPIOx->AFR[1] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	7a5b      	ldrb	r3, [r3, #9]
 80024b8:	4619      	mov	r1, r3
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	fa01 f303 	lsl.w	r3, r1, r3
 80024c0:	4619      	mov	r1, r3
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	430a      	orrs	r2, r1
 80024c8:	625a      	str	r2, [r3, #36]	; 0x24
}  //Fin del GPIO_config
 80024ca:	bf00      	nop
 80024cc:	3714      	adds	r7, #20
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr
 80024d6:	bf00      	nop
 80024d8:	40020000 	.word	0x40020000
 80024dc:	40023800 	.word	0x40023800
 80024e0:	40020400 	.word	0x40020400
 80024e4:	40020800 	.word	0x40020800
 80024e8:	40020c00 	.word	0x40020c00
 80024ec:	40021000 	.word	0x40021000
 80024f0:	40021c00 	.word	0x40021c00

080024f4 <GPIO_WritePin>:

/*Funcion utilizada para cambiar de estado el pin entregado en el handler, asignando
 * el valor entregado en la variable newState
 */

void GPIO_WritePin (GPIO_Handler_t *pPinHandler, uint8_t newState){
 80024f4:	b480      	push	{r7}
 80024f6:	b083      	sub	sp, #12
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
 80024fc:	460b      	mov	r3, r1
 80024fe:	70fb      	strb	r3, [r7, #3]

	//Limpiamos la posicion que deseamos
	//pPinHandler->pGPIOx->ODR &= ~(SET << pPinHandler->GPIO_PinConfig.GPIO_PinNumber);

	if (newState == SET){
 8002500:	78fb      	ldrb	r3, [r7, #3]
 8002502:	2b01      	cmp	r3, #1
 8002504:	d10d      	bne.n	8002522 <GPIO_WritePin+0x2e>

		//Trabajando con la parte baja del registro
		pPinHandler->pGPIOx->BSRR |= (SET << pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	699a      	ldr	r2, [r3, #24]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	791b      	ldrb	r3, [r3, #4]
 8002510:	4619      	mov	r1, r3
 8002512:	2301      	movs	r3, #1
 8002514:	408b      	lsls	r3, r1
 8002516:	4619      	mov	r1, r3
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	430a      	orrs	r2, r1
 800251e:	619a      	str	r2, [r3, #24]
	else{

		//Trabajando con la parte alta del registro
		pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler->GPIO_PinConfig.GPIO_PinNumber + 16));
	}
}
 8002520:	e00d      	b.n	800253e <GPIO_WritePin+0x4a>
		pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler->GPIO_PinConfig.GPIO_PinNumber + 16));
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	699a      	ldr	r2, [r3, #24]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	791b      	ldrb	r3, [r3, #4]
 800252c:	3310      	adds	r3, #16
 800252e:	2101      	movs	r1, #1
 8002530:	fa01 f303 	lsl.w	r3, r1, r3
 8002534:	4619      	mov	r1, r3
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	430a      	orrs	r2, r1
 800253c:	619a      	str	r2, [r3, #24]
}
 800253e:	bf00      	nop
 8002540:	370c      	adds	r7, #12
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr

0800254a <GPIO_ReadPin>:

/*Funcion para leer el estado de un pin especifico
 *
 */

uint32_t GPIO_ReadPin(GPIO_Handler_t *pPinHandler){
 800254a:	b480      	push	{r7}
 800254c:	b085      	sub	sp, #20
 800254e:	af00      	add	r7, sp, #0
 8002550:	6078      	str	r0, [r7, #4]

	//Creamos una variable auxiliar la cual luego reotrnaremos
	uint32_t pinValue = 0;
 8002552:	2300      	movs	r3, #0
 8002554:	60fb      	str	r3, [r7, #12]

	/*Cargamos el valor del registro IDR, desplazado a la derecha tantas veces como
	 * la ubicacion del pin especifico*/
	pinValue = SET & (pPinHandler->pGPIOx->IDR >> pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	691b      	ldr	r3, [r3, #16]
 800255c:	687a      	ldr	r2, [r7, #4]
 800255e:	7912      	ldrb	r2, [r2, #4]
 8002560:	40d3      	lsrs	r3, r2
 8002562:	f003 0301 	and.w	r3, r3, #1
 8002566:	60fb      	str	r3, [r7, #12]

	return pinValue;
 8002568:	68fb      	ldr	r3, [r7, #12]

}
 800256a:	4618      	mov	r0, r3
 800256c:	3714      	adds	r7, #20
 800256e:	46bd      	mov	sp, r7
 8002570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002574:	4770      	bx	lr

08002576 <GPIOxTooglePin>:

void GPIOxTooglePin(GPIO_Handler_t *ptrPinHandler){
 8002576:	b580      	push	{r7, lr}
 8002578:	b084      	sub	sp, #16
 800257a:	af00      	add	r7, sp, #0
 800257c:	6078      	str	r0, [r7, #4]

	uint32_t pinState = GPIO_ReadPin(ptrPinHandler);
 800257e:	6878      	ldr	r0, [r7, #4]
 8002580:	f7ff ffe3 	bl	800254a <GPIO_ReadPin>
 8002584:	60f8      	str	r0, [r7, #12]

	uint8_t newState = !pinState;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	2b00      	cmp	r3, #0
 800258a:	bf0c      	ite	eq
 800258c:	2301      	moveq	r3, #1
 800258e:	2300      	movne	r3, #0
 8002590:	b2db      	uxtb	r3, r3
 8002592:	72fb      	strb	r3, [r7, #11]

	GPIO_WritePin (ptrPinHandler, newState);
 8002594:	7afb      	ldrb	r3, [r7, #11]
 8002596:	4619      	mov	r1, r3
 8002598:	6878      	ldr	r0, [r7, #4]
 800259a:	f7ff ffab 	bl	80024f4 <GPIO_WritePin>
}
 800259e:	bf00      	nop
 80025a0:	3710      	adds	r7, #16
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
	...

080025a8 <i2c_Config>:
 * Recordar que se debe configurar los pines para el I2C (SDA y SCL)
 * para los cuales se necesita el modulo GPIO y los pines configurados en el modo
 * Alternate Function.
 * Ademas, estos pines deben ser configurados como salidas open-drain y con
 * la resistencias en modo pull-up.*/
void i2c_Config(I2C_Handler_t *ptrHandlerI2C){
 80025a8:	b480      	push	{r7}
 80025aa:	b083      	sub	sp, #12
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]

	//1. Activamos la señal de reloj para el modulo I2C seleccionado
	if(ptrHandlerI2C->ptrI2Cx == I2C1){
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a67      	ldr	r2, [pc, #412]	; (8002754 <i2c_Config+0x1ac>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d106      	bne.n	80025c8 <i2c_Config+0x20>
		RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 80025ba:	4b67      	ldr	r3, [pc, #412]	; (8002758 <i2c_Config+0x1b0>)
 80025bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025be:	4a66      	ldr	r2, [pc, #408]	; (8002758 <i2c_Config+0x1b0>)
 80025c0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80025c4:	6413      	str	r3, [r2, #64]	; 0x40
 80025c6:	e016      	b.n	80025f6 <i2c_Config+0x4e>
	}
	else if(ptrHandlerI2C->ptrI2Cx == I2C2){
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a63      	ldr	r2, [pc, #396]	; (800275c <i2c_Config+0x1b4>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d106      	bne.n	80025e0 <i2c_Config+0x38>
		RCC->APB1ENR |= RCC_APB1ENR_I2C2EN;
 80025d2:	4b61      	ldr	r3, [pc, #388]	; (8002758 <i2c_Config+0x1b0>)
 80025d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d6:	4a60      	ldr	r2, [pc, #384]	; (8002758 <i2c_Config+0x1b0>)
 80025d8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80025dc:	6413      	str	r3, [r2, #64]	; 0x40
 80025de:	e00a      	b.n	80025f6 <i2c_Config+0x4e>
	}
	else if(ptrHandlerI2C->ptrI2Cx == I2C3){
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a5e      	ldr	r2, [pc, #376]	; (8002760 <i2c_Config+0x1b8>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d105      	bne.n	80025f6 <i2c_Config+0x4e>
		RCC->APB1ENR |= RCC_APB1ENR_I2C3EN;
 80025ea:	4b5b      	ldr	r3, [pc, #364]	; (8002758 <i2c_Config+0x1b0>)
 80025ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ee:	4a5a      	ldr	r2, [pc, #360]	; (8002758 <i2c_Config+0x1b0>)
 80025f0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80025f4:	6413      	str	r3, [r2, #64]	; 0x40
	}
	//2. Reiniciamos el periferico, de forma que inicia en un estado conocido
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_SWRST;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002604:	601a      	str	r2, [r3, #0]
	__NOP();
 8002606:	bf00      	nop
	ptrHandlerI2C->ptrI2Cx->CR1 &= ~I2C_CR1_SWRST;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002616:	601a      	str	r2, [r3, #0]

	//3. Indicamos cual es la velocidad del reloj principal, que es la señal utilizada por el
	// periferico para generar la señal de reloj para el bus I2C

	ptrHandlerI2C->ptrI2Cx->CR2 &= ~(0b111111 << I2C_CR2_FREQ_Pos); //Borramos la configuracion
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	685a      	ldr	r2, [r3, #4]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8002626:	605a      	str	r2, [r3, #4]

	if(ptrHandlerI2C->PLL_ON == PLL_DISABLE){
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	79db      	ldrb	r3, [r3, #7]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d108      	bne.n	8002642 <i2c_Config+0x9a>

		ptrHandlerI2C->ptrI2Cx->CR2 |= (MAIN_CLOCK_16_MHz_FOR_I2C << I2C_CR2_FREQ_Pos);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	685a      	ldr	r2, [r3, #4]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f042 0210 	orr.w	r2, r2, #16
 800263e:	605a      	str	r2, [r3, #4]
 8002640:	e00b      	b.n	800265a <i2c_Config+0xb2>

	}else if(ptrHandlerI2C->PLL_ON == PLL_ENABLE){
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	79db      	ldrb	r3, [r3, #7]
 8002646:	2b01      	cmp	r3, #1
 8002648:	d107      	bne.n	800265a <i2c_Config+0xb2>

		ptrHandlerI2C->ptrI2Cx->CR2 |= (MAIN_CLOCK_50_MHz_FOR_I2C << I2C_CR2_FREQ_Pos);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	685a      	ldr	r2, [r3, #4]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f042 0232 	orr.w	r2, r2, #50	; 0x32
 8002658:	605a      	str	r2, [r3, #4]

	/*4. Configuramos el modo I2C en el que el sistema funciona
	 * EN esta configuracion se incluye tambien la velocidad del reloj
	 * y el tiempo maximo para el cambio de la señal (T-Rise).
	 * Todo comienza con los dos registros en 0*/
	ptrHandlerI2C->ptrI2Cx->CCR = 0;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	2200      	movs	r2, #0
 8002660:	61da      	str	r2, [r3, #28]
	ptrHandlerI2C->ptrI2Cx->TRISE = 0;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	2200      	movs	r2, #0
 8002668:	621a      	str	r2, [r3, #32]

	if(ptrHandlerI2C->modeI2C == I2C_MODE_SM){
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	795b      	ldrb	r3, [r3, #5]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d131      	bne.n	80026d6 <i2c_Config+0x12e>

		/*Estamos en modo "standar" (SM mode)*/
		//Seleccionamos el modo estandar
		ptrHandlerI2C->ptrI2Cx->CCR &= ~I2C_CCR_FS;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	69da      	ldr	r2, [r3, #28]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002680:	61da      	str	r2, [r3, #28]

		if(ptrHandlerI2C->PLL_ON == PLL_DISABLE){
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	79db      	ldrb	r3, [r3, #7]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d110      	bne.n	80026ac <i2c_Config+0x104>

			//Configuramos el registro que se encarga de generar la señal de reloj
			ptrHandlerI2C->ptrI2Cx->CCR |= (I2C_MODE_SM_SPEED_100KHz << I2C_CCR_CCR_Pos);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	69da      	ldr	r2, [r3, #28]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f042 02fa 	orr.w	r2, r2, #250	; 0xfa
 8002698:	61da      	str	r2, [r3, #28]

			//Configuramos el registro que controla el tiempo T-Rise maximo
			ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_SM;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	6a1a      	ldr	r2, [r3, #32]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f042 0211 	orr.w	r2, r2, #17
 80026a8:	621a      	str	r2, [r3, #32]
 80026aa:	e045      	b.n	8002738 <i2c_Config+0x190>

		}else if(ptrHandlerI2C->PLL_ON == PLL_ENABLE){
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	79db      	ldrb	r3, [r3, #7]
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	d141      	bne.n	8002738 <i2c_Config+0x190>

			//Configuramos el registro que se encarga de generar la señal de reloj
			ptrHandlerI2C->ptrI2Cx->CCR |= (I2C_MODE_SM_SPEED_100KHz_CLOCK_40MHz << I2C_CCR_CCR_Pos);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	69da      	ldr	r2, [r3, #28]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
 80026c2:	61da      	str	r2, [r3, #28]
			//Configuramos el registro que controla el tiempo T-Rise maximo
			ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_SM_40MHz;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	6a1a      	ldr	r2, [r3, #32]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f042 0229 	orr.w	r2, r2, #41	; 0x29
 80026d2:	621a      	str	r2, [r3, #32]
 80026d4:	e030      	b.n	8002738 <i2c_Config+0x190>
	}
	else{

		//Estamos en mo "Fast" (FM Mode)
		//Seleccionamos el modo Fast
		ptrHandlerI2C->ptrI2Cx->CCR |= I2C_CCR_FS;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	69da      	ldr	r2, [r3, #28]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80026e4:	61da      	str	r2, [r3, #28]

		if(ptrHandlerI2C->PLL_ON == PLL_DISABLE){
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	79db      	ldrb	r3, [r3, #7]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d110      	bne.n	8002710 <i2c_Config+0x168>

			//Configuramos el registro que se encarga de generar la señal del reloj
			ptrHandlerI2C->ptrI2Cx->CCR |= (I2C_MODE_FM_SPEED_400KHz << I2C_CCR_CCR_Pos);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	69da      	ldr	r2, [r3, #28]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f042 022a 	orr.w	r2, r2, #42	; 0x2a
 80026fc:	61da      	str	r2, [r3, #28]

			//Configuramos el registro que controla el tiempo T-Rise maximo
			ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_FM;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	6a1a      	ldr	r2, [r3, #32]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f042 0205 	orr.w	r2, r2, #5
 800270c:	621a      	str	r2, [r3, #32]
 800270e:	e013      	b.n	8002738 <i2c_Config+0x190>

		}else if(ptrHandlerI2C->PLL_ON == PLL_ENABLE){
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	79db      	ldrb	r3, [r3, #7]
 8002714:	2b01      	cmp	r3, #1
 8002716:	d10f      	bne.n	8002738 <i2c_Config+0x190>

			//Configuramos el registro que se encarga de generar la señal del reloj
			ptrHandlerI2C->ptrI2Cx->CCR |= (I2C_MODE_FM_SPEED_400KHz_CLOCK_40MHz << I2C_CCR_CCR_Pos);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	69da      	ldr	r2, [r3, #28]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f042 0221 	orr.w	r2, r2, #33	; 0x21
 8002726:	61da      	str	r2, [r3, #28]

			//Configuramos el registro que controla el tiempo T-Rise maximo
			ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_FM_40MHz;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	6a1a      	ldr	r2, [r3, #32]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f042 020d 	orr.w	r2, r2, #13
 8002736:	621a      	str	r2, [r3, #32]
		}

	}

	//5. Activamos el modulo I2C
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_PE;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f042 0201 	orr.w	r2, r2, #1
 8002746:	601a      	str	r2, [r3, #0]
}
 8002748:	bf00      	nop
 800274a:	370c      	adds	r7, #12
 800274c:	46bd      	mov	sp, r7
 800274e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002752:	4770      	bx	lr
 8002754:	40005400 	.word	0x40005400
 8002758:	40023800 	.word	0x40023800
 800275c:	40005800 	.word	0x40005800
 8002760:	40005c00 	.word	0x40005c00

08002764 <i2c_stopTransaction>:

/*8. Generamos la condicion de stop*/
void i2c_stopTransaction(I2C_Handler_t *ptrHandlerI2C){
 8002764:	b480      	push	{r7}
 8002766:	b083      	sub	sp, #12
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
	//7. Generamos la condicion de estop
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_STOP;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800277a:	601a      	str	r2, [r3, #0]
}
 800277c:	bf00      	nop
 800277e:	370c      	adds	r7, #12
 8002780:	46bd      	mov	sp, r7
 8002782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002786:	4770      	bx	lr

08002788 <i2c_startTransaction>:

//1. Verificamos que la linea no esta ocupada - bit "busy" en I2C_CR2
//2. Generamos la señal "start"
//2a. Esperamos que la bandera del evento "start" se levante
//Mientras esperamos, el valor de SB es 0, entonces la negacion (!) es 1
void i2c_startTransaction(I2C_Handler_t *ptrHandlerI2C){
 8002788:	b480      	push	{r7}
 800278a:	b083      	sub	sp, #12
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
	//1. Verificamos que la linea no esta ocupada - bit "busy" en I2C_CR2
	while(ptrHandlerI2C->ptrI2Cx->SR2 & I2C_SR2_BUSY){
 8002790:	e000      	b.n	8002794 <i2c_startTransaction+0xc>
		__NOP();
 8002792:	bf00      	nop
	while(ptrHandlerI2C->ptrI2Cx->SR2 & I2C_SR2_BUSY){
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	699b      	ldr	r3, [r3, #24]
 800279a:	f003 0302 	and.w	r3, r3, #2
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d1f7      	bne.n	8002792 <i2c_startTransaction+0xa>
	}
	//2. Generamos la señal "start"
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_START;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027b0:	601a      	str	r2, [r3, #0]

	//2a. Esperamos a que la bandera del evento "start" se levante
	//Mientrar esperamos, el valor de SB es 0, entonces la negacion (!) es 1
	while(!(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_SB)){
 80027b2:	e000      	b.n	80027b6 <i2c_startTransaction+0x2e>
		__NOP();
 80027b4:	bf00      	nop
	while(!(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_SB)){
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	695b      	ldr	r3, [r3, #20]
 80027bc:	f003 0301 	and.w	r3, r3, #1
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d0f7      	beq.n	80027b4 <i2c_startTransaction+0x2c>
	}
}
 80027c4:	bf00      	nop
 80027c6:	bf00      	nop
 80027c8:	370c      	adds	r7, #12
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr

080027d2 <i2c_reStartTransaction>:

/**/
void i2c_reStartTransaction(I2C_Handler_t *ptrHandlerI2C){
 80027d2:	b480      	push	{r7}
 80027d4:	b083      	sub	sp, #12
 80027d6:	af00      	add	r7, sp, #0
 80027d8:	6078      	str	r0, [r7, #4]
	//2. Generamos la señal "start"
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_START;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027e8:	601a      	str	r2, [r3, #0]
	//2a. Esperamos a que la bandera del evento "start" se levante
	//Mientras esperamos, el valor de SB es 0, entonces la negacion (!) es 1
	while(!(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_SB)){
 80027ea:	e000      	b.n	80027ee <i2c_reStartTransaction+0x1c>
		__NOP();
 80027ec:	bf00      	nop
	while(!(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_SB)){
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	695b      	ldr	r3, [r3, #20]
 80027f4:	f003 0301 	and.w	r3, r3, #1
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d0f7      	beq.n	80027ec <i2c_reStartTransaction+0x1a>
	}
}
 80027fc:	bf00      	nop
 80027fe:	bf00      	nop
 8002800:	370c      	adds	r7, #12
 8002802:	46bd      	mov	sp, r7
 8002804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002808:	4770      	bx	lr

0800280a <i2c_sendNoAck>:

//7a. Activamos la inbdicacion para no-Ack (indicacion para el Slave de terminar)
void i2c_sendNoAck(I2C_Handler_t *ptrHandlerI2C){
 800280a:	b480      	push	{r7}
 800280c:	b083      	sub	sp, #12
 800280e:	af00      	add	r7, sp, #0
 8002810:	6078      	str	r0, [r7, #4]
	//Debemos escribir cero en la posicion ACK del registro de control 1
	ptrHandlerI2C->ptrI2Cx->CR1 &= ~I2C_CR1_ACK;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002820:	601a      	str	r2, [r3, #0]
}
 8002822:	bf00      	nop
 8002824:	370c      	adds	r7, #12
 8002826:	46bd      	mov	sp, r7
 8002828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282c:	4770      	bx	lr

0800282e <i2c_sendSlaveAddressRW>:
	//Debemos escribir uno en la posicion ACK del registro de control 1
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_ACK;
}

/**/
void i2c_sendSlaveAddressRW(I2C_Handler_t *ptrHandlerI2C, uint8_t slaveAddress, uint8_t readOrWrite){
 800282e:	b480      	push	{r7}
 8002830:	b085      	sub	sp, #20
 8002832:	af00      	add	r7, sp, #0
 8002834:	6078      	str	r0, [r7, #4]
 8002836:	460b      	mov	r3, r1
 8002838:	70fb      	strb	r3, [r7, #3]
 800283a:	4613      	mov	r3, r2
 800283c:	70bb      	strb	r3, [r7, #2]
	//0. Definimos una variable auxiliar
	uint8_t auxByte  = 0;
 800283e:	2300      	movs	r3, #0
 8002840:	73fb      	strb	r3, [r7, #15]
	(void) auxByte;

	/*3. Enviamos la direccion del Slave y el bit que indica que deseamos escribir (0)
	 * en el siguiente paso se envia la direccion de memoria que se desea escribir*/
	ptrHandlerI2C->ptrI2Cx->DR = (slaveAddress << 1) | readOrWrite;
 8002842:	78fb      	ldrb	r3, [r7, #3]
 8002844:	005a      	lsls	r2, r3, #1
 8002846:	78bb      	ldrb	r3, [r7, #2]
 8002848:	431a      	orrs	r2, r3
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	611a      	str	r2, [r3, #16]

	/*3.1. Esperamos hasta que la bandera del evento "addr" se levante
	 * esto nos indica que la direccion fue enviada satisfactoriamente*/
	while(!(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_ADDR)){
 8002850:	e000      	b.n	8002854 <i2c_sendSlaveAddressRW+0x26>
		__NOP();
 8002852:	bf00      	nop
	while(!(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_ADDR)){
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	695b      	ldr	r3, [r3, #20]
 800285a:	f003 0302 	and.w	r3, r3, #2
 800285e:	2b00      	cmp	r3, #0
 8002860:	d0f7      	beq.n	8002852 <i2c_sendSlaveAddressRW+0x24>
	}
	/*3.2. Debemos limpiar la bandera de la recepcion de ACK de la "addr", para lo cual
	 * debemos leer en secuencia primero el I2C_SR1 y luego I2C_SR2*/
	auxByte = ptrHandlerI2C->ptrI2Cx->SR1;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	695b      	ldr	r3, [r3, #20]
 8002868:	73fb      	strb	r3, [r7, #15]
	auxByte = ptrHandlerI2C->ptrI2Cx->SR2;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	699b      	ldr	r3, [r3, #24]
 8002870:	73fb      	strb	r3, [r7, #15]
}
 8002872:	bf00      	nop
 8002874:	3714      	adds	r7, #20
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr

0800287e <i2c_sendMemoryaddress>:

/**/
void i2c_sendMemoryaddress(I2C_Handler_t *ptrHandlerI2C, uint8_t memAddr){
 800287e:	b480      	push	{r7}
 8002880:	b083      	sub	sp, #12
 8002882:	af00      	add	r7, sp, #0
 8002884:	6078      	str	r0, [r7, #4]
 8002886:	460b      	mov	r3, r1
 8002888:	70fb      	strb	r3, [r7, #3]
	//4. Enviamos la direccion de memoria que deseamos leer
	ptrHandlerI2C->ptrI2Cx->DR = memAddr;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	78fa      	ldrb	r2, [r7, #3]
 8002890:	611a      	str	r2, [r3, #16]
	//4.1. Esperamos hasta que el byte sea transmitido
	while(!(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_TXE)){
 8002892:	e000      	b.n	8002896 <i2c_sendMemoryaddress+0x18>
		__NOP();
 8002894:	bf00      	nop
	while(!(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_TXE)){
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	695b      	ldr	r3, [r3, #20]
 800289c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d0f7      	beq.n	8002894 <i2c_sendMemoryaddress+0x16>
	}
}
 80028a4:	bf00      	nop
 80028a6:	bf00      	nop
 80028a8:	370c      	adds	r7, #12
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr

080028b2 <i2c_sendDataByte>:

/**/
void i2c_sendDataByte(I2C_Handler_t *ptrHandlerI2C, uint8_t dataToWrite){
 80028b2:	b480      	push	{r7}
 80028b4:	b083      	sub	sp, #12
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	6078      	str	r0, [r7, #4]
 80028ba:	460b      	mov	r3, r1
 80028bc:	70fb      	strb	r3, [r7, #3]
	//5. Cargamos el valor que deseamos escribir
	ptrHandlerI2C->ptrI2Cx->DR = dataToWrite;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	78fa      	ldrb	r2, [r7, #3]
 80028c4:	611a      	str	r2, [r3, #16]
	//6. Esperamos hasta que el byte sea transmitido
	while(!(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_BTF)){
 80028c6:	e000      	b.n	80028ca <i2c_sendDataByte+0x18>
		__NOP();
 80028c8:	bf00      	nop
	while(!(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_BTF)){
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	695b      	ldr	r3, [r3, #20]
 80028d0:	f003 0304 	and.w	r3, r3, #4
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d0f7      	beq.n	80028c8 <i2c_sendDataByte+0x16>
	}
}
 80028d8:	bf00      	nop
 80028da:	bf00      	nop
 80028dc:	370c      	adds	r7, #12
 80028de:	46bd      	mov	sp, r7
 80028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e4:	4770      	bx	lr

080028e6 <i2c_readDataByte>:

/**/
uint8_t i2c_readDataByte(I2C_Handler_t *ptrHandlerI2C){
 80028e6:	b480      	push	{r7}
 80028e8:	b083      	sub	sp, #12
 80028ea:	af00      	add	r7, sp, #0
 80028ec:	6078      	str	r0, [r7, #4]
	//9. Esperamos hasta que el byte entrante sea recibido
	while(!(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_RXNE)){
 80028ee:	e000      	b.n	80028f2 <i2c_readDataByte+0xc>
		__NOP();
 80028f0:	bf00      	nop
	while(!(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_RXNE)){
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	695b      	ldr	r3, [r3, #20]
 80028f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d0f7      	beq.n	80028f0 <i2c_readDataByte+0xa>
	}
	ptrHandlerI2C->dataI2C = ptrHandlerI2C->ptrI2Cx->DR;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	691b      	ldr	r3, [r3, #16]
 8002906:	b2da      	uxtb	r2, r3
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	719a      	strb	r2, [r3, #6]
	return ptrHandlerI2C->dataI2C;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	799b      	ldrb	r3, [r3, #6]
}
 8002910:	4618      	mov	r0, r3
 8002912:	370c      	adds	r7, #12
 8002914:	46bd      	mov	sp, r7
 8002916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291a:	4770      	bx	lr

0800291c <i2c_readSingleRegister>:

/**/
uint8_t i2c_readSingleRegister(I2C_Handler_t *ptrHandlerI2C, uint8_t regToRead){
 800291c:	b580      	push	{r7, lr}
 800291e:	b084      	sub	sp, #16
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
 8002924:	460b      	mov	r3, r1
 8002926:	70fb      	strb	r3, [r7, #3]
	//0. Creamos una variable auxiliar para reescribir el dato que leemos
	uint8_t auxRead = 0;
 8002928:	2300      	movs	r3, #0
 800292a:	73fb      	strb	r3, [r7, #15]
	//1. Generamos la condicion Start
	i2c_startTransaction(ptrHandlerI2C);
 800292c:	6878      	ldr	r0, [r7, #4]
 800292e:	f7ff ff2b 	bl	8002788 <i2c_startTransaction>
	//2. Enviamos la direccion del esclavo y la indicacion de escribir
	i2c_sendSlaveAddressRW(ptrHandlerI2C, ptrHandlerI2C->slaveAddress, I2C_WRITE_DATA);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	791b      	ldrb	r3, [r3, #4]
 8002936:	2200      	movs	r2, #0
 8002938:	4619      	mov	r1, r3
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	f7ff ff77 	bl	800282e <i2c_sendSlaveAddressRW>
	//3. Enviamos la direccion de memoria que deseamos leer
	i2c_sendMemoryaddress(ptrHandlerI2C, regToRead);
 8002940:	78fb      	ldrb	r3, [r7, #3]
 8002942:	4619      	mov	r1, r3
 8002944:	6878      	ldr	r0, [r7, #4]
 8002946:	f7ff ff9a 	bl	800287e <i2c_sendMemoryaddress>
	//4. Creamos una condicion de reStart
	i2c_reStartTransaction(ptrHandlerI2C);
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	f7ff ff41 	bl	80027d2 <i2c_reStartTransaction>
	//5. Enviamos la direccion del esclavo y la indicacion de leer
	i2c_sendSlaveAddressRW(ptrHandlerI2C, ptrHandlerI2C->slaveAddress, I2C_READ_DATA);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	791b      	ldrb	r3, [r3, #4]
 8002954:	2201      	movs	r2, #1
 8002956:	4619      	mov	r1, r3
 8002958:	6878      	ldr	r0, [r7, #4]
 800295a:	f7ff ff68 	bl	800282e <i2c_sendSlaveAddressRW>
	//8. Leemos el dato que envia el esclavo
	auxRead = i2c_readDataByte(ptrHandlerI2C);
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	f7ff ffc1 	bl	80028e6 <i2c_readDataByte>
 8002964:	4603      	mov	r3, r0
 8002966:	73fb      	strb	r3, [r7, #15]
	//6. Generamos la condicion de NoAck, para que el Master no responda y el slave solo envie 1 byte
	i2c_sendNoAck(ptrHandlerI2C);
 8002968:	6878      	ldr	r0, [r7, #4]
 800296a:	f7ff ff4e 	bl	800280a <i2c_sendNoAck>
	//7. Generamos la condicion Stop, para que el slave se detenga despues de 1 byte
	i2c_stopTransaction(ptrHandlerI2C);
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	f7ff fef8 	bl	8002764 <i2c_stopTransaction>

	return auxRead;
 8002974:	7bfb      	ldrb	r3, [r7, #15]
}
 8002976:	4618      	mov	r0, r3
 8002978:	3710      	adds	r7, #16
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}

0800297e <i2c_writeSingleRegister>:

/**/
void i2c_writeSingleRegister(I2C_Handler_t *ptrHandlerI2C, uint8_t regToRead, uint8_t newValue){
 800297e:	b580      	push	{r7, lr}
 8002980:	b082      	sub	sp, #8
 8002982:	af00      	add	r7, sp, #0
 8002984:	6078      	str	r0, [r7, #4]
 8002986:	460b      	mov	r3, r1
 8002988:	70fb      	strb	r3, [r7, #3]
 800298a:	4613      	mov	r3, r2
 800298c:	70bb      	strb	r3, [r7, #2]
	//1. Generamos la condicion start
	i2c_startTransaction(ptrHandlerI2C);
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	f7ff fefa 	bl	8002788 <i2c_startTransaction>
	//2. Enviamos la direccion del esclavo y ña indicacion de escribir
	i2c_sendSlaveAddressRW(ptrHandlerI2C, ptrHandlerI2C->slaveAddress, I2C_WRITE_DATA);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	791b      	ldrb	r3, [r3, #4]
 8002998:	2200      	movs	r2, #0
 800299a:	4619      	mov	r1, r3
 800299c:	6878      	ldr	r0, [r7, #4]
 800299e:	f7ff ff46 	bl	800282e <i2c_sendSlaveAddressRW>
	//3. Enviamos la direccion de memoria que deseamos escribir
	i2c_sendMemoryaddress(ptrHandlerI2C, regToRead);
 80029a2:	78fb      	ldrb	r3, [r7, #3]
 80029a4:	4619      	mov	r1, r3
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	f7ff ff69 	bl	800287e <i2c_sendMemoryaddress>
	//4. ENviamos el valor que deseamos escribir en el registro seleccionado
	i2c_sendDataByte(ptrHandlerI2C, newValue);
 80029ac:	78bb      	ldrb	r3, [r7, #2]
 80029ae:	4619      	mov	r1, r3
 80029b0:	6878      	ldr	r0, [r7, #4]
 80029b2:	f7ff ff7e 	bl	80028b2 <i2c_sendDataByte>
	//5. Generamos la condicion Stop, para que el slave se detenga despues de 1 byte
	i2c_stopTransaction(ptrHandlerI2C);
 80029b6:	6878      	ldr	r0, [r7, #4]
 80029b8:	f7ff fed4 	bl	8002764 <i2c_stopTransaction>
}
 80029bc:	bf00      	nop
 80029be:	3708      	adds	r7, #8
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}

080029c4 <__NVIC_EnableIRQ>:
{
 80029c4:	b480      	push	{r7}
 80029c6:	b083      	sub	sp, #12
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	4603      	mov	r3, r0
 80029cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	db0b      	blt.n	80029ee <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029d6:	79fb      	ldrb	r3, [r7, #7]
 80029d8:	f003 021f 	and.w	r2, r3, #31
 80029dc:	4907      	ldr	r1, [pc, #28]	; (80029fc <__NVIC_EnableIRQ+0x38>)
 80029de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029e2:	095b      	lsrs	r3, r3, #5
 80029e4:	2001      	movs	r0, #1
 80029e6:	fa00 f202 	lsl.w	r2, r0, r2
 80029ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80029ee:	bf00      	nop
 80029f0:	370c      	adds	r7, #12
 80029f2:	46bd      	mov	sp, r7
 80029f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f8:	4770      	bx	lr
 80029fa:	bf00      	nop
 80029fc:	e000e100 	.word	0xe000e100

08002a00 <config_SysTick_ms>:

uint64_t ticks = 0;
uint64_t ticks_start = 0;
uint64_t ticks_counting = 0;

void config_SysTick_ms(uint8_t systemClock){
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b082      	sub	sp, #8
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	4603      	mov	r3, r0
 8002a08:	71fb      	strb	r3, [r7, #7]
	//Reiniciamos el valor de la variable que cuenta tiempo
	ticks = 0;
 8002a0a:	4926      	ldr	r1, [pc, #152]	; (8002aa4 <config_SysTick_ms+0xa4>)
 8002a0c:	f04f 0200 	mov.w	r2, #0
 8002a10:	f04f 0300 	mov.w	r3, #0
 8002a14:	e9c1 2300 	strd	r2, r3, [r1]

	//Cargando el valor del limite de incrementos que representan 1 ms
	switch(systemClock){
 8002a18:	79fb      	ldrb	r3, [r7, #7]
 8002a1a:	2b03      	cmp	r3, #3
 8002a1c:	d81c      	bhi.n	8002a58 <config_SysTick_ms+0x58>
 8002a1e:	a201      	add	r2, pc, #4	; (adr r2, 8002a24 <config_SysTick_ms+0x24>)
 8002a20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a24:	08002a35 	.word	0x08002a35
 8002a28:	08002a3f 	.word	0x08002a3f
 8002a2c:	08002a49 	.word	0x08002a49
 8002a30:	08002a51 	.word	0x08002a51

	//Caso para el reloj HSI -> 16MHz
	case 0:
		SysTick->LOAD = SYSTICK_LOAD_VALUE_16MHz_1ms;
 8002a34:	4b1c      	ldr	r3, [pc, #112]	; (8002aa8 <config_SysTick_ms+0xa8>)
 8002a36:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8002a3a:	605a      	str	r2, [r3, #4]
		break;
 8002a3c:	e011      	b.n	8002a62 <config_SysTick_ms+0x62>

	//Caso para el reloj HSE
	case 1:
		SysTick->LOAD = SYSTICK_LOAD_VALUE_16MHz_1ms;
 8002a3e:	4b1a      	ldr	r3, [pc, #104]	; (8002aa8 <config_SysTick_ms+0xa8>)
 8002a40:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8002a44:	605a      	str	r2, [r3, #4]
		break;
 8002a46:	e00c      	b.n	8002a62 <config_SysTick_ms+0x62>

	//Caso para el reloj PLL a 100 MHz
	case 2:
		SysTick->LOAD = SYSTICK_LOAD_VALUE_100MHz_1ms;
 8002a48:	4b17      	ldr	r3, [pc, #92]	; (8002aa8 <config_SysTick_ms+0xa8>)
 8002a4a:	4a18      	ldr	r2, [pc, #96]	; (8002aac <config_SysTick_ms+0xac>)
 8002a4c:	605a      	str	r2, [r3, #4]
		break;
 8002a4e:	e008      	b.n	8002a62 <config_SysTick_ms+0x62>

	//Caso para el reloj PLL a 80 MHz
	case 3:
		SysTick->LOAD = SYSTICK_LOAD_VALUE_80MHz_1ms;
 8002a50:	4b15      	ldr	r3, [pc, #84]	; (8002aa8 <config_SysTick_ms+0xa8>)
 8002a52:	4a17      	ldr	r2, [pc, #92]	; (8002ab0 <config_SysTick_ms+0xb0>)
 8002a54:	605a      	str	r2, [r3, #4]
		break;
 8002a56:	e004      	b.n	8002a62 <config_SysTick_ms+0x62>

	//Caso en el que se ingresa un valor diferente
	default:
		SysTick->LOAD = SYSTICK_LOAD_VALUE_16MHz_1ms;
 8002a58:	4b13      	ldr	r3, [pc, #76]	; (8002aa8 <config_SysTick_ms+0xa8>)
 8002a5a:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8002a5e:	605a      	str	r2, [r3, #4]
		break;
 8002a60:	bf00      	nop
	}

	//Limpiamos el valor actual del SysTick
	SysTick->VAL = 0;
 8002a62:	4b11      	ldr	r3, [pc, #68]	; (8002aa8 <config_SysTick_ms+0xa8>)
 8002a64:	2200      	movs	r2, #0
 8002a66:	609a      	str	r2, [r3, #8]

	//Configuramos el reloj interno como el reloj para el timer
	SysTick->CTRL |= SysTick_CTRL_CLKSOURCE_Msk;
 8002a68:	4b0f      	ldr	r3, [pc, #60]	; (8002aa8 <config_SysTick_ms+0xa8>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a0e      	ldr	r2, [pc, #56]	; (8002aa8 <config_SysTick_ms+0xa8>)
 8002a6e:	f043 0304 	orr.w	r3, r3, #4
 8002a72:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002a74:	b672      	cpsid	i
}
 8002a76:	bf00      	nop

	//Desactivamos las interrupciones globales
	__disable_irq();

	//Matriculamos la interrupcion en el NVIC
	NVIC_EnableIRQ(SysTick_IRQn);
 8002a78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002a7c:	f7ff ffa2 	bl	80029c4 <__NVIC_EnableIRQ>

	//Activamos la interrupcion debida al conteo a cero del SysTick
	SysTick->CTRL |= SysTick_CTRL_TICKINT_Msk;
 8002a80:	4b09      	ldr	r3, [pc, #36]	; (8002aa8 <config_SysTick_ms+0xa8>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a08      	ldr	r2, [pc, #32]	; (8002aa8 <config_SysTick_ms+0xa8>)
 8002a86:	f043 0302 	orr.w	r3, r3, #2
 8002a8a:	6013      	str	r3, [r2, #0]

	//Activamos el timer
	SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk;
 8002a8c:	4b06      	ldr	r3, [pc, #24]	; (8002aa8 <config_SysTick_ms+0xa8>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a05      	ldr	r2, [pc, #20]	; (8002aa8 <config_SysTick_ms+0xa8>)
 8002a92:	f043 0301 	orr.w	r3, r3, #1
 8002a96:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002a98:	b662      	cpsie	i
}
 8002a9a:	bf00      	nop

	//Activamos nuevamente las interrupciones globales
	__enable_irq();
}
 8002a9c:	bf00      	nop
 8002a9e:	3708      	adds	r7, #8
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}
 8002aa4:	20000668 	.word	0x20000668
 8002aa8:	e000e010 	.word	0xe000e010
 8002aac:	000186a0 	.word	0x000186a0
 8002ab0:	00013880 	.word	0x00013880

08002ab4 <getTicks_ms>:

uint64_t getTicks_ms(void){
 8002ab4:	b480      	push	{r7}
 8002ab6:	af00      	add	r7, sp, #0
	return ticks;
 8002ab8:	4b04      	ldr	r3, [pc, #16]	; (8002acc <getTicks_ms+0x18>)
 8002aba:	e9d3 2300 	ldrd	r2, r3, [r3]
}
 8002abe:	4610      	mov	r0, r2
 8002ac0:	4619      	mov	r1, r3
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr
 8002aca:	bf00      	nop
 8002acc:	20000668 	.word	0x20000668

08002ad0 <delay_ms>:

void delay_ms(uint32_t wait_time_ms){
 8002ad0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002ad4:	b082      	sub	sp, #8
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	6078      	str	r0, [r7, #4]
	//Captura el primer valor del tiempo para comparar
	ticks_start = getTicks_ms();
 8002ada:	f7ff ffeb 	bl	8002ab4 <getTicks_ms>
 8002ade:	4602      	mov	r2, r0
 8002ae0:	460b      	mov	r3, r1
 8002ae2:	4914      	ldr	r1, [pc, #80]	; (8002b34 <delay_ms+0x64>)
 8002ae4:	e9c1 2300 	strd	r2, r3, [r1]

	//Captura el segundo valor del tiempo para comparar
	ticks_counting = getTicks_ms();
 8002ae8:	f7ff ffe4 	bl	8002ab4 <getTicks_ms>
 8002aec:	4602      	mov	r2, r0
 8002aee:	460b      	mov	r3, r1
 8002af0:	4911      	ldr	r1, [pc, #68]	; (8002b38 <delay_ms+0x68>)
 8002af2:	e9c1 2300 	strd	r2, r3, [r1]
	/*Compara: si el valor "counting" es menor que el "start + wait"
	 *actualiza el valor del "counting".
	 *Repite esta operacion hasta que counting sea mayor
	 *(Se cumple el tiempo de espera)
	 */
	while(ticks_counting < (ticks_start + (uint64_t)wait_time_ms)){
 8002af6:	e006      	b.n	8002b06 <delay_ms+0x36>

		//Actualiza el valor
		ticks_counting = getTicks_ms();
 8002af8:	f7ff ffdc 	bl	8002ab4 <getTicks_ms>
 8002afc:	4602      	mov	r2, r0
 8002afe:	460b      	mov	r3, r1
 8002b00:	490d      	ldr	r1, [pc, #52]	; (8002b38 <delay_ms+0x68>)
 8002b02:	e9c1 2300 	strd	r2, r3, [r1]
	while(ticks_counting < (ticks_start + (uint64_t)wait_time_ms)){
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	4698      	mov	r8, r3
 8002b0c:	4691      	mov	r9, r2
 8002b0e:	4b09      	ldr	r3, [pc, #36]	; (8002b34 <delay_ms+0x64>)
 8002b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b14:	eb18 0402 	adds.w	r4, r8, r2
 8002b18:	eb49 0503 	adc.w	r5, r9, r3
 8002b1c:	4b06      	ldr	r3, [pc, #24]	; (8002b38 <delay_ms+0x68>)
 8002b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b22:	42a2      	cmp	r2, r4
 8002b24:	41ab      	sbcs	r3, r5
 8002b26:	d3e7      	bcc.n	8002af8 <delay_ms+0x28>
	}
}
 8002b28:	bf00      	nop
 8002b2a:	bf00      	nop
 8002b2c:	3708      	adds	r7, #8
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002b34:	20000670 	.word	0x20000670
 8002b38:	20000678 	.word	0x20000678

08002b3c <SysTick_Handler>:

void SysTick_Handler(void){
 8002b3c:	b480      	push	{r7}
 8002b3e:	af00      	add	r7, sp, #0

	//Verificamos que la interrupcion se lanzo
	if(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk){
 8002b40:	4b0c      	ldr	r3, [pc, #48]	; (8002b74 <SysTick_Handler+0x38>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d00e      	beq.n	8002b6a <SysTick_Handler+0x2e>

		//Limpiamos la bandera
		SysTick->CTRL &= ~SysTick_CTRL_COUNTFLAG_Msk;
 8002b4c:	4b09      	ldr	r3, [pc, #36]	; (8002b74 <SysTick_Handler+0x38>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a08      	ldr	r2, [pc, #32]	; (8002b74 <SysTick_Handler+0x38>)
 8002b52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b56:	6013      	str	r3, [r2, #0]

		//Incrementamos en 1 el contador
		ticks++;
 8002b58:	4b07      	ldr	r3, [pc, #28]	; (8002b78 <SysTick_Handler+0x3c>)
 8002b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b5e:	1c50      	adds	r0, r2, #1
 8002b60:	f143 0100 	adc.w	r1, r3, #0
 8002b64:	4b04      	ldr	r3, [pc, #16]	; (8002b78 <SysTick_Handler+0x3c>)
 8002b66:	e9c3 0100 	strd	r0, r1, [r3]
	}
}
 8002b6a:	bf00      	nop
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b72:	4770      	bx	lr
 8002b74:	e000e010 	.word	0xe000e010
 8002b78:	20000668 	.word	0x20000668

08002b7c <__NVIC_EnableIRQ>:
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b083      	sub	sp, #12
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	4603      	mov	r3, r0
 8002b84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	db0b      	blt.n	8002ba6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b8e:	79fb      	ldrb	r3, [r7, #7]
 8002b90:	f003 021f 	and.w	r2, r3, #31
 8002b94:	4907      	ldr	r1, [pc, #28]	; (8002bb4 <__NVIC_EnableIRQ+0x38>)
 8002b96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b9a:	095b      	lsrs	r3, r3, #5
 8002b9c:	2001      	movs	r0, #1
 8002b9e:	fa00 f202 	lsl.w	r2, r0, r2
 8002ba2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002ba6:	bf00      	nop
 8002ba8:	370c      	adds	r7, #12
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr
 8002bb2:	bf00      	nop
 8002bb4:	e000e100 	.word	0xe000e100

08002bb8 <USART_Config>:
char auxArray[100];
volatile uint16_t counterTx = 0;
volatile uint16_t dataTx = 0;


 void USART_Config(USART_Handler_t *ptrUsartHandler){
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b082      	sub	sp, #8
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
	/* 1. Activamos la señal de reloj que viene desde el BUS al que pertenece el periferico */
	/* Lo debemos hacer para cada uno de las pisbles opciones que tengamos (USART1, USART2, USART6) */

	if(ptrUsartHandler->ptrUSARTx == USART1){
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a8b      	ldr	r2, [pc, #556]	; (8002df4 <USART_Config+0x23c>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d106      	bne.n	8002bd8 <USART_Config+0x20>

		RCC->APB2ENR |= (RCC_APB2ENR_USART1EN);
 8002bca:	4b8b      	ldr	r3, [pc, #556]	; (8002df8 <USART_Config+0x240>)
 8002bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bce:	4a8a      	ldr	r2, [pc, #552]	; (8002df8 <USART_Config+0x240>)
 8002bd0:	f043 0310 	orr.w	r3, r3, #16
 8002bd4:	6453      	str	r3, [r2, #68]	; 0x44
 8002bd6:	e016      	b.n	8002c06 <USART_Config+0x4e>

	}else if(ptrUsartHandler->ptrUSARTx == USART2){
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a87      	ldr	r2, [pc, #540]	; (8002dfc <USART_Config+0x244>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d106      	bne.n	8002bf0 <USART_Config+0x38>

		RCC->APB1ENR |= (RCC_APB1ENR_USART2EN);
 8002be2:	4b85      	ldr	r3, [pc, #532]	; (8002df8 <USART_Config+0x240>)
 8002be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be6:	4a84      	ldr	r2, [pc, #528]	; (8002df8 <USART_Config+0x240>)
 8002be8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bec:	6413      	str	r3, [r2, #64]	; 0x40
 8002bee:	e00a      	b.n	8002c06 <USART_Config+0x4e>

	}else if(ptrUsartHandler->ptrUSARTx == USART6){
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a82      	ldr	r2, [pc, #520]	; (8002e00 <USART_Config+0x248>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d105      	bne.n	8002c06 <USART_Config+0x4e>

		RCC->APB2ENR |= (RCC_APB2ENR_USART6EN);
 8002bfa:	4b7f      	ldr	r3, [pc, #508]	; (8002df8 <USART_Config+0x240>)
 8002bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bfe:	4a7e      	ldr	r2, [pc, #504]	; (8002df8 <USART_Config+0x240>)
 8002c00:	f043 0320 	orr.w	r3, r3, #32
 8002c04:	6453      	str	r3, [r2, #68]	; 0x44
	/* Configuracion del Baudrate (registro BRR) */
	/* Configuramos el modo: only TX, only RX, o RXTX */
	/* Por ultimo activamos el modulo USART cuando todo esta correctamente configurado */

	// 2.1 Comienzo por limpiar los registros, para cargar la configuración desde cero
	ptrUsartHandler->ptrUSARTx->CR1 = 0;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	60da      	str	r2, [r3, #12]
	ptrUsartHandler->ptrUSARTx->CR2 = 0;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	2200      	movs	r2, #0
 8002c14:	611a      	str	r2, [r3, #16]

	// 2.2 Configuracion del Parity:
	// Verificamos si el parity esta activado o no
    // Tenga cuidado, el parity hace parte del tamaño de los datos...
	if(ptrUsartHandler->USART_Config.USART_parity != USART_PARITY_NONE){
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	7a1b      	ldrb	r3, [r3, #8]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d025      	beq.n	8002c6a <USART_Config+0xb2>

		ptrUsartHandler->ptrUSARTx->CR1 |= (USART_CR1_PCE);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	68da      	ldr	r2, [r3, #12]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002c2c:	60da      	str	r2, [r3, #12]

		// Verificamos si se ha seleccionado ODD or EVEN
		if(ptrUsartHandler->USART_Config.USART_parity == USART_PARITY_EVEN){
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	7a1b      	ldrb	r3, [r3, #8]
 8002c32:	2b02      	cmp	r3, #2
 8002c34:	d108      	bne.n	8002c48 <USART_Config+0x90>
			// Es even, entonces cargamos la configuracion adecuada
			ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_PS);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	68da      	ldr	r2, [r3, #12]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002c44:	60da      	str	r2, [r3, #12]
 8002c46:	e018      	b.n	8002c7a <USART_Config+0xc2>

		}else{
			// Si es "else" significa que la paridad seleccionada es ODD, y cargamos esta configuracion
			ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_PS);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	68da      	ldr	r2, [r3, #12]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002c56:	60da      	str	r2, [r3, #12]
			ptrUsartHandler->ptrUSARTx->CR1 |= (USART_CR1_PS);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	68da      	ldr	r2, [r3, #12]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c66:	60da      	str	r2, [r3, #12]
 8002c68:	e007      	b.n	8002c7a <USART_Config+0xc2>

		}
	}else{
		// Si llegamos aca, es porque no deseamos tener el parity-check
		ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_PCE);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	68da      	ldr	r2, [r3, #12]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c78:	60da      	str	r2, [r3, #12]
	}

	// 2.3 Configuramos el tamaño del dato
    if(ptrUsartHandler->USART_Config.USART_datasize == USART_DATASIZE_8BIT){
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	79db      	ldrb	r3, [r3, #7]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d108      	bne.n	8002c94 <USART_Config+0xdc>
    	ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_M);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	68da      	ldr	r2, [r3, #12]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002c90:	60da      	str	r2, [r3, #12]
 8002c92:	e007      	b.n	8002ca4 <USART_Config+0xec>
    }
    else{
    	ptrUsartHandler->ptrUSARTx->CR1 |= (USART_CR1_M);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	68da      	ldr	r2, [r3, #12]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002ca2:	60da      	str	r2, [r3, #12]
    }

	// 2.4 Configuramos los stop bits (SFR USART_CR2)
	switch(ptrUsartHandler->USART_Config.USART_stopbits){
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	7a5b      	ldrb	r3, [r3, #9]
 8002ca8:	2b03      	cmp	r3, #3
 8002caa:	d847      	bhi.n	8002d3c <USART_Config+0x184>
 8002cac:	a201      	add	r2, pc, #4	; (adr r2, 8002cb4 <USART_Config+0xfc>)
 8002cae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cb2:	bf00      	nop
 8002cb4:	08002cc5 	.word	0x08002cc5
 8002cb8:	08002cd7 	.word	0x08002cd7
 8002cbc:	08002cf9 	.word	0x08002cf9
 8002cc0:	08002d1b 	.word	0x08002d1b
	case USART_STOPBIT_1: {
		// Debemos cargar el valor 0b00 en los dos bits de STOP
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(USART_CR2_STOP);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	691a      	ldr	r2, [r3, #16]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002cd2:	611a      	str	r2, [r3, #16]
		break;
 8002cd4:	e03b      	b.n	8002d4e <USART_Config+0x196>
	}
	case USART_STOPBIT_0_5: {
		// Debemo scargar el valor 0b01 en los dos bits de STOP
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(USART_CR2_STOP);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	691a      	ldr	r2, [r3, #16]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002ce4:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (USART_CR2_STOP_0);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	691a      	ldr	r2, [r3, #16]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002cf4:	611a      	str	r2, [r3, #16]
		break;
 8002cf6:	e02a      	b.n	8002d4e <USART_Config+0x196>
	}
	case USART_STOPBIT_2: {
		// Debemos cargar el valor 0b10 en los dos bits de STOP
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(USART_CR2_STOP);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	691a      	ldr	r2, [r3, #16]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002d06:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (USART_CR2_STOP_1);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	691a      	ldr	r2, [r3, #16]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d16:	611a      	str	r2, [r3, #16]
		break;
 8002d18:	e019      	b.n	8002d4e <USART_Config+0x196>
	}
	case USART_STOPBIT_1_5: {
		// Debemos cargar el valor 0b11 en los dos bits de STOP
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(USART_CR2_STOP);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	691a      	ldr	r2, [r3, #16]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002d28:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (USART_CR2_STOP);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	691a      	ldr	r2, [r3, #16]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8002d38:	611a      	str	r2, [r3, #16]
		break;
 8002d3a:	e008      	b.n	8002d4e <USART_Config+0x196>
	}
	default: {
		// En el caso por defecto seleccionamos 1 bit de parada
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(USART_CR2_STOP);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	691a      	ldr	r2, [r3, #16]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002d4a:	611a      	str	r2, [r3, #16]
		break;
 8002d4c:	bf00      	nop
	}
	}

	// 2.5 Configuracion del Baudrate (SFR USART_BRR)
	// Ver tabla de valores (Tabla 73), Frec = 16MHz, overr = 0;
	if(ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_9600){
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	795b      	ldrb	r3, [r3, #5]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d119      	bne.n	8002d8a <USART_Config+0x1d2>
		if(ptrUsartHandler->USART_Config.USART_PLL_EN == PLL_DISABLE){
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	799b      	ldrb	r3, [r3, #6]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d105      	bne.n	8002d6a <USART_Config+0x1b2>
			// El valor a cargar es 104.1875 -> Mantiza = 104,fraction = 0.1875
			// Mantiza = 104 = 0x68, fraction = 16 * 0.1875 = 3
			// Valor a cargar 0x0683
			// Configurando el Baudrate generator para una velocidad de 9600bps

			ptrUsartHandler->ptrUSARTx->BRR = 0x0683;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f240 6283 	movw	r2, #1667	; 0x683
 8002d66:	609a      	str	r2, [r3, #8]
 8002d68:	e050      	b.n	8002e0c <USART_Config+0x254>

		}else if(ptrUsartHandler->USART_Config.USART_PLL_EN == PLL_ENABLE){
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	799b      	ldrb	r3, [r3, #6]
 8002d6e:	2b01      	cmp	r3, #1
 8002d70:	d105      	bne.n	8002d7e <USART_Config+0x1c6>

			//Se configura el baudrate cuando el PLL está activado a 80MHz
			//ptrUsartHandler->ptrUSARTx->BRR = 0x208D;

			//Se configura el baudrate cuando el PLL está activado a 100MHz
			ptrUsartHandler->ptrUSARTx->BRR = 0x28B1;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f642 02b1 	movw	r2, #10417	; 0x28b1
 8002d7a:	609a      	str	r2, [r3, #8]
 8002d7c:	e046      	b.n	8002e0c <USART_Config+0x254>

		}else{
			//Se configura el baudrate por defecto a 16MHz
			ptrUsartHandler->ptrUSARTx->BRR = 0x0683;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f240 6283 	movw	r2, #1667	; 0x683
 8002d86:	609a      	str	r2, [r3, #8]
 8002d88:	e040      	b.n	8002e0c <USART_Config+0x254>
		}
	}

	else if (ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_19200) {
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	795b      	ldrb	r3, [r3, #5]
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d119      	bne.n	8002dc6 <USART_Config+0x20e>
		if(ptrUsartHandler->USART_Config.USART_PLL_EN == PLL_DISABLE){
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	799b      	ldrb	r3, [r3, #6]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d105      	bne.n	8002da6 <USART_Config+0x1ee>
			// El valor a cargar es 52.0625 -> Mantiza = 52,fraction = 0.0625
			// Mantiza = 52 = 0x34, fraction = 16 * 0.0625 = 1
			// Valor a cargar 0x0341
			// Configurando el Baudrate generator para una velocidad de 19200bps

			ptrUsartHandler->ptrUSARTx->BRR = 0x0341;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f240 3241 	movw	r2, #833	; 0x341
 8002da2:	609a      	str	r2, [r3, #8]
 8002da4:	e032      	b.n	8002e0c <USART_Config+0x254>

		}else if(ptrUsartHandler->USART_Config.USART_PLL_EN == PLL_ENABLE){
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	799b      	ldrb	r3, [r3, #6]
 8002daa:	2b01      	cmp	r3, #1
 8002dac:	d105      	bne.n	8002dba <USART_Config+0x202>

			//Se configura el baudrate cuando el PLL está activado a 80MHz
			//ptrUsartHandler->ptrUSARTx->BRR = 0x1046;

			//Se configura el baudrate cuando el PLL está activado a 100MHz
			ptrUsartHandler->ptrUSARTx->BRR = 0x1458;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f241 4258 	movw	r2, #5208	; 0x1458
 8002db6:	609a      	str	r2, [r3, #8]
 8002db8:	e028      	b.n	8002e0c <USART_Config+0x254>

		}else{
			//Se configura el baudrate por defecto a 16MHz
			ptrUsartHandler->ptrUSARTx->BRR = 0x0341;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f240 3241 	movw	r2, #833	; 0x341
 8002dc2:	609a      	str	r2, [r3, #8]
 8002dc4:	e022      	b.n	8002e0c <USART_Config+0x254>
		}
	}

	else if(ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_115200){
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	795b      	ldrb	r3, [r3, #5]
 8002dca:	2b02      	cmp	r3, #2
 8002dcc:	d11e      	bne.n	8002e0c <USART_Config+0x254>
		if(ptrUsartHandler->USART_Config.USART_PLL_EN == PLL_DISABLE){
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	799b      	ldrb	r3, [r3, #6]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d104      	bne.n	8002de0 <USART_Config+0x228>
			// El valor a cargar es 8.6875 -> Mantiza = 8, fraction = 0.6875
			// Mantiza = 8 = 0x08, fraction = 16 * 0.6875 = 11 = B
			// Valor a cargar 0x08B
			// Configurando el Baudrate generator para una velocidad de 115200bps

			ptrUsartHandler->ptrUSARTx->BRR = 0x008B;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	228b      	movs	r2, #139	; 0x8b
 8002ddc:	609a      	str	r2, [r3, #8]
 8002dde:	e015      	b.n	8002e0c <USART_Config+0x254>

		}else if(ptrUsartHandler->USART_Config.USART_PLL_EN == PLL_ENABLE){
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	799b      	ldrb	r3, [r3, #6]
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d10d      	bne.n	8002e04 <USART_Config+0x24c>

			//Se configura el baudrate cuando el PLL está activado a 80MHz
			//ptrUsartHandler->ptrUSARTx->BRR = 0x02B6;

			//Se configura el baudrate cuando el PLL está activado a 100MHz
			ptrUsartHandler->ptrUSARTx->BRR = 0x0364;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f44f 7259 	mov.w	r2, #868	; 0x364
 8002df0:	609a      	str	r2, [r3, #8]
 8002df2:	e00b      	b.n	8002e0c <USART_Config+0x254>
 8002df4:	40011000 	.word	0x40011000
 8002df8:	40023800 	.word	0x40023800
 8002dfc:	40004400 	.word	0x40004400
 8002e00:	40011400 	.word	0x40011400

		}else{

			//Se configura el baudrate por defecto a 16MHz
			ptrUsartHandler->ptrUSARTx->BRR = 0x008B;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	228b      	movs	r2, #139	; 0x8b
 8002e0a:	609a      	str	r2, [r3, #8]
		}
	}

	// 2.6 Configuramos el modo: TX only, RX only, RXTX, disable
	switch(ptrUsartHandler->USART_Config.USART_mode){
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	791b      	ldrb	r3, [r3, #4]
 8002e10:	2b03      	cmp	r3, #3
 8002e12:	d847      	bhi.n	8002ea4 <USART_Config+0x2ec>
 8002e14:	a201      	add	r2, pc, #4	; (adr r2, 8002e1c <USART_Config+0x264>)
 8002e16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e1a:	bf00      	nop
 8002e1c:	08002e2d 	.word	0x08002e2d
 8002e20:	08002e3f 	.word	0x08002e3f
 8002e24:	08002e51 	.word	0x08002e51
 8002e28:	08002e73 	.word	0x08002e73
	case USART_MODE_TX:
	{
		// Activamos la parte del sistema encargada de enviar
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_TE;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	68da      	ldr	r2, [r3, #12]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f042 0208 	orr.w	r2, r2, #8
 8002e3a:	60da      	str	r2, [r3, #12]
		break;
 8002e3c:	e043      	b.n	8002ec6 <USART_Config+0x30e>
	}
	case USART_MODE_RX:
	{
		// Activamos la parte del sistema encargada de recibir
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RE;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	68da      	ldr	r2, [r3, #12]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f042 0204 	orr.w	r2, r2, #4
 8002e4c:	60da      	str	r2, [r3, #12]
		break;
 8002e4e:	e03a      	b.n	8002ec6 <USART_Config+0x30e>
	}
	case USART_MODE_RXTX:
	{
		// Activamos ambas partes, tanto transmision como recepcion
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_TE;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	68da      	ldr	r2, [r3, #12]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f042 0208 	orr.w	r2, r2, #8
 8002e5e:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RE;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	68da      	ldr	r2, [r3, #12]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f042 0204 	orr.w	r2, r2, #4
 8002e6e:	60da      	str	r2, [r3, #12]
		break;
 8002e70:	e029      	b.n	8002ec6 <USART_Config+0x30e>
	}
	case USART_MODE_DISABLE:
	{
		// Desactivamos ambos canales
		ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_TE);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	68da      	ldr	r2, [r3, #12]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f022 0208 	bic.w	r2, r2, #8
 8002e80:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_RE);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	68da      	ldr	r2, [r3, #12]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f022 0204 	bic.w	r2, r2, #4
 8002e90:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_UE);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	68da      	ldr	r2, [r3, #12]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ea0:	60da      	str	r2, [r3, #12]
		break;
 8002ea2:	e010      	b.n	8002ec6 <USART_Config+0x30e>
	}

	default:
	{
		// Actuando por defecto, desactivamos ambos canales
		ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_RE);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	68da      	ldr	r2, [r3, #12]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f022 0204 	bic.w	r2, r2, #4
 8002eb2:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_TE);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	68da      	ldr	r2, [r3, #12]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f022 0208 	bic.w	r2, r2, #8
 8002ec2:	60da      	str	r2, [r3, #12]
		break;
 8002ec4:	bf00      	nop
	}
	}

	// 2.7 Activamos el modulo serial.
	if(ptrUsartHandler->USART_Config.USART_mode != USART_MODE_DISABLE){
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	791b      	ldrb	r3, [r3, #4]
 8002eca:	2b03      	cmp	r3, #3
 8002ecc:	d00f      	beq.n	8002eee <USART_Config+0x336>
		ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_UE);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	68da      	ldr	r2, [r3, #12]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002edc:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= (USART_CR1_UE);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	68da      	ldr	r2, [r3, #12]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002eec:	60da      	str	r2, [r3, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8002eee:	b672      	cpsid	i
}
 8002ef0:	bf00      	nop

	//3.1 Desactivamos las interrupciones globales
	__disable_irq();

	//3.2 Activar las interrupciones por recepcion
	if(ptrUsartHandler->USART_Config.USART_enableIntRX == USART_RX_INTERRUP_ENABLE ){
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	7a9b      	ldrb	r3, [r3, #10]
 8002ef6:	2b01      	cmp	r3, #1
 8002ef8:	d108      	bne.n	8002f0c <USART_Config+0x354>
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RXNEIE;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	68da      	ldr	r2, [r3, #12]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f042 0220 	orr.w	r2, r2, #32
 8002f08:	60da      	str	r2, [r3, #12]
 8002f0a:	e014      	b.n	8002f36 <USART_Config+0x37e>

	}else if(ptrUsartHandler->USART_Config.USART_enableIntRX == USART_RX_INTERRUP_DISABLE){
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	7a9b      	ldrb	r3, [r3, #10]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d108      	bne.n	8002f26 <USART_Config+0x36e>
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RXNEIE;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	68da      	ldr	r2, [r3, #12]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f022 0220 	bic.w	r2, r2, #32
 8002f22:	60da      	str	r2, [r3, #12]
 8002f24:	e007      	b.n	8002f36 <USART_Config+0x37e>

	}else{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RXNEIE;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	68da      	ldr	r2, [r3, #12]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f022 0220 	bic.w	r2, r2, #32
 8002f34:	60da      	str	r2, [r3, #12]
	}

	//3.3 Activar las interrupciones por transmision
	if(ptrUsartHandler->USART_Config.USART_enableIntTX == USART_TX_INTERRUP_ENABLE ){
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	7adb      	ldrb	r3, [r3, #11]
 8002f3a:	2b01      	cmp	r3, #1
 8002f3c:	d122      	bne.n	8002f84 <USART_Config+0x3cc>
			ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TXEIE;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	68da      	ldr	r2, [r3, #12]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f4c:	60da      	str	r2, [r3, #12]
			if(ptrUsartHandler->ptrUSARTx == USART1){
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a27      	ldr	r2, [pc, #156]	; (8002ff0 <USART_Config+0x438>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d103      	bne.n	8002f60 <USART_Config+0x3a8>
				__NVIC_EnableIRQ(USART1_IRQn);
 8002f58:	2025      	movs	r0, #37	; 0x25
 8002f5a:	f7ff fe0f 	bl	8002b7c <__NVIC_EnableIRQ>
 8002f5e:	e026      	b.n	8002fae <USART_Config+0x3f6>
			}
			else if(ptrUsartHandler->ptrUSARTx == USART2){
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a23      	ldr	r2, [pc, #140]	; (8002ff4 <USART_Config+0x43c>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d103      	bne.n	8002f72 <USART_Config+0x3ba>
				__NVIC_EnableIRQ(USART2_IRQn);
 8002f6a:	2026      	movs	r0, #38	; 0x26
 8002f6c:	f7ff fe06 	bl	8002b7c <__NVIC_EnableIRQ>
 8002f70:	e01d      	b.n	8002fae <USART_Config+0x3f6>
			}
			else if(ptrUsartHandler->ptrUSARTx == USART6){
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a20      	ldr	r2, [pc, #128]	; (8002ff8 <USART_Config+0x440>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d118      	bne.n	8002fae <USART_Config+0x3f6>
				__NVIC_EnableIRQ(USART6_IRQn);
 8002f7c:	2047      	movs	r0, #71	; 0x47
 8002f7e:	f7ff fdfd 	bl	8002b7c <__NVIC_EnableIRQ>
 8002f82:	e014      	b.n	8002fae <USART_Config+0x3f6>
			}

		}else if(ptrUsartHandler->USART_Config.USART_enableIntTX == USART_TX_INTERRUP_DISABLE){
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	7adb      	ldrb	r3, [r3, #11]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d108      	bne.n	8002f9e <USART_Config+0x3e6>
			ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TXEIE;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	68da      	ldr	r2, [r3, #12]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f9a:	60da      	str	r2, [r3, #12]
 8002f9c:	e007      	b.n	8002fae <USART_Config+0x3f6>

		}else{
			ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TXEIE;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	68da      	ldr	r2, [r3, #12]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002fac:	60da      	str	r2, [r3, #12]
		}

	//3.4 Matricular las interrupciones en NVIC
	//USART1
	if(ptrUsartHandler->ptrUSARTx == USART1){
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a0f      	ldr	r2, [pc, #60]	; (8002ff0 <USART_Config+0x438>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d103      	bne.n	8002fc0 <USART_Config+0x408>
		NVIC_EnableIRQ(USART1_IRQn);
 8002fb8:	2025      	movs	r0, #37	; 0x25
 8002fba:	f7ff fddf 	bl	8002b7c <__NVIC_EnableIRQ>
 8002fbe:	e010      	b.n	8002fe2 <USART_Config+0x42a>

	//USART2
	}else if(ptrUsartHandler->ptrUSARTx == USART2){
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a0b      	ldr	r2, [pc, #44]	; (8002ff4 <USART_Config+0x43c>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d103      	bne.n	8002fd2 <USART_Config+0x41a>
		NVIC_EnableIRQ(USART2_IRQn);
 8002fca:	2026      	movs	r0, #38	; 0x26
 8002fcc:	f7ff fdd6 	bl	8002b7c <__NVIC_EnableIRQ>
 8002fd0:	e007      	b.n	8002fe2 <USART_Config+0x42a>

	//USART6
	}else if(ptrUsartHandler->ptrUSARTx == USART6){
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a08      	ldr	r2, [pc, #32]	; (8002ff8 <USART_Config+0x440>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d102      	bne.n	8002fe2 <USART_Config+0x42a>
		NVIC_EnableIRQ(USART6_IRQn);
 8002fdc:	2047      	movs	r0, #71	; 0x47
 8002fde:	f7ff fdcd 	bl	8002b7c <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8002fe2:	b662      	cpsie	i
}
 8002fe4:	bf00      	nop
	}


	//3.5 Activar las interrupciones globales
	__enable_irq();
}
 8002fe6:	bf00      	nop
 8002fe8:	3708      	adds	r7, #8
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}
 8002fee:	bf00      	nop
 8002ff0:	40011000 	.word	0x40011000
 8002ff4:	40004400 	.word	0x40004400
 8002ff8:	40011400 	.word	0x40011400

08002ffc <writeChar>:

/* Funcion para escribir un solo char */
int writeChar(USART_Handler_t *ptrUsartHandler, char dataToSend){
 8002ffc:	b480      	push	{r7}
 8002ffe:	b083      	sub	sp, #12
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
 8003004:	460b      	mov	r3, r1
 8003006:	70fb      	strb	r3, [r7, #3]
	while( !(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE)){
 8003008:	e000      	b.n	800300c <writeChar+0x10>
		__NOP();
 800300a:	bf00      	nop
	while( !(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE)){
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003016:	2b00      	cmp	r3, #0
 8003018:	d0f7      	beq.n	800300a <writeChar+0xe>
	}

	ptrUsartHandler->ptrUSARTx->DR = dataToSend;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	78fa      	ldrb	r2, [r7, #3]
 8003020:	605a      	str	r2, [r3, #4]

	auxFun = 0;
 8003022:	4b05      	ldr	r3, [pc, #20]	; (8003038 <writeChar+0x3c>)
 8003024:	2200      	movs	r2, #0
 8003026:	701a      	strb	r2, [r3, #0]
	return dataToSend;
 8003028:	78fb      	ldrb	r3, [r7, #3]
}
 800302a:	4618      	mov	r0, r3
 800302c:	370c      	adds	r7, #12
 800302e:	46bd      	mov	sp, r7
 8003030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003034:	4770      	bx	lr
 8003036:	bf00      	nop
 8003038:	20000681 	.word	0x20000681

0800303c <writeMsg>:
	return dataToReceive;

}

/* Función para escribir un mensaje */
void writeMsg(USART_Handler_t *ptrUsartHandler, char *msgToSend){
 800303c:	b580      	push	{r7, lr}
 800303e:	b082      	sub	sp, #8
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
 8003044:	6039      	str	r1, [r7, #0]
	while(*msgToSend != '\0'){
 8003046:	e008      	b.n	800305a <writeMsg+0x1e>
		writeChar(ptrUsartHandler, *msgToSend);
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	781b      	ldrb	r3, [r3, #0]
 800304c:	4619      	mov	r1, r3
 800304e:	6878      	ldr	r0, [r7, #4]
 8003050:	f7ff ffd4 	bl	8002ffc <writeChar>
		msgToSend++;
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	3301      	adds	r3, #1
 8003058:	603b      	str	r3, [r7, #0]
	while(*msgToSend != '\0'){
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	781b      	ldrb	r3, [r3, #0]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d1f2      	bne.n	8003048 <writeMsg+0xc>
	}
}
 8003062:	bf00      	nop
 8003064:	bf00      	nop
 8003066:	3708      	adds	r7, #8
 8003068:	46bd      	mov	sp, r7
 800306a:	bd80      	pop	{r7, pc}

0800306c <getRxData>:

//Lectura del caracter que llega por la interfase serial
uint8_t getRxData(void){
 800306c:	b480      	push	{r7}
 800306e:	af00      	add	r7, sp, #0
	return auxRxData;
 8003070:	4b03      	ldr	r3, [pc, #12]	; (8003080 <getRxData+0x14>)
 8003072:	781b      	ldrb	r3, [r3, #0]
}
 8003074:	4618      	mov	r0, r3
 8003076:	46bd      	mov	sp, r7
 8003078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307c:	4770      	bx	lr
 800307e:	bf00      	nop
 8003080:	20000680 	.word	0x20000680

08003084 <writeMsgTX>:

	auxFun = 0;
	return dataToSend;
}

void writeMsgTX(USART_Handler_t *ptrUsartHandler, char *msgToSend){
 8003084:	b580      	push	{r7, lr}
 8003086:	b082      	sub	sp, #8
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
 800308c:	6039      	str	r1, [r7, #0]

	//Valor de la variable global
	strncpy(auxArray, msgToSend, 100);
 800308e:	2264      	movs	r2, #100	; 0x64
 8003090:	6839      	ldr	r1, [r7, #0]
 8003092:	480e      	ldr	r0, [pc, #56]	; (80030cc <writeMsgTX+0x48>)
 8003094:	f001 f8c5 	bl	8004222 <strncpy>
	dataTx = strlen(msgToSend);
 8003098:	6838      	ldr	r0, [r7, #0]
 800309a:	f7fd f8ab 	bl	80001f4 <strlen>
 800309e:	4603      	mov	r3, r0
 80030a0:	b29a      	uxth	r2, r3
 80030a2:	4b0b      	ldr	r3, [pc, #44]	; (80030d0 <writeMsgTX+0x4c>)
 80030a4:	801a      	strh	r2, [r3, #0]
	counterTx = 0;
 80030a6:	4b0b      	ldr	r3, [pc, #44]	; (80030d4 <writeMsgTX+0x50>)
 80030a8:	2200      	movs	r2, #0
 80030aa:	801a      	strh	r2, [r3, #0]

	//Activar las interrupciones por transmisión
	ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_TXEIE;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	68da      	ldr	r2, [r3, #12]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80030ba:	60da      	str	r2, [r3, #12]

	auxFun = 1;
 80030bc:	4b06      	ldr	r3, [pc, #24]	; (80030d8 <writeMsgTX+0x54>)
 80030be:	2201      	movs	r2, #1
 80030c0:	701a      	strb	r2, [r3, #0]
}
 80030c2:	bf00      	nop
 80030c4:	3708      	adds	r7, #8
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}
 80030ca:	bf00      	nop
 80030cc:	20000684 	.word	0x20000684
 80030d0:	200006ea 	.word	0x200006ea
 80030d4:	200006e8 	.word	0x200006e8
 80030d8:	20000681 	.word	0x20000681

080030dc <USART1_IRQHandler>:

void USART1_IRQHandler(void){
 80030dc:	b580      	push	{r7, lr}
 80030de:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se dio es por RX
	if(USART1->SR & USART_SR_RXNE){
 80030e0:	4b2f      	ldr	r3, [pc, #188]	; (80031a0 <USART1_IRQHandler+0xc4>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f003 0320 	and.w	r3, r3, #32
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d007      	beq.n	80030fc <USART1_IRQHandler+0x20>
		auxRxData = (uint8_t) USART1->DR;
 80030ec:	4b2c      	ldr	r3, [pc, #176]	; (80031a0 <USART1_IRQHandler+0xc4>)
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	b2da      	uxtb	r2, r3
 80030f2:	4b2c      	ldr	r3, [pc, #176]	; (80031a4 <USART1_IRQHandler+0xc8>)
 80030f4:	701a      	strb	r2, [r3, #0]
		usart1Rx_Callback();
 80030f6:	f7fe fe87 	bl	8001e08 <usart1Rx_Callback>
				//Bajar la bandera de la interrupción
				USART1->CR1 &= ~(USART_CR1_TXEIE);
			}
		}
	}
}
 80030fa:	e04e      	b.n	800319a <USART1_IRQHandler+0xbe>
	else if(USART1->SR & USART_SR_TXE){
 80030fc:	4b28      	ldr	r3, [pc, #160]	; (80031a0 <USART1_IRQHandler+0xc4>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003104:	2b00      	cmp	r3, #0
 8003106:	d048      	beq.n	800319a <USART1_IRQHandler+0xbe>
		if(auxFun == 0){
 8003108:	4b27      	ldr	r3, [pc, #156]	; (80031a8 <USART1_IRQHandler+0xcc>)
 800310a:	781b      	ldrb	r3, [r3, #0]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d10a      	bne.n	8003126 <USART1_IRQHandler+0x4a>
			USART1->DR = dataTxSend;
 8003110:	4b26      	ldr	r3, [pc, #152]	; (80031ac <USART1_IRQHandler+0xd0>)
 8003112:	781a      	ldrb	r2, [r3, #0]
 8003114:	4b22      	ldr	r3, [pc, #136]	; (80031a0 <USART1_IRQHandler+0xc4>)
 8003116:	605a      	str	r2, [r3, #4]
			USART1->CR1 &= ~(USART_CR1_TXEIE);
 8003118:	4b21      	ldr	r3, [pc, #132]	; (80031a0 <USART1_IRQHandler+0xc4>)
 800311a:	68db      	ldr	r3, [r3, #12]
 800311c:	4a20      	ldr	r2, [pc, #128]	; (80031a0 <USART1_IRQHandler+0xc4>)
 800311e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003122:	60d3      	str	r3, [r2, #12]
}
 8003124:	e039      	b.n	800319a <USART1_IRQHandler+0xbe>
		else if(auxFun == 1){
 8003126:	4b20      	ldr	r3, [pc, #128]	; (80031a8 <USART1_IRQHandler+0xcc>)
 8003128:	781b      	ldrb	r3, [r3, #0]
 800312a:	2b01      	cmp	r3, #1
 800312c:	d135      	bne.n	800319a <USART1_IRQHandler+0xbe>
			if (auxArray[counterTx] != '\0'){
 800312e:	4b20      	ldr	r3, [pc, #128]	; (80031b0 <USART1_IRQHandler+0xd4>)
 8003130:	881b      	ldrh	r3, [r3, #0]
 8003132:	b29b      	uxth	r3, r3
 8003134:	461a      	mov	r2, r3
 8003136:	4b1f      	ldr	r3, [pc, #124]	; (80031b4 <USART1_IRQHandler+0xd8>)
 8003138:	5c9b      	ldrb	r3, [r3, r2]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d01f      	beq.n	800317e <USART1_IRQHandler+0xa2>
				if(counterTx < dataTx){
 800313e:	4b1c      	ldr	r3, [pc, #112]	; (80031b0 <USART1_IRQHandler+0xd4>)
 8003140:	881b      	ldrh	r3, [r3, #0]
 8003142:	b29a      	uxth	r2, r3
 8003144:	4b1c      	ldr	r3, [pc, #112]	; (80031b8 <USART1_IRQHandler+0xdc>)
 8003146:	881b      	ldrh	r3, [r3, #0]
 8003148:	b29b      	uxth	r3, r3
 800314a:	429a      	cmp	r2, r3
 800314c:	d225      	bcs.n	800319a <USART1_IRQHandler+0xbe>
					USART1->DR = auxArray[counterTx];
 800314e:	4b18      	ldr	r3, [pc, #96]	; (80031b0 <USART1_IRQHandler+0xd4>)
 8003150:	881b      	ldrh	r3, [r3, #0]
 8003152:	b29b      	uxth	r3, r3
 8003154:	461a      	mov	r2, r3
 8003156:	4b17      	ldr	r3, [pc, #92]	; (80031b4 <USART1_IRQHandler+0xd8>)
 8003158:	5c9a      	ldrb	r2, [r3, r2]
 800315a:	4b11      	ldr	r3, [pc, #68]	; (80031a0 <USART1_IRQHandler+0xc4>)
 800315c:	605a      	str	r2, [r3, #4]
					while(!(USART1->SR & USART_SR_TC)){
 800315e:	e000      	b.n	8003162 <USART1_IRQHandler+0x86>
						__NOP();
 8003160:	bf00      	nop
					while(!(USART1->SR & USART_SR_TC)){
 8003162:	4b0f      	ldr	r3, [pc, #60]	; (80031a0 <USART1_IRQHandler+0xc4>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800316a:	2b00      	cmp	r3, #0
 800316c:	d0f8      	beq.n	8003160 <USART1_IRQHandler+0x84>
					counterTx++;
 800316e:	4b10      	ldr	r3, [pc, #64]	; (80031b0 <USART1_IRQHandler+0xd4>)
 8003170:	881b      	ldrh	r3, [r3, #0]
 8003172:	b29b      	uxth	r3, r3
 8003174:	3301      	adds	r3, #1
 8003176:	b29a      	uxth	r2, r3
 8003178:	4b0d      	ldr	r3, [pc, #52]	; (80031b0 <USART1_IRQHandler+0xd4>)
 800317a:	801a      	strh	r2, [r3, #0]
}
 800317c:	e00d      	b.n	800319a <USART1_IRQHandler+0xbe>
			else if(auxArray[counterTx] == '\0'){
 800317e:	4b0c      	ldr	r3, [pc, #48]	; (80031b0 <USART1_IRQHandler+0xd4>)
 8003180:	881b      	ldrh	r3, [r3, #0]
 8003182:	b29b      	uxth	r3, r3
 8003184:	461a      	mov	r2, r3
 8003186:	4b0b      	ldr	r3, [pc, #44]	; (80031b4 <USART1_IRQHandler+0xd8>)
 8003188:	5c9b      	ldrb	r3, [r3, r2]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d105      	bne.n	800319a <USART1_IRQHandler+0xbe>
				USART1->CR1 &= ~(USART_CR1_TXEIE);
 800318e:	4b04      	ldr	r3, [pc, #16]	; (80031a0 <USART1_IRQHandler+0xc4>)
 8003190:	68db      	ldr	r3, [r3, #12]
 8003192:	4a03      	ldr	r2, [pc, #12]	; (80031a0 <USART1_IRQHandler+0xc4>)
 8003194:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003198:	60d3      	str	r3, [r2, #12]
}
 800319a:	bf00      	nop
 800319c:	bd80      	pop	{r7, pc}
 800319e:	bf00      	nop
 80031a0:	40011000 	.word	0x40011000
 80031a4:	20000680 	.word	0x20000680
 80031a8:	20000681 	.word	0x20000681
 80031ac:	20000682 	.word	0x20000682
 80031b0:	200006e8 	.word	0x200006e8
 80031b4:	20000684 	.word	0x20000684
 80031b8:	200006ea 	.word	0x200006ea

080031bc <USART2_IRQHandler>:

void USART2_IRQHandler(void){
 80031bc:	b580      	push	{r7, lr}
 80031be:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se dio es por RX
	if(USART2->SR & USART_SR_RXNE){
 80031c0:	4b2f      	ldr	r3, [pc, #188]	; (8003280 <USART2_IRQHandler+0xc4>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f003 0320 	and.w	r3, r3, #32
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d007      	beq.n	80031dc <USART2_IRQHandler+0x20>
		auxRxData = (uint8_t) USART2->DR;
 80031cc:	4b2c      	ldr	r3, [pc, #176]	; (8003280 <USART2_IRQHandler+0xc4>)
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	b2da      	uxtb	r2, r3
 80031d2:	4b2c      	ldr	r3, [pc, #176]	; (8003284 <USART2_IRQHandler+0xc8>)
 80031d4:	701a      	strb	r2, [r3, #0]
		usart2Rx_Callback();
 80031d6:	f000 f8d1 	bl	800337c <usart2Rx_Callback>
				//Bajar la bandera de la interrupción
				USART2->CR1 &= ~(USART_CR1_TXEIE);
			}
		}
	}
}
 80031da:	e04e      	b.n	800327a <USART2_IRQHandler+0xbe>
	else if(USART2->SR & USART_SR_TXE){
 80031dc:	4b28      	ldr	r3, [pc, #160]	; (8003280 <USART2_IRQHandler+0xc4>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d048      	beq.n	800327a <USART2_IRQHandler+0xbe>
		if(auxFun == 0){
 80031e8:	4b27      	ldr	r3, [pc, #156]	; (8003288 <USART2_IRQHandler+0xcc>)
 80031ea:	781b      	ldrb	r3, [r3, #0]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d10a      	bne.n	8003206 <USART2_IRQHandler+0x4a>
			USART2->DR = dataTxSend;
 80031f0:	4b26      	ldr	r3, [pc, #152]	; (800328c <USART2_IRQHandler+0xd0>)
 80031f2:	781a      	ldrb	r2, [r3, #0]
 80031f4:	4b22      	ldr	r3, [pc, #136]	; (8003280 <USART2_IRQHandler+0xc4>)
 80031f6:	605a      	str	r2, [r3, #4]
			USART2->CR1 &= ~(USART_CR1_TXEIE);
 80031f8:	4b21      	ldr	r3, [pc, #132]	; (8003280 <USART2_IRQHandler+0xc4>)
 80031fa:	68db      	ldr	r3, [r3, #12]
 80031fc:	4a20      	ldr	r2, [pc, #128]	; (8003280 <USART2_IRQHandler+0xc4>)
 80031fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003202:	60d3      	str	r3, [r2, #12]
}
 8003204:	e039      	b.n	800327a <USART2_IRQHandler+0xbe>
		else if(auxFun == 1){
 8003206:	4b20      	ldr	r3, [pc, #128]	; (8003288 <USART2_IRQHandler+0xcc>)
 8003208:	781b      	ldrb	r3, [r3, #0]
 800320a:	2b01      	cmp	r3, #1
 800320c:	d135      	bne.n	800327a <USART2_IRQHandler+0xbe>
			if (auxArray[counterTx] != '\0'){
 800320e:	4b20      	ldr	r3, [pc, #128]	; (8003290 <USART2_IRQHandler+0xd4>)
 8003210:	881b      	ldrh	r3, [r3, #0]
 8003212:	b29b      	uxth	r3, r3
 8003214:	461a      	mov	r2, r3
 8003216:	4b1f      	ldr	r3, [pc, #124]	; (8003294 <USART2_IRQHandler+0xd8>)
 8003218:	5c9b      	ldrb	r3, [r3, r2]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d01f      	beq.n	800325e <USART2_IRQHandler+0xa2>
				if(counterTx < dataTx){
 800321e:	4b1c      	ldr	r3, [pc, #112]	; (8003290 <USART2_IRQHandler+0xd4>)
 8003220:	881b      	ldrh	r3, [r3, #0]
 8003222:	b29a      	uxth	r2, r3
 8003224:	4b1c      	ldr	r3, [pc, #112]	; (8003298 <USART2_IRQHandler+0xdc>)
 8003226:	881b      	ldrh	r3, [r3, #0]
 8003228:	b29b      	uxth	r3, r3
 800322a:	429a      	cmp	r2, r3
 800322c:	d225      	bcs.n	800327a <USART2_IRQHandler+0xbe>
					USART2->DR = auxArray[counterTx];
 800322e:	4b18      	ldr	r3, [pc, #96]	; (8003290 <USART2_IRQHandler+0xd4>)
 8003230:	881b      	ldrh	r3, [r3, #0]
 8003232:	b29b      	uxth	r3, r3
 8003234:	461a      	mov	r2, r3
 8003236:	4b17      	ldr	r3, [pc, #92]	; (8003294 <USART2_IRQHandler+0xd8>)
 8003238:	5c9a      	ldrb	r2, [r3, r2]
 800323a:	4b11      	ldr	r3, [pc, #68]	; (8003280 <USART2_IRQHandler+0xc4>)
 800323c:	605a      	str	r2, [r3, #4]
					while(!(USART2->SR & USART_SR_TC)){
 800323e:	e000      	b.n	8003242 <USART2_IRQHandler+0x86>
						__NOP();
 8003240:	bf00      	nop
					while(!(USART2->SR & USART_SR_TC)){
 8003242:	4b0f      	ldr	r3, [pc, #60]	; (8003280 <USART2_IRQHandler+0xc4>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800324a:	2b00      	cmp	r3, #0
 800324c:	d0f8      	beq.n	8003240 <USART2_IRQHandler+0x84>
					counterTx++;
 800324e:	4b10      	ldr	r3, [pc, #64]	; (8003290 <USART2_IRQHandler+0xd4>)
 8003250:	881b      	ldrh	r3, [r3, #0]
 8003252:	b29b      	uxth	r3, r3
 8003254:	3301      	adds	r3, #1
 8003256:	b29a      	uxth	r2, r3
 8003258:	4b0d      	ldr	r3, [pc, #52]	; (8003290 <USART2_IRQHandler+0xd4>)
 800325a:	801a      	strh	r2, [r3, #0]
}
 800325c:	e00d      	b.n	800327a <USART2_IRQHandler+0xbe>
			else if(auxArray[counterTx] == '\0'){
 800325e:	4b0c      	ldr	r3, [pc, #48]	; (8003290 <USART2_IRQHandler+0xd4>)
 8003260:	881b      	ldrh	r3, [r3, #0]
 8003262:	b29b      	uxth	r3, r3
 8003264:	461a      	mov	r2, r3
 8003266:	4b0b      	ldr	r3, [pc, #44]	; (8003294 <USART2_IRQHandler+0xd8>)
 8003268:	5c9b      	ldrb	r3, [r3, r2]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d105      	bne.n	800327a <USART2_IRQHandler+0xbe>
				USART2->CR1 &= ~(USART_CR1_TXEIE);
 800326e:	4b04      	ldr	r3, [pc, #16]	; (8003280 <USART2_IRQHandler+0xc4>)
 8003270:	68db      	ldr	r3, [r3, #12]
 8003272:	4a03      	ldr	r2, [pc, #12]	; (8003280 <USART2_IRQHandler+0xc4>)
 8003274:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003278:	60d3      	str	r3, [r2, #12]
}
 800327a:	bf00      	nop
 800327c:	bd80      	pop	{r7, pc}
 800327e:	bf00      	nop
 8003280:	40004400 	.word	0x40004400
 8003284:	20000680 	.word	0x20000680
 8003288:	20000681 	.word	0x20000681
 800328c:	20000682 	.word	0x20000682
 8003290:	200006e8 	.word	0x200006e8
 8003294:	20000684 	.word	0x20000684
 8003298:	200006ea 	.word	0x200006ea

0800329c <USART6_IRQHandler>:

void USART6_IRQHandler(void){
 800329c:	b580      	push	{r7, lr}
 800329e:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se dio es por RX
	if(USART6->SR & USART_SR_RXNE){
 80032a0:	4b2f      	ldr	r3, [pc, #188]	; (8003360 <USART6_IRQHandler+0xc4>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f003 0320 	and.w	r3, r3, #32
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d007      	beq.n	80032bc <USART6_IRQHandler+0x20>
		auxRxData = (uint8_t) USART6->DR;
 80032ac:	4b2c      	ldr	r3, [pc, #176]	; (8003360 <USART6_IRQHandler+0xc4>)
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	b2da      	uxtb	r2, r3
 80032b2:	4b2c      	ldr	r3, [pc, #176]	; (8003364 <USART6_IRQHandler+0xc8>)
 80032b4:	701a      	strb	r2, [r3, #0]
		usart6Rx_Callback();
 80032b6:	f000 f869 	bl	800338c <usart6Rx_Callback>
				//Bajar la bandera de la interrupción
				USART6->CR1 &= ~(USART_CR1_TXEIE);
			}
		}
	}
}
 80032ba:	e04e      	b.n	800335a <USART6_IRQHandler+0xbe>
	else if(USART6->SR & USART_SR_TXE){
 80032bc:	4b28      	ldr	r3, [pc, #160]	; (8003360 <USART6_IRQHandler+0xc4>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d048      	beq.n	800335a <USART6_IRQHandler+0xbe>
		if(auxFun == 0){
 80032c8:	4b27      	ldr	r3, [pc, #156]	; (8003368 <USART6_IRQHandler+0xcc>)
 80032ca:	781b      	ldrb	r3, [r3, #0]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d10a      	bne.n	80032e6 <USART6_IRQHandler+0x4a>
			USART6->DR = dataTxSend;
 80032d0:	4b26      	ldr	r3, [pc, #152]	; (800336c <USART6_IRQHandler+0xd0>)
 80032d2:	781a      	ldrb	r2, [r3, #0]
 80032d4:	4b22      	ldr	r3, [pc, #136]	; (8003360 <USART6_IRQHandler+0xc4>)
 80032d6:	605a      	str	r2, [r3, #4]
			USART6->CR1 &= ~(USART_CR1_TXEIE);
 80032d8:	4b21      	ldr	r3, [pc, #132]	; (8003360 <USART6_IRQHandler+0xc4>)
 80032da:	68db      	ldr	r3, [r3, #12]
 80032dc:	4a20      	ldr	r2, [pc, #128]	; (8003360 <USART6_IRQHandler+0xc4>)
 80032de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80032e2:	60d3      	str	r3, [r2, #12]
}
 80032e4:	e039      	b.n	800335a <USART6_IRQHandler+0xbe>
		else if(auxFun == 1){
 80032e6:	4b20      	ldr	r3, [pc, #128]	; (8003368 <USART6_IRQHandler+0xcc>)
 80032e8:	781b      	ldrb	r3, [r3, #0]
 80032ea:	2b01      	cmp	r3, #1
 80032ec:	d135      	bne.n	800335a <USART6_IRQHandler+0xbe>
			if (auxArray[counterTx] != '\0'){
 80032ee:	4b20      	ldr	r3, [pc, #128]	; (8003370 <USART6_IRQHandler+0xd4>)
 80032f0:	881b      	ldrh	r3, [r3, #0]
 80032f2:	b29b      	uxth	r3, r3
 80032f4:	461a      	mov	r2, r3
 80032f6:	4b1f      	ldr	r3, [pc, #124]	; (8003374 <USART6_IRQHandler+0xd8>)
 80032f8:	5c9b      	ldrb	r3, [r3, r2]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d01f      	beq.n	800333e <USART6_IRQHandler+0xa2>
				if(counterTx < dataTx){
 80032fe:	4b1c      	ldr	r3, [pc, #112]	; (8003370 <USART6_IRQHandler+0xd4>)
 8003300:	881b      	ldrh	r3, [r3, #0]
 8003302:	b29a      	uxth	r2, r3
 8003304:	4b1c      	ldr	r3, [pc, #112]	; (8003378 <USART6_IRQHandler+0xdc>)
 8003306:	881b      	ldrh	r3, [r3, #0]
 8003308:	b29b      	uxth	r3, r3
 800330a:	429a      	cmp	r2, r3
 800330c:	d225      	bcs.n	800335a <USART6_IRQHandler+0xbe>
					USART6->DR = auxArray[counterTx];
 800330e:	4b18      	ldr	r3, [pc, #96]	; (8003370 <USART6_IRQHandler+0xd4>)
 8003310:	881b      	ldrh	r3, [r3, #0]
 8003312:	b29b      	uxth	r3, r3
 8003314:	461a      	mov	r2, r3
 8003316:	4b17      	ldr	r3, [pc, #92]	; (8003374 <USART6_IRQHandler+0xd8>)
 8003318:	5c9a      	ldrb	r2, [r3, r2]
 800331a:	4b11      	ldr	r3, [pc, #68]	; (8003360 <USART6_IRQHandler+0xc4>)
 800331c:	605a      	str	r2, [r3, #4]
					while(!(USART6->SR & USART_SR_TC)){
 800331e:	e000      	b.n	8003322 <USART6_IRQHandler+0x86>
						__NOP();
 8003320:	bf00      	nop
					while(!(USART6->SR & USART_SR_TC)){
 8003322:	4b0f      	ldr	r3, [pc, #60]	; (8003360 <USART6_IRQHandler+0xc4>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800332a:	2b00      	cmp	r3, #0
 800332c:	d0f8      	beq.n	8003320 <USART6_IRQHandler+0x84>
					counterTx++;
 800332e:	4b10      	ldr	r3, [pc, #64]	; (8003370 <USART6_IRQHandler+0xd4>)
 8003330:	881b      	ldrh	r3, [r3, #0]
 8003332:	b29b      	uxth	r3, r3
 8003334:	3301      	adds	r3, #1
 8003336:	b29a      	uxth	r2, r3
 8003338:	4b0d      	ldr	r3, [pc, #52]	; (8003370 <USART6_IRQHandler+0xd4>)
 800333a:	801a      	strh	r2, [r3, #0]
}
 800333c:	e00d      	b.n	800335a <USART6_IRQHandler+0xbe>
			else if(auxArray[counterTx] == '\0'){
 800333e:	4b0c      	ldr	r3, [pc, #48]	; (8003370 <USART6_IRQHandler+0xd4>)
 8003340:	881b      	ldrh	r3, [r3, #0]
 8003342:	b29b      	uxth	r3, r3
 8003344:	461a      	mov	r2, r3
 8003346:	4b0b      	ldr	r3, [pc, #44]	; (8003374 <USART6_IRQHandler+0xd8>)
 8003348:	5c9b      	ldrb	r3, [r3, r2]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d105      	bne.n	800335a <USART6_IRQHandler+0xbe>
				USART6->CR1 &= ~(USART_CR1_TXEIE);
 800334e:	4b04      	ldr	r3, [pc, #16]	; (8003360 <USART6_IRQHandler+0xc4>)
 8003350:	68db      	ldr	r3, [r3, #12]
 8003352:	4a03      	ldr	r2, [pc, #12]	; (8003360 <USART6_IRQHandler+0xc4>)
 8003354:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003358:	60d3      	str	r3, [r2, #12]
}
 800335a:	bf00      	nop
 800335c:	bd80      	pop	{r7, pc}
 800335e:	bf00      	nop
 8003360:	40011400 	.word	0x40011400
 8003364:	20000680 	.word	0x20000680
 8003368:	20000681 	.word	0x20000681
 800336c:	20000682 	.word	0x20000682
 8003370:	200006e8 	.word	0x200006e8
 8003374:	20000684 	.word	0x20000684
 8003378:	200006ea 	.word	0x200006ea

0800337c <usart2Rx_Callback>:
__attribute__((weak)) void usart1Rx_Callback(void){

	__NOP();
}

__attribute__((weak)) void usart2Rx_Callback(void){
 800337c:	b480      	push	{r7}
 800337e:	af00      	add	r7, sp, #0

	__NOP();
 8003380:	bf00      	nop
}
 8003382:	bf00      	nop
 8003384:	46bd      	mov	sp, r7
 8003386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338a:	4770      	bx	lr

0800338c <usart6Rx_Callback>:

__attribute__((weak)) void usart6Rx_Callback(void){
 800338c:	b480      	push	{r7}
 800338e:	af00      	add	r7, sp, #0

	__NOP();
 8003390:	bf00      	nop
}
 8003392:	bf00      	nop
 8003394:	46bd      	mov	sp, r7
 8003396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339a:	4770      	bx	lr

0800339c <__errno>:
 800339c:	4b01      	ldr	r3, [pc, #4]	; (80033a4 <__errno+0x8>)
 800339e:	6818      	ldr	r0, [r3, #0]
 80033a0:	4770      	bx	lr
 80033a2:	bf00      	nop
 80033a4:	2000001c 	.word	0x2000001c

080033a8 <__libc_init_array>:
 80033a8:	b570      	push	{r4, r5, r6, lr}
 80033aa:	4d0d      	ldr	r5, [pc, #52]	; (80033e0 <__libc_init_array+0x38>)
 80033ac:	4c0d      	ldr	r4, [pc, #52]	; (80033e4 <__libc_init_array+0x3c>)
 80033ae:	1b64      	subs	r4, r4, r5
 80033b0:	10a4      	asrs	r4, r4, #2
 80033b2:	2600      	movs	r6, #0
 80033b4:	42a6      	cmp	r6, r4
 80033b6:	d109      	bne.n	80033cc <__libc_init_array+0x24>
 80033b8:	4d0b      	ldr	r5, [pc, #44]	; (80033e8 <__libc_init_array+0x40>)
 80033ba:	4c0c      	ldr	r4, [pc, #48]	; (80033ec <__libc_init_array+0x44>)
 80033bc:	f005 f8da 	bl	8008574 <_init>
 80033c0:	1b64      	subs	r4, r4, r5
 80033c2:	10a4      	asrs	r4, r4, #2
 80033c4:	2600      	movs	r6, #0
 80033c6:	42a6      	cmp	r6, r4
 80033c8:	d105      	bne.n	80033d6 <__libc_init_array+0x2e>
 80033ca:	bd70      	pop	{r4, r5, r6, pc}
 80033cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80033d0:	4798      	blx	r3
 80033d2:	3601      	adds	r6, #1
 80033d4:	e7ee      	b.n	80033b4 <__libc_init_array+0xc>
 80033d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80033da:	4798      	blx	r3
 80033dc:	3601      	adds	r6, #1
 80033de:	e7f2      	b.n	80033c6 <__libc_init_array+0x1e>
 80033e0:	08008f24 	.word	0x08008f24
 80033e4:	08008f24 	.word	0x08008f24
 80033e8:	08008f24 	.word	0x08008f24
 80033ec:	08008f28 	.word	0x08008f28

080033f0 <memset>:
 80033f0:	4402      	add	r2, r0
 80033f2:	4603      	mov	r3, r0
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d100      	bne.n	80033fa <memset+0xa>
 80033f8:	4770      	bx	lr
 80033fa:	f803 1b01 	strb.w	r1, [r3], #1
 80033fe:	e7f9      	b.n	80033f4 <memset+0x4>

08003400 <__cvt>:
 8003400:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003404:	ec55 4b10 	vmov	r4, r5, d0
 8003408:	2d00      	cmp	r5, #0
 800340a:	460e      	mov	r6, r1
 800340c:	4619      	mov	r1, r3
 800340e:	462b      	mov	r3, r5
 8003410:	bfbb      	ittet	lt
 8003412:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8003416:	461d      	movlt	r5, r3
 8003418:	2300      	movge	r3, #0
 800341a:	232d      	movlt	r3, #45	; 0x2d
 800341c:	700b      	strb	r3, [r1, #0]
 800341e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003420:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8003424:	4691      	mov	r9, r2
 8003426:	f023 0820 	bic.w	r8, r3, #32
 800342a:	bfbc      	itt	lt
 800342c:	4622      	movlt	r2, r4
 800342e:	4614      	movlt	r4, r2
 8003430:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003434:	d005      	beq.n	8003442 <__cvt+0x42>
 8003436:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800343a:	d100      	bne.n	800343e <__cvt+0x3e>
 800343c:	3601      	adds	r6, #1
 800343e:	2102      	movs	r1, #2
 8003440:	e000      	b.n	8003444 <__cvt+0x44>
 8003442:	2103      	movs	r1, #3
 8003444:	ab03      	add	r3, sp, #12
 8003446:	9301      	str	r3, [sp, #4]
 8003448:	ab02      	add	r3, sp, #8
 800344a:	9300      	str	r3, [sp, #0]
 800344c:	ec45 4b10 	vmov	d0, r4, r5
 8003450:	4653      	mov	r3, sl
 8003452:	4632      	mov	r2, r6
 8003454:	f001 fe54 	bl	8005100 <_dtoa_r>
 8003458:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800345c:	4607      	mov	r7, r0
 800345e:	d102      	bne.n	8003466 <__cvt+0x66>
 8003460:	f019 0f01 	tst.w	r9, #1
 8003464:	d022      	beq.n	80034ac <__cvt+0xac>
 8003466:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800346a:	eb07 0906 	add.w	r9, r7, r6
 800346e:	d110      	bne.n	8003492 <__cvt+0x92>
 8003470:	783b      	ldrb	r3, [r7, #0]
 8003472:	2b30      	cmp	r3, #48	; 0x30
 8003474:	d10a      	bne.n	800348c <__cvt+0x8c>
 8003476:	2200      	movs	r2, #0
 8003478:	2300      	movs	r3, #0
 800347a:	4620      	mov	r0, r4
 800347c:	4629      	mov	r1, r5
 800347e:	f7fd fb3b 	bl	8000af8 <__aeabi_dcmpeq>
 8003482:	b918      	cbnz	r0, 800348c <__cvt+0x8c>
 8003484:	f1c6 0601 	rsb	r6, r6, #1
 8003488:	f8ca 6000 	str.w	r6, [sl]
 800348c:	f8da 3000 	ldr.w	r3, [sl]
 8003490:	4499      	add	r9, r3
 8003492:	2200      	movs	r2, #0
 8003494:	2300      	movs	r3, #0
 8003496:	4620      	mov	r0, r4
 8003498:	4629      	mov	r1, r5
 800349a:	f7fd fb2d 	bl	8000af8 <__aeabi_dcmpeq>
 800349e:	b108      	cbz	r0, 80034a4 <__cvt+0xa4>
 80034a0:	f8cd 900c 	str.w	r9, [sp, #12]
 80034a4:	2230      	movs	r2, #48	; 0x30
 80034a6:	9b03      	ldr	r3, [sp, #12]
 80034a8:	454b      	cmp	r3, r9
 80034aa:	d307      	bcc.n	80034bc <__cvt+0xbc>
 80034ac:	9b03      	ldr	r3, [sp, #12]
 80034ae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80034b0:	1bdb      	subs	r3, r3, r7
 80034b2:	4638      	mov	r0, r7
 80034b4:	6013      	str	r3, [r2, #0]
 80034b6:	b004      	add	sp, #16
 80034b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80034bc:	1c59      	adds	r1, r3, #1
 80034be:	9103      	str	r1, [sp, #12]
 80034c0:	701a      	strb	r2, [r3, #0]
 80034c2:	e7f0      	b.n	80034a6 <__cvt+0xa6>

080034c4 <__exponent>:
 80034c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80034c6:	4603      	mov	r3, r0
 80034c8:	2900      	cmp	r1, #0
 80034ca:	bfb8      	it	lt
 80034cc:	4249      	neglt	r1, r1
 80034ce:	f803 2b02 	strb.w	r2, [r3], #2
 80034d2:	bfb4      	ite	lt
 80034d4:	222d      	movlt	r2, #45	; 0x2d
 80034d6:	222b      	movge	r2, #43	; 0x2b
 80034d8:	2909      	cmp	r1, #9
 80034da:	7042      	strb	r2, [r0, #1]
 80034dc:	dd2a      	ble.n	8003534 <__exponent+0x70>
 80034de:	f10d 0407 	add.w	r4, sp, #7
 80034e2:	46a4      	mov	ip, r4
 80034e4:	270a      	movs	r7, #10
 80034e6:	46a6      	mov	lr, r4
 80034e8:	460a      	mov	r2, r1
 80034ea:	fb91 f6f7 	sdiv	r6, r1, r7
 80034ee:	fb07 1516 	mls	r5, r7, r6, r1
 80034f2:	3530      	adds	r5, #48	; 0x30
 80034f4:	2a63      	cmp	r2, #99	; 0x63
 80034f6:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80034fa:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80034fe:	4631      	mov	r1, r6
 8003500:	dcf1      	bgt.n	80034e6 <__exponent+0x22>
 8003502:	3130      	adds	r1, #48	; 0x30
 8003504:	f1ae 0502 	sub.w	r5, lr, #2
 8003508:	f804 1c01 	strb.w	r1, [r4, #-1]
 800350c:	1c44      	adds	r4, r0, #1
 800350e:	4629      	mov	r1, r5
 8003510:	4561      	cmp	r1, ip
 8003512:	d30a      	bcc.n	800352a <__exponent+0x66>
 8003514:	f10d 0209 	add.w	r2, sp, #9
 8003518:	eba2 020e 	sub.w	r2, r2, lr
 800351c:	4565      	cmp	r5, ip
 800351e:	bf88      	it	hi
 8003520:	2200      	movhi	r2, #0
 8003522:	4413      	add	r3, r2
 8003524:	1a18      	subs	r0, r3, r0
 8003526:	b003      	add	sp, #12
 8003528:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800352a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800352e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8003532:	e7ed      	b.n	8003510 <__exponent+0x4c>
 8003534:	2330      	movs	r3, #48	; 0x30
 8003536:	3130      	adds	r1, #48	; 0x30
 8003538:	7083      	strb	r3, [r0, #2]
 800353a:	70c1      	strb	r1, [r0, #3]
 800353c:	1d03      	adds	r3, r0, #4
 800353e:	e7f1      	b.n	8003524 <__exponent+0x60>

08003540 <_printf_float>:
 8003540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003544:	ed2d 8b02 	vpush	{d8}
 8003548:	b08d      	sub	sp, #52	; 0x34
 800354a:	460c      	mov	r4, r1
 800354c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8003550:	4616      	mov	r6, r2
 8003552:	461f      	mov	r7, r3
 8003554:	4605      	mov	r5, r0
 8003556:	f002 ff31 	bl	80063bc <_localeconv_r>
 800355a:	f8d0 a000 	ldr.w	sl, [r0]
 800355e:	4650      	mov	r0, sl
 8003560:	f7fc fe48 	bl	80001f4 <strlen>
 8003564:	2300      	movs	r3, #0
 8003566:	930a      	str	r3, [sp, #40]	; 0x28
 8003568:	6823      	ldr	r3, [r4, #0]
 800356a:	9305      	str	r3, [sp, #20]
 800356c:	f8d8 3000 	ldr.w	r3, [r8]
 8003570:	f894 b018 	ldrb.w	fp, [r4, #24]
 8003574:	3307      	adds	r3, #7
 8003576:	f023 0307 	bic.w	r3, r3, #7
 800357a:	f103 0208 	add.w	r2, r3, #8
 800357e:	f8c8 2000 	str.w	r2, [r8]
 8003582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003586:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800358a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800358e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003592:	9307      	str	r3, [sp, #28]
 8003594:	f8cd 8018 	str.w	r8, [sp, #24]
 8003598:	ee08 0a10 	vmov	s16, r0
 800359c:	4b9f      	ldr	r3, [pc, #636]	; (800381c <_printf_float+0x2dc>)
 800359e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80035a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80035a6:	f7fd fad9 	bl	8000b5c <__aeabi_dcmpun>
 80035aa:	bb88      	cbnz	r0, 8003610 <_printf_float+0xd0>
 80035ac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80035b0:	4b9a      	ldr	r3, [pc, #616]	; (800381c <_printf_float+0x2dc>)
 80035b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80035b6:	f7fd fab3 	bl	8000b20 <__aeabi_dcmple>
 80035ba:	bb48      	cbnz	r0, 8003610 <_printf_float+0xd0>
 80035bc:	2200      	movs	r2, #0
 80035be:	2300      	movs	r3, #0
 80035c0:	4640      	mov	r0, r8
 80035c2:	4649      	mov	r1, r9
 80035c4:	f7fd faa2 	bl	8000b0c <__aeabi_dcmplt>
 80035c8:	b110      	cbz	r0, 80035d0 <_printf_float+0x90>
 80035ca:	232d      	movs	r3, #45	; 0x2d
 80035cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80035d0:	4b93      	ldr	r3, [pc, #588]	; (8003820 <_printf_float+0x2e0>)
 80035d2:	4894      	ldr	r0, [pc, #592]	; (8003824 <_printf_float+0x2e4>)
 80035d4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80035d8:	bf94      	ite	ls
 80035da:	4698      	movls	r8, r3
 80035dc:	4680      	movhi	r8, r0
 80035de:	2303      	movs	r3, #3
 80035e0:	6123      	str	r3, [r4, #16]
 80035e2:	9b05      	ldr	r3, [sp, #20]
 80035e4:	f023 0204 	bic.w	r2, r3, #4
 80035e8:	6022      	str	r2, [r4, #0]
 80035ea:	f04f 0900 	mov.w	r9, #0
 80035ee:	9700      	str	r7, [sp, #0]
 80035f0:	4633      	mov	r3, r6
 80035f2:	aa0b      	add	r2, sp, #44	; 0x2c
 80035f4:	4621      	mov	r1, r4
 80035f6:	4628      	mov	r0, r5
 80035f8:	f000 f9d8 	bl	80039ac <_printf_common>
 80035fc:	3001      	adds	r0, #1
 80035fe:	f040 8090 	bne.w	8003722 <_printf_float+0x1e2>
 8003602:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003606:	b00d      	add	sp, #52	; 0x34
 8003608:	ecbd 8b02 	vpop	{d8}
 800360c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003610:	4642      	mov	r2, r8
 8003612:	464b      	mov	r3, r9
 8003614:	4640      	mov	r0, r8
 8003616:	4649      	mov	r1, r9
 8003618:	f7fd faa0 	bl	8000b5c <__aeabi_dcmpun>
 800361c:	b140      	cbz	r0, 8003630 <_printf_float+0xf0>
 800361e:	464b      	mov	r3, r9
 8003620:	2b00      	cmp	r3, #0
 8003622:	bfbc      	itt	lt
 8003624:	232d      	movlt	r3, #45	; 0x2d
 8003626:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800362a:	487f      	ldr	r0, [pc, #508]	; (8003828 <_printf_float+0x2e8>)
 800362c:	4b7f      	ldr	r3, [pc, #508]	; (800382c <_printf_float+0x2ec>)
 800362e:	e7d1      	b.n	80035d4 <_printf_float+0x94>
 8003630:	6863      	ldr	r3, [r4, #4]
 8003632:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8003636:	9206      	str	r2, [sp, #24]
 8003638:	1c5a      	adds	r2, r3, #1
 800363a:	d13f      	bne.n	80036bc <_printf_float+0x17c>
 800363c:	2306      	movs	r3, #6
 800363e:	6063      	str	r3, [r4, #4]
 8003640:	9b05      	ldr	r3, [sp, #20]
 8003642:	6861      	ldr	r1, [r4, #4]
 8003644:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003648:	2300      	movs	r3, #0
 800364a:	9303      	str	r3, [sp, #12]
 800364c:	ab0a      	add	r3, sp, #40	; 0x28
 800364e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8003652:	ab09      	add	r3, sp, #36	; 0x24
 8003654:	ec49 8b10 	vmov	d0, r8, r9
 8003658:	9300      	str	r3, [sp, #0]
 800365a:	6022      	str	r2, [r4, #0]
 800365c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8003660:	4628      	mov	r0, r5
 8003662:	f7ff fecd 	bl	8003400 <__cvt>
 8003666:	9b06      	ldr	r3, [sp, #24]
 8003668:	9909      	ldr	r1, [sp, #36]	; 0x24
 800366a:	2b47      	cmp	r3, #71	; 0x47
 800366c:	4680      	mov	r8, r0
 800366e:	d108      	bne.n	8003682 <_printf_float+0x142>
 8003670:	1cc8      	adds	r0, r1, #3
 8003672:	db02      	blt.n	800367a <_printf_float+0x13a>
 8003674:	6863      	ldr	r3, [r4, #4]
 8003676:	4299      	cmp	r1, r3
 8003678:	dd41      	ble.n	80036fe <_printf_float+0x1be>
 800367a:	f1ab 0b02 	sub.w	fp, fp, #2
 800367e:	fa5f fb8b 	uxtb.w	fp, fp
 8003682:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003686:	d820      	bhi.n	80036ca <_printf_float+0x18a>
 8003688:	3901      	subs	r1, #1
 800368a:	465a      	mov	r2, fp
 800368c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003690:	9109      	str	r1, [sp, #36]	; 0x24
 8003692:	f7ff ff17 	bl	80034c4 <__exponent>
 8003696:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003698:	1813      	adds	r3, r2, r0
 800369a:	2a01      	cmp	r2, #1
 800369c:	4681      	mov	r9, r0
 800369e:	6123      	str	r3, [r4, #16]
 80036a0:	dc02      	bgt.n	80036a8 <_printf_float+0x168>
 80036a2:	6822      	ldr	r2, [r4, #0]
 80036a4:	07d2      	lsls	r2, r2, #31
 80036a6:	d501      	bpl.n	80036ac <_printf_float+0x16c>
 80036a8:	3301      	adds	r3, #1
 80036aa:	6123      	str	r3, [r4, #16]
 80036ac:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d09c      	beq.n	80035ee <_printf_float+0xae>
 80036b4:	232d      	movs	r3, #45	; 0x2d
 80036b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80036ba:	e798      	b.n	80035ee <_printf_float+0xae>
 80036bc:	9a06      	ldr	r2, [sp, #24]
 80036be:	2a47      	cmp	r2, #71	; 0x47
 80036c0:	d1be      	bne.n	8003640 <_printf_float+0x100>
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d1bc      	bne.n	8003640 <_printf_float+0x100>
 80036c6:	2301      	movs	r3, #1
 80036c8:	e7b9      	b.n	800363e <_printf_float+0xfe>
 80036ca:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80036ce:	d118      	bne.n	8003702 <_printf_float+0x1c2>
 80036d0:	2900      	cmp	r1, #0
 80036d2:	6863      	ldr	r3, [r4, #4]
 80036d4:	dd0b      	ble.n	80036ee <_printf_float+0x1ae>
 80036d6:	6121      	str	r1, [r4, #16]
 80036d8:	b913      	cbnz	r3, 80036e0 <_printf_float+0x1a0>
 80036da:	6822      	ldr	r2, [r4, #0]
 80036dc:	07d0      	lsls	r0, r2, #31
 80036de:	d502      	bpl.n	80036e6 <_printf_float+0x1a6>
 80036e0:	3301      	adds	r3, #1
 80036e2:	440b      	add	r3, r1
 80036e4:	6123      	str	r3, [r4, #16]
 80036e6:	65a1      	str	r1, [r4, #88]	; 0x58
 80036e8:	f04f 0900 	mov.w	r9, #0
 80036ec:	e7de      	b.n	80036ac <_printf_float+0x16c>
 80036ee:	b913      	cbnz	r3, 80036f6 <_printf_float+0x1b6>
 80036f0:	6822      	ldr	r2, [r4, #0]
 80036f2:	07d2      	lsls	r2, r2, #31
 80036f4:	d501      	bpl.n	80036fa <_printf_float+0x1ba>
 80036f6:	3302      	adds	r3, #2
 80036f8:	e7f4      	b.n	80036e4 <_printf_float+0x1a4>
 80036fa:	2301      	movs	r3, #1
 80036fc:	e7f2      	b.n	80036e4 <_printf_float+0x1a4>
 80036fe:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8003702:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003704:	4299      	cmp	r1, r3
 8003706:	db05      	blt.n	8003714 <_printf_float+0x1d4>
 8003708:	6823      	ldr	r3, [r4, #0]
 800370a:	6121      	str	r1, [r4, #16]
 800370c:	07d8      	lsls	r0, r3, #31
 800370e:	d5ea      	bpl.n	80036e6 <_printf_float+0x1a6>
 8003710:	1c4b      	adds	r3, r1, #1
 8003712:	e7e7      	b.n	80036e4 <_printf_float+0x1a4>
 8003714:	2900      	cmp	r1, #0
 8003716:	bfd4      	ite	le
 8003718:	f1c1 0202 	rsble	r2, r1, #2
 800371c:	2201      	movgt	r2, #1
 800371e:	4413      	add	r3, r2
 8003720:	e7e0      	b.n	80036e4 <_printf_float+0x1a4>
 8003722:	6823      	ldr	r3, [r4, #0]
 8003724:	055a      	lsls	r2, r3, #21
 8003726:	d407      	bmi.n	8003738 <_printf_float+0x1f8>
 8003728:	6923      	ldr	r3, [r4, #16]
 800372a:	4642      	mov	r2, r8
 800372c:	4631      	mov	r1, r6
 800372e:	4628      	mov	r0, r5
 8003730:	47b8      	blx	r7
 8003732:	3001      	adds	r0, #1
 8003734:	d12c      	bne.n	8003790 <_printf_float+0x250>
 8003736:	e764      	b.n	8003602 <_printf_float+0xc2>
 8003738:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800373c:	f240 80e0 	bls.w	8003900 <_printf_float+0x3c0>
 8003740:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003744:	2200      	movs	r2, #0
 8003746:	2300      	movs	r3, #0
 8003748:	f7fd f9d6 	bl	8000af8 <__aeabi_dcmpeq>
 800374c:	2800      	cmp	r0, #0
 800374e:	d034      	beq.n	80037ba <_printf_float+0x27a>
 8003750:	4a37      	ldr	r2, [pc, #220]	; (8003830 <_printf_float+0x2f0>)
 8003752:	2301      	movs	r3, #1
 8003754:	4631      	mov	r1, r6
 8003756:	4628      	mov	r0, r5
 8003758:	47b8      	blx	r7
 800375a:	3001      	adds	r0, #1
 800375c:	f43f af51 	beq.w	8003602 <_printf_float+0xc2>
 8003760:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003764:	429a      	cmp	r2, r3
 8003766:	db02      	blt.n	800376e <_printf_float+0x22e>
 8003768:	6823      	ldr	r3, [r4, #0]
 800376a:	07d8      	lsls	r0, r3, #31
 800376c:	d510      	bpl.n	8003790 <_printf_float+0x250>
 800376e:	ee18 3a10 	vmov	r3, s16
 8003772:	4652      	mov	r2, sl
 8003774:	4631      	mov	r1, r6
 8003776:	4628      	mov	r0, r5
 8003778:	47b8      	blx	r7
 800377a:	3001      	adds	r0, #1
 800377c:	f43f af41 	beq.w	8003602 <_printf_float+0xc2>
 8003780:	f04f 0800 	mov.w	r8, #0
 8003784:	f104 091a 	add.w	r9, r4, #26
 8003788:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800378a:	3b01      	subs	r3, #1
 800378c:	4543      	cmp	r3, r8
 800378e:	dc09      	bgt.n	80037a4 <_printf_float+0x264>
 8003790:	6823      	ldr	r3, [r4, #0]
 8003792:	079b      	lsls	r3, r3, #30
 8003794:	f100 8105 	bmi.w	80039a2 <_printf_float+0x462>
 8003798:	68e0      	ldr	r0, [r4, #12]
 800379a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800379c:	4298      	cmp	r0, r3
 800379e:	bfb8      	it	lt
 80037a0:	4618      	movlt	r0, r3
 80037a2:	e730      	b.n	8003606 <_printf_float+0xc6>
 80037a4:	2301      	movs	r3, #1
 80037a6:	464a      	mov	r2, r9
 80037a8:	4631      	mov	r1, r6
 80037aa:	4628      	mov	r0, r5
 80037ac:	47b8      	blx	r7
 80037ae:	3001      	adds	r0, #1
 80037b0:	f43f af27 	beq.w	8003602 <_printf_float+0xc2>
 80037b4:	f108 0801 	add.w	r8, r8, #1
 80037b8:	e7e6      	b.n	8003788 <_printf_float+0x248>
 80037ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80037bc:	2b00      	cmp	r3, #0
 80037be:	dc39      	bgt.n	8003834 <_printf_float+0x2f4>
 80037c0:	4a1b      	ldr	r2, [pc, #108]	; (8003830 <_printf_float+0x2f0>)
 80037c2:	2301      	movs	r3, #1
 80037c4:	4631      	mov	r1, r6
 80037c6:	4628      	mov	r0, r5
 80037c8:	47b8      	blx	r7
 80037ca:	3001      	adds	r0, #1
 80037cc:	f43f af19 	beq.w	8003602 <_printf_float+0xc2>
 80037d0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80037d4:	4313      	orrs	r3, r2
 80037d6:	d102      	bne.n	80037de <_printf_float+0x29e>
 80037d8:	6823      	ldr	r3, [r4, #0]
 80037da:	07d9      	lsls	r1, r3, #31
 80037dc:	d5d8      	bpl.n	8003790 <_printf_float+0x250>
 80037de:	ee18 3a10 	vmov	r3, s16
 80037e2:	4652      	mov	r2, sl
 80037e4:	4631      	mov	r1, r6
 80037e6:	4628      	mov	r0, r5
 80037e8:	47b8      	blx	r7
 80037ea:	3001      	adds	r0, #1
 80037ec:	f43f af09 	beq.w	8003602 <_printf_float+0xc2>
 80037f0:	f04f 0900 	mov.w	r9, #0
 80037f4:	f104 0a1a 	add.w	sl, r4, #26
 80037f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80037fa:	425b      	negs	r3, r3
 80037fc:	454b      	cmp	r3, r9
 80037fe:	dc01      	bgt.n	8003804 <_printf_float+0x2c4>
 8003800:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003802:	e792      	b.n	800372a <_printf_float+0x1ea>
 8003804:	2301      	movs	r3, #1
 8003806:	4652      	mov	r2, sl
 8003808:	4631      	mov	r1, r6
 800380a:	4628      	mov	r0, r5
 800380c:	47b8      	blx	r7
 800380e:	3001      	adds	r0, #1
 8003810:	f43f aef7 	beq.w	8003602 <_printf_float+0xc2>
 8003814:	f109 0901 	add.w	r9, r9, #1
 8003818:	e7ee      	b.n	80037f8 <_printf_float+0x2b8>
 800381a:	bf00      	nop
 800381c:	7fefffff 	.word	0x7fefffff
 8003820:	08008a70 	.word	0x08008a70
 8003824:	08008a74 	.word	0x08008a74
 8003828:	08008a7c 	.word	0x08008a7c
 800382c:	08008a78 	.word	0x08008a78
 8003830:	08008e71 	.word	0x08008e71
 8003834:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003836:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003838:	429a      	cmp	r2, r3
 800383a:	bfa8      	it	ge
 800383c:	461a      	movge	r2, r3
 800383e:	2a00      	cmp	r2, #0
 8003840:	4691      	mov	r9, r2
 8003842:	dc37      	bgt.n	80038b4 <_printf_float+0x374>
 8003844:	f04f 0b00 	mov.w	fp, #0
 8003848:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800384c:	f104 021a 	add.w	r2, r4, #26
 8003850:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003852:	9305      	str	r3, [sp, #20]
 8003854:	eba3 0309 	sub.w	r3, r3, r9
 8003858:	455b      	cmp	r3, fp
 800385a:	dc33      	bgt.n	80038c4 <_printf_float+0x384>
 800385c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003860:	429a      	cmp	r2, r3
 8003862:	db3b      	blt.n	80038dc <_printf_float+0x39c>
 8003864:	6823      	ldr	r3, [r4, #0]
 8003866:	07da      	lsls	r2, r3, #31
 8003868:	d438      	bmi.n	80038dc <_printf_float+0x39c>
 800386a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800386c:	9a05      	ldr	r2, [sp, #20]
 800386e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003870:	1a9a      	subs	r2, r3, r2
 8003872:	eba3 0901 	sub.w	r9, r3, r1
 8003876:	4591      	cmp	r9, r2
 8003878:	bfa8      	it	ge
 800387a:	4691      	movge	r9, r2
 800387c:	f1b9 0f00 	cmp.w	r9, #0
 8003880:	dc35      	bgt.n	80038ee <_printf_float+0x3ae>
 8003882:	f04f 0800 	mov.w	r8, #0
 8003886:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800388a:	f104 0a1a 	add.w	sl, r4, #26
 800388e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003892:	1a9b      	subs	r3, r3, r2
 8003894:	eba3 0309 	sub.w	r3, r3, r9
 8003898:	4543      	cmp	r3, r8
 800389a:	f77f af79 	ble.w	8003790 <_printf_float+0x250>
 800389e:	2301      	movs	r3, #1
 80038a0:	4652      	mov	r2, sl
 80038a2:	4631      	mov	r1, r6
 80038a4:	4628      	mov	r0, r5
 80038a6:	47b8      	blx	r7
 80038a8:	3001      	adds	r0, #1
 80038aa:	f43f aeaa 	beq.w	8003602 <_printf_float+0xc2>
 80038ae:	f108 0801 	add.w	r8, r8, #1
 80038b2:	e7ec      	b.n	800388e <_printf_float+0x34e>
 80038b4:	4613      	mov	r3, r2
 80038b6:	4631      	mov	r1, r6
 80038b8:	4642      	mov	r2, r8
 80038ba:	4628      	mov	r0, r5
 80038bc:	47b8      	blx	r7
 80038be:	3001      	adds	r0, #1
 80038c0:	d1c0      	bne.n	8003844 <_printf_float+0x304>
 80038c2:	e69e      	b.n	8003602 <_printf_float+0xc2>
 80038c4:	2301      	movs	r3, #1
 80038c6:	4631      	mov	r1, r6
 80038c8:	4628      	mov	r0, r5
 80038ca:	9205      	str	r2, [sp, #20]
 80038cc:	47b8      	blx	r7
 80038ce:	3001      	adds	r0, #1
 80038d0:	f43f ae97 	beq.w	8003602 <_printf_float+0xc2>
 80038d4:	9a05      	ldr	r2, [sp, #20]
 80038d6:	f10b 0b01 	add.w	fp, fp, #1
 80038da:	e7b9      	b.n	8003850 <_printf_float+0x310>
 80038dc:	ee18 3a10 	vmov	r3, s16
 80038e0:	4652      	mov	r2, sl
 80038e2:	4631      	mov	r1, r6
 80038e4:	4628      	mov	r0, r5
 80038e6:	47b8      	blx	r7
 80038e8:	3001      	adds	r0, #1
 80038ea:	d1be      	bne.n	800386a <_printf_float+0x32a>
 80038ec:	e689      	b.n	8003602 <_printf_float+0xc2>
 80038ee:	9a05      	ldr	r2, [sp, #20]
 80038f0:	464b      	mov	r3, r9
 80038f2:	4442      	add	r2, r8
 80038f4:	4631      	mov	r1, r6
 80038f6:	4628      	mov	r0, r5
 80038f8:	47b8      	blx	r7
 80038fa:	3001      	adds	r0, #1
 80038fc:	d1c1      	bne.n	8003882 <_printf_float+0x342>
 80038fe:	e680      	b.n	8003602 <_printf_float+0xc2>
 8003900:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003902:	2a01      	cmp	r2, #1
 8003904:	dc01      	bgt.n	800390a <_printf_float+0x3ca>
 8003906:	07db      	lsls	r3, r3, #31
 8003908:	d538      	bpl.n	800397c <_printf_float+0x43c>
 800390a:	2301      	movs	r3, #1
 800390c:	4642      	mov	r2, r8
 800390e:	4631      	mov	r1, r6
 8003910:	4628      	mov	r0, r5
 8003912:	47b8      	blx	r7
 8003914:	3001      	adds	r0, #1
 8003916:	f43f ae74 	beq.w	8003602 <_printf_float+0xc2>
 800391a:	ee18 3a10 	vmov	r3, s16
 800391e:	4652      	mov	r2, sl
 8003920:	4631      	mov	r1, r6
 8003922:	4628      	mov	r0, r5
 8003924:	47b8      	blx	r7
 8003926:	3001      	adds	r0, #1
 8003928:	f43f ae6b 	beq.w	8003602 <_printf_float+0xc2>
 800392c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003930:	2200      	movs	r2, #0
 8003932:	2300      	movs	r3, #0
 8003934:	f7fd f8e0 	bl	8000af8 <__aeabi_dcmpeq>
 8003938:	b9d8      	cbnz	r0, 8003972 <_printf_float+0x432>
 800393a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800393c:	f108 0201 	add.w	r2, r8, #1
 8003940:	3b01      	subs	r3, #1
 8003942:	4631      	mov	r1, r6
 8003944:	4628      	mov	r0, r5
 8003946:	47b8      	blx	r7
 8003948:	3001      	adds	r0, #1
 800394a:	d10e      	bne.n	800396a <_printf_float+0x42a>
 800394c:	e659      	b.n	8003602 <_printf_float+0xc2>
 800394e:	2301      	movs	r3, #1
 8003950:	4652      	mov	r2, sl
 8003952:	4631      	mov	r1, r6
 8003954:	4628      	mov	r0, r5
 8003956:	47b8      	blx	r7
 8003958:	3001      	adds	r0, #1
 800395a:	f43f ae52 	beq.w	8003602 <_printf_float+0xc2>
 800395e:	f108 0801 	add.w	r8, r8, #1
 8003962:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003964:	3b01      	subs	r3, #1
 8003966:	4543      	cmp	r3, r8
 8003968:	dcf1      	bgt.n	800394e <_printf_float+0x40e>
 800396a:	464b      	mov	r3, r9
 800396c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003970:	e6dc      	b.n	800372c <_printf_float+0x1ec>
 8003972:	f04f 0800 	mov.w	r8, #0
 8003976:	f104 0a1a 	add.w	sl, r4, #26
 800397a:	e7f2      	b.n	8003962 <_printf_float+0x422>
 800397c:	2301      	movs	r3, #1
 800397e:	4642      	mov	r2, r8
 8003980:	e7df      	b.n	8003942 <_printf_float+0x402>
 8003982:	2301      	movs	r3, #1
 8003984:	464a      	mov	r2, r9
 8003986:	4631      	mov	r1, r6
 8003988:	4628      	mov	r0, r5
 800398a:	47b8      	blx	r7
 800398c:	3001      	adds	r0, #1
 800398e:	f43f ae38 	beq.w	8003602 <_printf_float+0xc2>
 8003992:	f108 0801 	add.w	r8, r8, #1
 8003996:	68e3      	ldr	r3, [r4, #12]
 8003998:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800399a:	1a5b      	subs	r3, r3, r1
 800399c:	4543      	cmp	r3, r8
 800399e:	dcf0      	bgt.n	8003982 <_printf_float+0x442>
 80039a0:	e6fa      	b.n	8003798 <_printf_float+0x258>
 80039a2:	f04f 0800 	mov.w	r8, #0
 80039a6:	f104 0919 	add.w	r9, r4, #25
 80039aa:	e7f4      	b.n	8003996 <_printf_float+0x456>

080039ac <_printf_common>:
 80039ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80039b0:	4616      	mov	r6, r2
 80039b2:	4699      	mov	r9, r3
 80039b4:	688a      	ldr	r2, [r1, #8]
 80039b6:	690b      	ldr	r3, [r1, #16]
 80039b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80039bc:	4293      	cmp	r3, r2
 80039be:	bfb8      	it	lt
 80039c0:	4613      	movlt	r3, r2
 80039c2:	6033      	str	r3, [r6, #0]
 80039c4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80039c8:	4607      	mov	r7, r0
 80039ca:	460c      	mov	r4, r1
 80039cc:	b10a      	cbz	r2, 80039d2 <_printf_common+0x26>
 80039ce:	3301      	adds	r3, #1
 80039d0:	6033      	str	r3, [r6, #0]
 80039d2:	6823      	ldr	r3, [r4, #0]
 80039d4:	0699      	lsls	r1, r3, #26
 80039d6:	bf42      	ittt	mi
 80039d8:	6833      	ldrmi	r3, [r6, #0]
 80039da:	3302      	addmi	r3, #2
 80039dc:	6033      	strmi	r3, [r6, #0]
 80039de:	6825      	ldr	r5, [r4, #0]
 80039e0:	f015 0506 	ands.w	r5, r5, #6
 80039e4:	d106      	bne.n	80039f4 <_printf_common+0x48>
 80039e6:	f104 0a19 	add.w	sl, r4, #25
 80039ea:	68e3      	ldr	r3, [r4, #12]
 80039ec:	6832      	ldr	r2, [r6, #0]
 80039ee:	1a9b      	subs	r3, r3, r2
 80039f0:	42ab      	cmp	r3, r5
 80039f2:	dc26      	bgt.n	8003a42 <_printf_common+0x96>
 80039f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80039f8:	1e13      	subs	r3, r2, #0
 80039fa:	6822      	ldr	r2, [r4, #0]
 80039fc:	bf18      	it	ne
 80039fe:	2301      	movne	r3, #1
 8003a00:	0692      	lsls	r2, r2, #26
 8003a02:	d42b      	bmi.n	8003a5c <_printf_common+0xb0>
 8003a04:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003a08:	4649      	mov	r1, r9
 8003a0a:	4638      	mov	r0, r7
 8003a0c:	47c0      	blx	r8
 8003a0e:	3001      	adds	r0, #1
 8003a10:	d01e      	beq.n	8003a50 <_printf_common+0xa4>
 8003a12:	6823      	ldr	r3, [r4, #0]
 8003a14:	68e5      	ldr	r5, [r4, #12]
 8003a16:	6832      	ldr	r2, [r6, #0]
 8003a18:	f003 0306 	and.w	r3, r3, #6
 8003a1c:	2b04      	cmp	r3, #4
 8003a1e:	bf08      	it	eq
 8003a20:	1aad      	subeq	r5, r5, r2
 8003a22:	68a3      	ldr	r3, [r4, #8]
 8003a24:	6922      	ldr	r2, [r4, #16]
 8003a26:	bf0c      	ite	eq
 8003a28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003a2c:	2500      	movne	r5, #0
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	bfc4      	itt	gt
 8003a32:	1a9b      	subgt	r3, r3, r2
 8003a34:	18ed      	addgt	r5, r5, r3
 8003a36:	2600      	movs	r6, #0
 8003a38:	341a      	adds	r4, #26
 8003a3a:	42b5      	cmp	r5, r6
 8003a3c:	d11a      	bne.n	8003a74 <_printf_common+0xc8>
 8003a3e:	2000      	movs	r0, #0
 8003a40:	e008      	b.n	8003a54 <_printf_common+0xa8>
 8003a42:	2301      	movs	r3, #1
 8003a44:	4652      	mov	r2, sl
 8003a46:	4649      	mov	r1, r9
 8003a48:	4638      	mov	r0, r7
 8003a4a:	47c0      	blx	r8
 8003a4c:	3001      	adds	r0, #1
 8003a4e:	d103      	bne.n	8003a58 <_printf_common+0xac>
 8003a50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003a54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a58:	3501      	adds	r5, #1
 8003a5a:	e7c6      	b.n	80039ea <_printf_common+0x3e>
 8003a5c:	18e1      	adds	r1, r4, r3
 8003a5e:	1c5a      	adds	r2, r3, #1
 8003a60:	2030      	movs	r0, #48	; 0x30
 8003a62:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003a66:	4422      	add	r2, r4
 8003a68:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003a6c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003a70:	3302      	adds	r3, #2
 8003a72:	e7c7      	b.n	8003a04 <_printf_common+0x58>
 8003a74:	2301      	movs	r3, #1
 8003a76:	4622      	mov	r2, r4
 8003a78:	4649      	mov	r1, r9
 8003a7a:	4638      	mov	r0, r7
 8003a7c:	47c0      	blx	r8
 8003a7e:	3001      	adds	r0, #1
 8003a80:	d0e6      	beq.n	8003a50 <_printf_common+0xa4>
 8003a82:	3601      	adds	r6, #1
 8003a84:	e7d9      	b.n	8003a3a <_printf_common+0x8e>
	...

08003a88 <_printf_i>:
 8003a88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003a8c:	7e0f      	ldrb	r7, [r1, #24]
 8003a8e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003a90:	2f78      	cmp	r7, #120	; 0x78
 8003a92:	4691      	mov	r9, r2
 8003a94:	4680      	mov	r8, r0
 8003a96:	460c      	mov	r4, r1
 8003a98:	469a      	mov	sl, r3
 8003a9a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003a9e:	d807      	bhi.n	8003ab0 <_printf_i+0x28>
 8003aa0:	2f62      	cmp	r7, #98	; 0x62
 8003aa2:	d80a      	bhi.n	8003aba <_printf_i+0x32>
 8003aa4:	2f00      	cmp	r7, #0
 8003aa6:	f000 80d8 	beq.w	8003c5a <_printf_i+0x1d2>
 8003aaa:	2f58      	cmp	r7, #88	; 0x58
 8003aac:	f000 80a3 	beq.w	8003bf6 <_printf_i+0x16e>
 8003ab0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003ab4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003ab8:	e03a      	b.n	8003b30 <_printf_i+0xa8>
 8003aba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003abe:	2b15      	cmp	r3, #21
 8003ac0:	d8f6      	bhi.n	8003ab0 <_printf_i+0x28>
 8003ac2:	a101      	add	r1, pc, #4	; (adr r1, 8003ac8 <_printf_i+0x40>)
 8003ac4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003ac8:	08003b21 	.word	0x08003b21
 8003acc:	08003b35 	.word	0x08003b35
 8003ad0:	08003ab1 	.word	0x08003ab1
 8003ad4:	08003ab1 	.word	0x08003ab1
 8003ad8:	08003ab1 	.word	0x08003ab1
 8003adc:	08003ab1 	.word	0x08003ab1
 8003ae0:	08003b35 	.word	0x08003b35
 8003ae4:	08003ab1 	.word	0x08003ab1
 8003ae8:	08003ab1 	.word	0x08003ab1
 8003aec:	08003ab1 	.word	0x08003ab1
 8003af0:	08003ab1 	.word	0x08003ab1
 8003af4:	08003c41 	.word	0x08003c41
 8003af8:	08003b65 	.word	0x08003b65
 8003afc:	08003c23 	.word	0x08003c23
 8003b00:	08003ab1 	.word	0x08003ab1
 8003b04:	08003ab1 	.word	0x08003ab1
 8003b08:	08003c63 	.word	0x08003c63
 8003b0c:	08003ab1 	.word	0x08003ab1
 8003b10:	08003b65 	.word	0x08003b65
 8003b14:	08003ab1 	.word	0x08003ab1
 8003b18:	08003ab1 	.word	0x08003ab1
 8003b1c:	08003c2b 	.word	0x08003c2b
 8003b20:	682b      	ldr	r3, [r5, #0]
 8003b22:	1d1a      	adds	r2, r3, #4
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	602a      	str	r2, [r5, #0]
 8003b28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003b2c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003b30:	2301      	movs	r3, #1
 8003b32:	e0a3      	b.n	8003c7c <_printf_i+0x1f4>
 8003b34:	6820      	ldr	r0, [r4, #0]
 8003b36:	6829      	ldr	r1, [r5, #0]
 8003b38:	0606      	lsls	r6, r0, #24
 8003b3a:	f101 0304 	add.w	r3, r1, #4
 8003b3e:	d50a      	bpl.n	8003b56 <_printf_i+0xce>
 8003b40:	680e      	ldr	r6, [r1, #0]
 8003b42:	602b      	str	r3, [r5, #0]
 8003b44:	2e00      	cmp	r6, #0
 8003b46:	da03      	bge.n	8003b50 <_printf_i+0xc8>
 8003b48:	232d      	movs	r3, #45	; 0x2d
 8003b4a:	4276      	negs	r6, r6
 8003b4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003b50:	485e      	ldr	r0, [pc, #376]	; (8003ccc <_printf_i+0x244>)
 8003b52:	230a      	movs	r3, #10
 8003b54:	e019      	b.n	8003b8a <_printf_i+0x102>
 8003b56:	680e      	ldr	r6, [r1, #0]
 8003b58:	602b      	str	r3, [r5, #0]
 8003b5a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003b5e:	bf18      	it	ne
 8003b60:	b236      	sxthne	r6, r6
 8003b62:	e7ef      	b.n	8003b44 <_printf_i+0xbc>
 8003b64:	682b      	ldr	r3, [r5, #0]
 8003b66:	6820      	ldr	r0, [r4, #0]
 8003b68:	1d19      	adds	r1, r3, #4
 8003b6a:	6029      	str	r1, [r5, #0]
 8003b6c:	0601      	lsls	r1, r0, #24
 8003b6e:	d501      	bpl.n	8003b74 <_printf_i+0xec>
 8003b70:	681e      	ldr	r6, [r3, #0]
 8003b72:	e002      	b.n	8003b7a <_printf_i+0xf2>
 8003b74:	0646      	lsls	r6, r0, #25
 8003b76:	d5fb      	bpl.n	8003b70 <_printf_i+0xe8>
 8003b78:	881e      	ldrh	r6, [r3, #0]
 8003b7a:	4854      	ldr	r0, [pc, #336]	; (8003ccc <_printf_i+0x244>)
 8003b7c:	2f6f      	cmp	r7, #111	; 0x6f
 8003b7e:	bf0c      	ite	eq
 8003b80:	2308      	moveq	r3, #8
 8003b82:	230a      	movne	r3, #10
 8003b84:	2100      	movs	r1, #0
 8003b86:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003b8a:	6865      	ldr	r5, [r4, #4]
 8003b8c:	60a5      	str	r5, [r4, #8]
 8003b8e:	2d00      	cmp	r5, #0
 8003b90:	bfa2      	ittt	ge
 8003b92:	6821      	ldrge	r1, [r4, #0]
 8003b94:	f021 0104 	bicge.w	r1, r1, #4
 8003b98:	6021      	strge	r1, [r4, #0]
 8003b9a:	b90e      	cbnz	r6, 8003ba0 <_printf_i+0x118>
 8003b9c:	2d00      	cmp	r5, #0
 8003b9e:	d04d      	beq.n	8003c3c <_printf_i+0x1b4>
 8003ba0:	4615      	mov	r5, r2
 8003ba2:	fbb6 f1f3 	udiv	r1, r6, r3
 8003ba6:	fb03 6711 	mls	r7, r3, r1, r6
 8003baa:	5dc7      	ldrb	r7, [r0, r7]
 8003bac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003bb0:	4637      	mov	r7, r6
 8003bb2:	42bb      	cmp	r3, r7
 8003bb4:	460e      	mov	r6, r1
 8003bb6:	d9f4      	bls.n	8003ba2 <_printf_i+0x11a>
 8003bb8:	2b08      	cmp	r3, #8
 8003bba:	d10b      	bne.n	8003bd4 <_printf_i+0x14c>
 8003bbc:	6823      	ldr	r3, [r4, #0]
 8003bbe:	07de      	lsls	r6, r3, #31
 8003bc0:	d508      	bpl.n	8003bd4 <_printf_i+0x14c>
 8003bc2:	6923      	ldr	r3, [r4, #16]
 8003bc4:	6861      	ldr	r1, [r4, #4]
 8003bc6:	4299      	cmp	r1, r3
 8003bc8:	bfde      	ittt	le
 8003bca:	2330      	movle	r3, #48	; 0x30
 8003bcc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003bd0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003bd4:	1b52      	subs	r2, r2, r5
 8003bd6:	6122      	str	r2, [r4, #16]
 8003bd8:	f8cd a000 	str.w	sl, [sp]
 8003bdc:	464b      	mov	r3, r9
 8003bde:	aa03      	add	r2, sp, #12
 8003be0:	4621      	mov	r1, r4
 8003be2:	4640      	mov	r0, r8
 8003be4:	f7ff fee2 	bl	80039ac <_printf_common>
 8003be8:	3001      	adds	r0, #1
 8003bea:	d14c      	bne.n	8003c86 <_printf_i+0x1fe>
 8003bec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003bf0:	b004      	add	sp, #16
 8003bf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003bf6:	4835      	ldr	r0, [pc, #212]	; (8003ccc <_printf_i+0x244>)
 8003bf8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003bfc:	6829      	ldr	r1, [r5, #0]
 8003bfe:	6823      	ldr	r3, [r4, #0]
 8003c00:	f851 6b04 	ldr.w	r6, [r1], #4
 8003c04:	6029      	str	r1, [r5, #0]
 8003c06:	061d      	lsls	r5, r3, #24
 8003c08:	d514      	bpl.n	8003c34 <_printf_i+0x1ac>
 8003c0a:	07df      	lsls	r7, r3, #31
 8003c0c:	bf44      	itt	mi
 8003c0e:	f043 0320 	orrmi.w	r3, r3, #32
 8003c12:	6023      	strmi	r3, [r4, #0]
 8003c14:	b91e      	cbnz	r6, 8003c1e <_printf_i+0x196>
 8003c16:	6823      	ldr	r3, [r4, #0]
 8003c18:	f023 0320 	bic.w	r3, r3, #32
 8003c1c:	6023      	str	r3, [r4, #0]
 8003c1e:	2310      	movs	r3, #16
 8003c20:	e7b0      	b.n	8003b84 <_printf_i+0xfc>
 8003c22:	6823      	ldr	r3, [r4, #0]
 8003c24:	f043 0320 	orr.w	r3, r3, #32
 8003c28:	6023      	str	r3, [r4, #0]
 8003c2a:	2378      	movs	r3, #120	; 0x78
 8003c2c:	4828      	ldr	r0, [pc, #160]	; (8003cd0 <_printf_i+0x248>)
 8003c2e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003c32:	e7e3      	b.n	8003bfc <_printf_i+0x174>
 8003c34:	0659      	lsls	r1, r3, #25
 8003c36:	bf48      	it	mi
 8003c38:	b2b6      	uxthmi	r6, r6
 8003c3a:	e7e6      	b.n	8003c0a <_printf_i+0x182>
 8003c3c:	4615      	mov	r5, r2
 8003c3e:	e7bb      	b.n	8003bb8 <_printf_i+0x130>
 8003c40:	682b      	ldr	r3, [r5, #0]
 8003c42:	6826      	ldr	r6, [r4, #0]
 8003c44:	6961      	ldr	r1, [r4, #20]
 8003c46:	1d18      	adds	r0, r3, #4
 8003c48:	6028      	str	r0, [r5, #0]
 8003c4a:	0635      	lsls	r5, r6, #24
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	d501      	bpl.n	8003c54 <_printf_i+0x1cc>
 8003c50:	6019      	str	r1, [r3, #0]
 8003c52:	e002      	b.n	8003c5a <_printf_i+0x1d2>
 8003c54:	0670      	lsls	r0, r6, #25
 8003c56:	d5fb      	bpl.n	8003c50 <_printf_i+0x1c8>
 8003c58:	8019      	strh	r1, [r3, #0]
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	6123      	str	r3, [r4, #16]
 8003c5e:	4615      	mov	r5, r2
 8003c60:	e7ba      	b.n	8003bd8 <_printf_i+0x150>
 8003c62:	682b      	ldr	r3, [r5, #0]
 8003c64:	1d1a      	adds	r2, r3, #4
 8003c66:	602a      	str	r2, [r5, #0]
 8003c68:	681d      	ldr	r5, [r3, #0]
 8003c6a:	6862      	ldr	r2, [r4, #4]
 8003c6c:	2100      	movs	r1, #0
 8003c6e:	4628      	mov	r0, r5
 8003c70:	f7fc face 	bl	8000210 <memchr>
 8003c74:	b108      	cbz	r0, 8003c7a <_printf_i+0x1f2>
 8003c76:	1b40      	subs	r0, r0, r5
 8003c78:	6060      	str	r0, [r4, #4]
 8003c7a:	6863      	ldr	r3, [r4, #4]
 8003c7c:	6123      	str	r3, [r4, #16]
 8003c7e:	2300      	movs	r3, #0
 8003c80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003c84:	e7a8      	b.n	8003bd8 <_printf_i+0x150>
 8003c86:	6923      	ldr	r3, [r4, #16]
 8003c88:	462a      	mov	r2, r5
 8003c8a:	4649      	mov	r1, r9
 8003c8c:	4640      	mov	r0, r8
 8003c8e:	47d0      	blx	sl
 8003c90:	3001      	adds	r0, #1
 8003c92:	d0ab      	beq.n	8003bec <_printf_i+0x164>
 8003c94:	6823      	ldr	r3, [r4, #0]
 8003c96:	079b      	lsls	r3, r3, #30
 8003c98:	d413      	bmi.n	8003cc2 <_printf_i+0x23a>
 8003c9a:	68e0      	ldr	r0, [r4, #12]
 8003c9c:	9b03      	ldr	r3, [sp, #12]
 8003c9e:	4298      	cmp	r0, r3
 8003ca0:	bfb8      	it	lt
 8003ca2:	4618      	movlt	r0, r3
 8003ca4:	e7a4      	b.n	8003bf0 <_printf_i+0x168>
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	4632      	mov	r2, r6
 8003caa:	4649      	mov	r1, r9
 8003cac:	4640      	mov	r0, r8
 8003cae:	47d0      	blx	sl
 8003cb0:	3001      	adds	r0, #1
 8003cb2:	d09b      	beq.n	8003bec <_printf_i+0x164>
 8003cb4:	3501      	adds	r5, #1
 8003cb6:	68e3      	ldr	r3, [r4, #12]
 8003cb8:	9903      	ldr	r1, [sp, #12]
 8003cba:	1a5b      	subs	r3, r3, r1
 8003cbc:	42ab      	cmp	r3, r5
 8003cbe:	dcf2      	bgt.n	8003ca6 <_printf_i+0x21e>
 8003cc0:	e7eb      	b.n	8003c9a <_printf_i+0x212>
 8003cc2:	2500      	movs	r5, #0
 8003cc4:	f104 0619 	add.w	r6, r4, #25
 8003cc8:	e7f5      	b.n	8003cb6 <_printf_i+0x22e>
 8003cca:	bf00      	nop
 8003ccc:	08008a80 	.word	0x08008a80
 8003cd0:	08008a91 	.word	0x08008a91

08003cd4 <_scanf_float>:
 8003cd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003cd8:	b087      	sub	sp, #28
 8003cda:	4617      	mov	r7, r2
 8003cdc:	9303      	str	r3, [sp, #12]
 8003cde:	688b      	ldr	r3, [r1, #8]
 8003ce0:	1e5a      	subs	r2, r3, #1
 8003ce2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8003ce6:	bf83      	ittte	hi
 8003ce8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8003cec:	195b      	addhi	r3, r3, r5
 8003cee:	9302      	strhi	r3, [sp, #8]
 8003cf0:	2300      	movls	r3, #0
 8003cf2:	bf86      	itte	hi
 8003cf4:	f240 135d 	movwhi	r3, #349	; 0x15d
 8003cf8:	608b      	strhi	r3, [r1, #8]
 8003cfa:	9302      	strls	r3, [sp, #8]
 8003cfc:	680b      	ldr	r3, [r1, #0]
 8003cfe:	468b      	mov	fp, r1
 8003d00:	2500      	movs	r5, #0
 8003d02:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8003d06:	f84b 3b1c 	str.w	r3, [fp], #28
 8003d0a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8003d0e:	4680      	mov	r8, r0
 8003d10:	460c      	mov	r4, r1
 8003d12:	465e      	mov	r6, fp
 8003d14:	46aa      	mov	sl, r5
 8003d16:	46a9      	mov	r9, r5
 8003d18:	9501      	str	r5, [sp, #4]
 8003d1a:	68a2      	ldr	r2, [r4, #8]
 8003d1c:	b152      	cbz	r2, 8003d34 <_scanf_float+0x60>
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	781b      	ldrb	r3, [r3, #0]
 8003d22:	2b4e      	cmp	r3, #78	; 0x4e
 8003d24:	d864      	bhi.n	8003df0 <_scanf_float+0x11c>
 8003d26:	2b40      	cmp	r3, #64	; 0x40
 8003d28:	d83c      	bhi.n	8003da4 <_scanf_float+0xd0>
 8003d2a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8003d2e:	b2c8      	uxtb	r0, r1
 8003d30:	280e      	cmp	r0, #14
 8003d32:	d93a      	bls.n	8003daa <_scanf_float+0xd6>
 8003d34:	f1b9 0f00 	cmp.w	r9, #0
 8003d38:	d003      	beq.n	8003d42 <_scanf_float+0x6e>
 8003d3a:	6823      	ldr	r3, [r4, #0]
 8003d3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d40:	6023      	str	r3, [r4, #0]
 8003d42:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8003d46:	f1ba 0f01 	cmp.w	sl, #1
 8003d4a:	f200 8113 	bhi.w	8003f74 <_scanf_float+0x2a0>
 8003d4e:	455e      	cmp	r6, fp
 8003d50:	f200 8105 	bhi.w	8003f5e <_scanf_float+0x28a>
 8003d54:	2501      	movs	r5, #1
 8003d56:	4628      	mov	r0, r5
 8003d58:	b007      	add	sp, #28
 8003d5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d5e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8003d62:	2a0d      	cmp	r2, #13
 8003d64:	d8e6      	bhi.n	8003d34 <_scanf_float+0x60>
 8003d66:	a101      	add	r1, pc, #4	; (adr r1, 8003d6c <_scanf_float+0x98>)
 8003d68:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8003d6c:	08003eab 	.word	0x08003eab
 8003d70:	08003d35 	.word	0x08003d35
 8003d74:	08003d35 	.word	0x08003d35
 8003d78:	08003d35 	.word	0x08003d35
 8003d7c:	08003f0b 	.word	0x08003f0b
 8003d80:	08003ee3 	.word	0x08003ee3
 8003d84:	08003d35 	.word	0x08003d35
 8003d88:	08003d35 	.word	0x08003d35
 8003d8c:	08003eb9 	.word	0x08003eb9
 8003d90:	08003d35 	.word	0x08003d35
 8003d94:	08003d35 	.word	0x08003d35
 8003d98:	08003d35 	.word	0x08003d35
 8003d9c:	08003d35 	.word	0x08003d35
 8003da0:	08003e71 	.word	0x08003e71
 8003da4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8003da8:	e7db      	b.n	8003d62 <_scanf_float+0x8e>
 8003daa:	290e      	cmp	r1, #14
 8003dac:	d8c2      	bhi.n	8003d34 <_scanf_float+0x60>
 8003dae:	a001      	add	r0, pc, #4	; (adr r0, 8003db4 <_scanf_float+0xe0>)
 8003db0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8003db4:	08003e63 	.word	0x08003e63
 8003db8:	08003d35 	.word	0x08003d35
 8003dbc:	08003e63 	.word	0x08003e63
 8003dc0:	08003ef7 	.word	0x08003ef7
 8003dc4:	08003d35 	.word	0x08003d35
 8003dc8:	08003e11 	.word	0x08003e11
 8003dcc:	08003e4d 	.word	0x08003e4d
 8003dd0:	08003e4d 	.word	0x08003e4d
 8003dd4:	08003e4d 	.word	0x08003e4d
 8003dd8:	08003e4d 	.word	0x08003e4d
 8003ddc:	08003e4d 	.word	0x08003e4d
 8003de0:	08003e4d 	.word	0x08003e4d
 8003de4:	08003e4d 	.word	0x08003e4d
 8003de8:	08003e4d 	.word	0x08003e4d
 8003dec:	08003e4d 	.word	0x08003e4d
 8003df0:	2b6e      	cmp	r3, #110	; 0x6e
 8003df2:	d809      	bhi.n	8003e08 <_scanf_float+0x134>
 8003df4:	2b60      	cmp	r3, #96	; 0x60
 8003df6:	d8b2      	bhi.n	8003d5e <_scanf_float+0x8a>
 8003df8:	2b54      	cmp	r3, #84	; 0x54
 8003dfa:	d077      	beq.n	8003eec <_scanf_float+0x218>
 8003dfc:	2b59      	cmp	r3, #89	; 0x59
 8003dfe:	d199      	bne.n	8003d34 <_scanf_float+0x60>
 8003e00:	2d07      	cmp	r5, #7
 8003e02:	d197      	bne.n	8003d34 <_scanf_float+0x60>
 8003e04:	2508      	movs	r5, #8
 8003e06:	e029      	b.n	8003e5c <_scanf_float+0x188>
 8003e08:	2b74      	cmp	r3, #116	; 0x74
 8003e0a:	d06f      	beq.n	8003eec <_scanf_float+0x218>
 8003e0c:	2b79      	cmp	r3, #121	; 0x79
 8003e0e:	e7f6      	b.n	8003dfe <_scanf_float+0x12a>
 8003e10:	6821      	ldr	r1, [r4, #0]
 8003e12:	05c8      	lsls	r0, r1, #23
 8003e14:	d51a      	bpl.n	8003e4c <_scanf_float+0x178>
 8003e16:	9b02      	ldr	r3, [sp, #8]
 8003e18:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8003e1c:	6021      	str	r1, [r4, #0]
 8003e1e:	f109 0901 	add.w	r9, r9, #1
 8003e22:	b11b      	cbz	r3, 8003e2c <_scanf_float+0x158>
 8003e24:	3b01      	subs	r3, #1
 8003e26:	3201      	adds	r2, #1
 8003e28:	9302      	str	r3, [sp, #8]
 8003e2a:	60a2      	str	r2, [r4, #8]
 8003e2c:	68a3      	ldr	r3, [r4, #8]
 8003e2e:	3b01      	subs	r3, #1
 8003e30:	60a3      	str	r3, [r4, #8]
 8003e32:	6923      	ldr	r3, [r4, #16]
 8003e34:	3301      	adds	r3, #1
 8003e36:	6123      	str	r3, [r4, #16]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	3b01      	subs	r3, #1
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	607b      	str	r3, [r7, #4]
 8003e40:	f340 8084 	ble.w	8003f4c <_scanf_float+0x278>
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	3301      	adds	r3, #1
 8003e48:	603b      	str	r3, [r7, #0]
 8003e4a:	e766      	b.n	8003d1a <_scanf_float+0x46>
 8003e4c:	eb1a 0f05 	cmn.w	sl, r5
 8003e50:	f47f af70 	bne.w	8003d34 <_scanf_float+0x60>
 8003e54:	6822      	ldr	r2, [r4, #0]
 8003e56:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8003e5a:	6022      	str	r2, [r4, #0]
 8003e5c:	f806 3b01 	strb.w	r3, [r6], #1
 8003e60:	e7e4      	b.n	8003e2c <_scanf_float+0x158>
 8003e62:	6822      	ldr	r2, [r4, #0]
 8003e64:	0610      	lsls	r0, r2, #24
 8003e66:	f57f af65 	bpl.w	8003d34 <_scanf_float+0x60>
 8003e6a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e6e:	e7f4      	b.n	8003e5a <_scanf_float+0x186>
 8003e70:	f1ba 0f00 	cmp.w	sl, #0
 8003e74:	d10e      	bne.n	8003e94 <_scanf_float+0x1c0>
 8003e76:	f1b9 0f00 	cmp.w	r9, #0
 8003e7a:	d10e      	bne.n	8003e9a <_scanf_float+0x1c6>
 8003e7c:	6822      	ldr	r2, [r4, #0]
 8003e7e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8003e82:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8003e86:	d108      	bne.n	8003e9a <_scanf_float+0x1c6>
 8003e88:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8003e8c:	6022      	str	r2, [r4, #0]
 8003e8e:	f04f 0a01 	mov.w	sl, #1
 8003e92:	e7e3      	b.n	8003e5c <_scanf_float+0x188>
 8003e94:	f1ba 0f02 	cmp.w	sl, #2
 8003e98:	d055      	beq.n	8003f46 <_scanf_float+0x272>
 8003e9a:	2d01      	cmp	r5, #1
 8003e9c:	d002      	beq.n	8003ea4 <_scanf_float+0x1d0>
 8003e9e:	2d04      	cmp	r5, #4
 8003ea0:	f47f af48 	bne.w	8003d34 <_scanf_float+0x60>
 8003ea4:	3501      	adds	r5, #1
 8003ea6:	b2ed      	uxtb	r5, r5
 8003ea8:	e7d8      	b.n	8003e5c <_scanf_float+0x188>
 8003eaa:	f1ba 0f01 	cmp.w	sl, #1
 8003eae:	f47f af41 	bne.w	8003d34 <_scanf_float+0x60>
 8003eb2:	f04f 0a02 	mov.w	sl, #2
 8003eb6:	e7d1      	b.n	8003e5c <_scanf_float+0x188>
 8003eb8:	b97d      	cbnz	r5, 8003eda <_scanf_float+0x206>
 8003eba:	f1b9 0f00 	cmp.w	r9, #0
 8003ebe:	f47f af3c 	bne.w	8003d3a <_scanf_float+0x66>
 8003ec2:	6822      	ldr	r2, [r4, #0]
 8003ec4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8003ec8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8003ecc:	f47f af39 	bne.w	8003d42 <_scanf_float+0x6e>
 8003ed0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8003ed4:	6022      	str	r2, [r4, #0]
 8003ed6:	2501      	movs	r5, #1
 8003ed8:	e7c0      	b.n	8003e5c <_scanf_float+0x188>
 8003eda:	2d03      	cmp	r5, #3
 8003edc:	d0e2      	beq.n	8003ea4 <_scanf_float+0x1d0>
 8003ede:	2d05      	cmp	r5, #5
 8003ee0:	e7de      	b.n	8003ea0 <_scanf_float+0x1cc>
 8003ee2:	2d02      	cmp	r5, #2
 8003ee4:	f47f af26 	bne.w	8003d34 <_scanf_float+0x60>
 8003ee8:	2503      	movs	r5, #3
 8003eea:	e7b7      	b.n	8003e5c <_scanf_float+0x188>
 8003eec:	2d06      	cmp	r5, #6
 8003eee:	f47f af21 	bne.w	8003d34 <_scanf_float+0x60>
 8003ef2:	2507      	movs	r5, #7
 8003ef4:	e7b2      	b.n	8003e5c <_scanf_float+0x188>
 8003ef6:	6822      	ldr	r2, [r4, #0]
 8003ef8:	0591      	lsls	r1, r2, #22
 8003efa:	f57f af1b 	bpl.w	8003d34 <_scanf_float+0x60>
 8003efe:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8003f02:	6022      	str	r2, [r4, #0]
 8003f04:	f8cd 9004 	str.w	r9, [sp, #4]
 8003f08:	e7a8      	b.n	8003e5c <_scanf_float+0x188>
 8003f0a:	6822      	ldr	r2, [r4, #0]
 8003f0c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8003f10:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8003f14:	d006      	beq.n	8003f24 <_scanf_float+0x250>
 8003f16:	0550      	lsls	r0, r2, #21
 8003f18:	f57f af0c 	bpl.w	8003d34 <_scanf_float+0x60>
 8003f1c:	f1b9 0f00 	cmp.w	r9, #0
 8003f20:	f43f af0f 	beq.w	8003d42 <_scanf_float+0x6e>
 8003f24:	0591      	lsls	r1, r2, #22
 8003f26:	bf58      	it	pl
 8003f28:	9901      	ldrpl	r1, [sp, #4]
 8003f2a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8003f2e:	bf58      	it	pl
 8003f30:	eba9 0101 	subpl.w	r1, r9, r1
 8003f34:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8003f38:	bf58      	it	pl
 8003f3a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8003f3e:	6022      	str	r2, [r4, #0]
 8003f40:	f04f 0900 	mov.w	r9, #0
 8003f44:	e78a      	b.n	8003e5c <_scanf_float+0x188>
 8003f46:	f04f 0a03 	mov.w	sl, #3
 8003f4a:	e787      	b.n	8003e5c <_scanf_float+0x188>
 8003f4c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8003f50:	4639      	mov	r1, r7
 8003f52:	4640      	mov	r0, r8
 8003f54:	4798      	blx	r3
 8003f56:	2800      	cmp	r0, #0
 8003f58:	f43f aedf 	beq.w	8003d1a <_scanf_float+0x46>
 8003f5c:	e6ea      	b.n	8003d34 <_scanf_float+0x60>
 8003f5e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003f62:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003f66:	463a      	mov	r2, r7
 8003f68:	4640      	mov	r0, r8
 8003f6a:	4798      	blx	r3
 8003f6c:	6923      	ldr	r3, [r4, #16]
 8003f6e:	3b01      	subs	r3, #1
 8003f70:	6123      	str	r3, [r4, #16]
 8003f72:	e6ec      	b.n	8003d4e <_scanf_float+0x7a>
 8003f74:	1e6b      	subs	r3, r5, #1
 8003f76:	2b06      	cmp	r3, #6
 8003f78:	d825      	bhi.n	8003fc6 <_scanf_float+0x2f2>
 8003f7a:	2d02      	cmp	r5, #2
 8003f7c:	d836      	bhi.n	8003fec <_scanf_float+0x318>
 8003f7e:	455e      	cmp	r6, fp
 8003f80:	f67f aee8 	bls.w	8003d54 <_scanf_float+0x80>
 8003f84:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003f88:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003f8c:	463a      	mov	r2, r7
 8003f8e:	4640      	mov	r0, r8
 8003f90:	4798      	blx	r3
 8003f92:	6923      	ldr	r3, [r4, #16]
 8003f94:	3b01      	subs	r3, #1
 8003f96:	6123      	str	r3, [r4, #16]
 8003f98:	e7f1      	b.n	8003f7e <_scanf_float+0x2aa>
 8003f9a:	9802      	ldr	r0, [sp, #8]
 8003f9c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003fa0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8003fa4:	9002      	str	r0, [sp, #8]
 8003fa6:	463a      	mov	r2, r7
 8003fa8:	4640      	mov	r0, r8
 8003faa:	4798      	blx	r3
 8003fac:	6923      	ldr	r3, [r4, #16]
 8003fae:	3b01      	subs	r3, #1
 8003fb0:	6123      	str	r3, [r4, #16]
 8003fb2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8003fb6:	fa5f fa8a 	uxtb.w	sl, sl
 8003fba:	f1ba 0f02 	cmp.w	sl, #2
 8003fbe:	d1ec      	bne.n	8003f9a <_scanf_float+0x2c6>
 8003fc0:	3d03      	subs	r5, #3
 8003fc2:	b2ed      	uxtb	r5, r5
 8003fc4:	1b76      	subs	r6, r6, r5
 8003fc6:	6823      	ldr	r3, [r4, #0]
 8003fc8:	05da      	lsls	r2, r3, #23
 8003fca:	d52f      	bpl.n	800402c <_scanf_float+0x358>
 8003fcc:	055b      	lsls	r3, r3, #21
 8003fce:	d510      	bpl.n	8003ff2 <_scanf_float+0x31e>
 8003fd0:	455e      	cmp	r6, fp
 8003fd2:	f67f aebf 	bls.w	8003d54 <_scanf_float+0x80>
 8003fd6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003fda:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003fde:	463a      	mov	r2, r7
 8003fe0:	4640      	mov	r0, r8
 8003fe2:	4798      	blx	r3
 8003fe4:	6923      	ldr	r3, [r4, #16]
 8003fe6:	3b01      	subs	r3, #1
 8003fe8:	6123      	str	r3, [r4, #16]
 8003fea:	e7f1      	b.n	8003fd0 <_scanf_float+0x2fc>
 8003fec:	46aa      	mov	sl, r5
 8003fee:	9602      	str	r6, [sp, #8]
 8003ff0:	e7df      	b.n	8003fb2 <_scanf_float+0x2de>
 8003ff2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8003ff6:	6923      	ldr	r3, [r4, #16]
 8003ff8:	2965      	cmp	r1, #101	; 0x65
 8003ffa:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8003ffe:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 8004002:	6123      	str	r3, [r4, #16]
 8004004:	d00c      	beq.n	8004020 <_scanf_float+0x34c>
 8004006:	2945      	cmp	r1, #69	; 0x45
 8004008:	d00a      	beq.n	8004020 <_scanf_float+0x34c>
 800400a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800400e:	463a      	mov	r2, r7
 8004010:	4640      	mov	r0, r8
 8004012:	4798      	blx	r3
 8004014:	6923      	ldr	r3, [r4, #16]
 8004016:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800401a:	3b01      	subs	r3, #1
 800401c:	1eb5      	subs	r5, r6, #2
 800401e:	6123      	str	r3, [r4, #16]
 8004020:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004024:	463a      	mov	r2, r7
 8004026:	4640      	mov	r0, r8
 8004028:	4798      	blx	r3
 800402a:	462e      	mov	r6, r5
 800402c:	6825      	ldr	r5, [r4, #0]
 800402e:	f015 0510 	ands.w	r5, r5, #16
 8004032:	d159      	bne.n	80040e8 <_scanf_float+0x414>
 8004034:	7035      	strb	r5, [r6, #0]
 8004036:	6823      	ldr	r3, [r4, #0]
 8004038:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800403c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004040:	d11b      	bne.n	800407a <_scanf_float+0x3a6>
 8004042:	9b01      	ldr	r3, [sp, #4]
 8004044:	454b      	cmp	r3, r9
 8004046:	eba3 0209 	sub.w	r2, r3, r9
 800404a:	d123      	bne.n	8004094 <_scanf_float+0x3c0>
 800404c:	2200      	movs	r2, #0
 800404e:	4659      	mov	r1, fp
 8004050:	4640      	mov	r0, r8
 8004052:	f000 ff1b 	bl	8004e8c <_strtod_r>
 8004056:	6822      	ldr	r2, [r4, #0]
 8004058:	9b03      	ldr	r3, [sp, #12]
 800405a:	f012 0f02 	tst.w	r2, #2
 800405e:	ec57 6b10 	vmov	r6, r7, d0
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	d021      	beq.n	80040aa <_scanf_float+0x3d6>
 8004066:	9903      	ldr	r1, [sp, #12]
 8004068:	1d1a      	adds	r2, r3, #4
 800406a:	600a      	str	r2, [r1, #0]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	e9c3 6700 	strd	r6, r7, [r3]
 8004072:	68e3      	ldr	r3, [r4, #12]
 8004074:	3301      	adds	r3, #1
 8004076:	60e3      	str	r3, [r4, #12]
 8004078:	e66d      	b.n	8003d56 <_scanf_float+0x82>
 800407a:	9b04      	ldr	r3, [sp, #16]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d0e5      	beq.n	800404c <_scanf_float+0x378>
 8004080:	9905      	ldr	r1, [sp, #20]
 8004082:	230a      	movs	r3, #10
 8004084:	462a      	mov	r2, r5
 8004086:	3101      	adds	r1, #1
 8004088:	4640      	mov	r0, r8
 800408a:	f000 ff87 	bl	8004f9c <_strtol_r>
 800408e:	9b04      	ldr	r3, [sp, #16]
 8004090:	9e05      	ldr	r6, [sp, #20]
 8004092:	1ac2      	subs	r2, r0, r3
 8004094:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8004098:	429e      	cmp	r6, r3
 800409a:	bf28      	it	cs
 800409c:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80040a0:	4912      	ldr	r1, [pc, #72]	; (80040ec <_scanf_float+0x418>)
 80040a2:	4630      	mov	r0, r6
 80040a4:	f000 f82c 	bl	8004100 <siprintf>
 80040a8:	e7d0      	b.n	800404c <_scanf_float+0x378>
 80040aa:	9903      	ldr	r1, [sp, #12]
 80040ac:	f012 0f04 	tst.w	r2, #4
 80040b0:	f103 0204 	add.w	r2, r3, #4
 80040b4:	600a      	str	r2, [r1, #0]
 80040b6:	d1d9      	bne.n	800406c <_scanf_float+0x398>
 80040b8:	f8d3 8000 	ldr.w	r8, [r3]
 80040bc:	ee10 2a10 	vmov	r2, s0
 80040c0:	ee10 0a10 	vmov	r0, s0
 80040c4:	463b      	mov	r3, r7
 80040c6:	4639      	mov	r1, r7
 80040c8:	f7fc fd48 	bl	8000b5c <__aeabi_dcmpun>
 80040cc:	b128      	cbz	r0, 80040da <_scanf_float+0x406>
 80040ce:	4808      	ldr	r0, [pc, #32]	; (80040f0 <_scanf_float+0x41c>)
 80040d0:	f000 f810 	bl	80040f4 <nanf>
 80040d4:	ed88 0a00 	vstr	s0, [r8]
 80040d8:	e7cb      	b.n	8004072 <_scanf_float+0x39e>
 80040da:	4630      	mov	r0, r6
 80040dc:	4639      	mov	r1, r7
 80040de:	f7fc fd9b 	bl	8000c18 <__aeabi_d2f>
 80040e2:	f8c8 0000 	str.w	r0, [r8]
 80040e6:	e7c4      	b.n	8004072 <_scanf_float+0x39e>
 80040e8:	2500      	movs	r5, #0
 80040ea:	e634      	b.n	8003d56 <_scanf_float+0x82>
 80040ec:	08008aa2 	.word	0x08008aa2
 80040f0:	08008ec3 	.word	0x08008ec3

080040f4 <nanf>:
 80040f4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80040fc <nanf+0x8>
 80040f8:	4770      	bx	lr
 80040fa:	bf00      	nop
 80040fc:	7fc00000 	.word	0x7fc00000

08004100 <siprintf>:
 8004100:	b40e      	push	{r1, r2, r3}
 8004102:	b500      	push	{lr}
 8004104:	b09c      	sub	sp, #112	; 0x70
 8004106:	ab1d      	add	r3, sp, #116	; 0x74
 8004108:	9002      	str	r0, [sp, #8]
 800410a:	9006      	str	r0, [sp, #24]
 800410c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004110:	4809      	ldr	r0, [pc, #36]	; (8004138 <siprintf+0x38>)
 8004112:	9107      	str	r1, [sp, #28]
 8004114:	9104      	str	r1, [sp, #16]
 8004116:	4909      	ldr	r1, [pc, #36]	; (800413c <siprintf+0x3c>)
 8004118:	f853 2b04 	ldr.w	r2, [r3], #4
 800411c:	9105      	str	r1, [sp, #20]
 800411e:	6800      	ldr	r0, [r0, #0]
 8004120:	9301      	str	r3, [sp, #4]
 8004122:	a902      	add	r1, sp, #8
 8004124:	f002 ff9c 	bl	8007060 <_svfiprintf_r>
 8004128:	9b02      	ldr	r3, [sp, #8]
 800412a:	2200      	movs	r2, #0
 800412c:	701a      	strb	r2, [r3, #0]
 800412e:	b01c      	add	sp, #112	; 0x70
 8004130:	f85d eb04 	ldr.w	lr, [sp], #4
 8004134:	b003      	add	sp, #12
 8004136:	4770      	bx	lr
 8004138:	2000001c 	.word	0x2000001c
 800413c:	ffff0208 	.word	0xffff0208

08004140 <siscanf>:
 8004140:	b40e      	push	{r1, r2, r3}
 8004142:	b510      	push	{r4, lr}
 8004144:	b09f      	sub	sp, #124	; 0x7c
 8004146:	ac21      	add	r4, sp, #132	; 0x84
 8004148:	f44f 7101 	mov.w	r1, #516	; 0x204
 800414c:	f854 2b04 	ldr.w	r2, [r4], #4
 8004150:	9201      	str	r2, [sp, #4]
 8004152:	f8ad 101c 	strh.w	r1, [sp, #28]
 8004156:	9004      	str	r0, [sp, #16]
 8004158:	9008      	str	r0, [sp, #32]
 800415a:	f7fc f84b 	bl	80001f4 <strlen>
 800415e:	4b0c      	ldr	r3, [pc, #48]	; (8004190 <siscanf+0x50>)
 8004160:	9005      	str	r0, [sp, #20]
 8004162:	9009      	str	r0, [sp, #36]	; 0x24
 8004164:	930d      	str	r3, [sp, #52]	; 0x34
 8004166:	480b      	ldr	r0, [pc, #44]	; (8004194 <siscanf+0x54>)
 8004168:	9a01      	ldr	r2, [sp, #4]
 800416a:	6800      	ldr	r0, [r0, #0]
 800416c:	9403      	str	r4, [sp, #12]
 800416e:	2300      	movs	r3, #0
 8004170:	9311      	str	r3, [sp, #68]	; 0x44
 8004172:	9316      	str	r3, [sp, #88]	; 0x58
 8004174:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004178:	f8ad 301e 	strh.w	r3, [sp, #30]
 800417c:	a904      	add	r1, sp, #16
 800417e:	4623      	mov	r3, r4
 8004180:	f003 f8c8 	bl	8007314 <__ssvfiscanf_r>
 8004184:	b01f      	add	sp, #124	; 0x7c
 8004186:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800418a:	b003      	add	sp, #12
 800418c:	4770      	bx	lr
 800418e:	bf00      	nop
 8004190:	080041bb 	.word	0x080041bb
 8004194:	2000001c 	.word	0x2000001c

08004198 <__sread>:
 8004198:	b510      	push	{r4, lr}
 800419a:	460c      	mov	r4, r1
 800419c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80041a0:	f003 fb82 	bl	80078a8 <_read_r>
 80041a4:	2800      	cmp	r0, #0
 80041a6:	bfab      	itete	ge
 80041a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80041aa:	89a3      	ldrhlt	r3, [r4, #12]
 80041ac:	181b      	addge	r3, r3, r0
 80041ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80041b2:	bfac      	ite	ge
 80041b4:	6563      	strge	r3, [r4, #84]	; 0x54
 80041b6:	81a3      	strhlt	r3, [r4, #12]
 80041b8:	bd10      	pop	{r4, pc}

080041ba <__seofread>:
 80041ba:	2000      	movs	r0, #0
 80041bc:	4770      	bx	lr

080041be <__swrite>:
 80041be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80041c2:	461f      	mov	r7, r3
 80041c4:	898b      	ldrh	r3, [r1, #12]
 80041c6:	05db      	lsls	r3, r3, #23
 80041c8:	4605      	mov	r5, r0
 80041ca:	460c      	mov	r4, r1
 80041cc:	4616      	mov	r6, r2
 80041ce:	d505      	bpl.n	80041dc <__swrite+0x1e>
 80041d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80041d4:	2302      	movs	r3, #2
 80041d6:	2200      	movs	r2, #0
 80041d8:	f002 f8f4 	bl	80063c4 <_lseek_r>
 80041dc:	89a3      	ldrh	r3, [r4, #12]
 80041de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80041e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80041e6:	81a3      	strh	r3, [r4, #12]
 80041e8:	4632      	mov	r2, r6
 80041ea:	463b      	mov	r3, r7
 80041ec:	4628      	mov	r0, r5
 80041ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80041f2:	f000 bed5 	b.w	8004fa0 <_write_r>

080041f6 <__sseek>:
 80041f6:	b510      	push	{r4, lr}
 80041f8:	460c      	mov	r4, r1
 80041fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80041fe:	f002 f8e1 	bl	80063c4 <_lseek_r>
 8004202:	1c43      	adds	r3, r0, #1
 8004204:	89a3      	ldrh	r3, [r4, #12]
 8004206:	bf15      	itete	ne
 8004208:	6560      	strne	r0, [r4, #84]	; 0x54
 800420a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800420e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004212:	81a3      	strheq	r3, [r4, #12]
 8004214:	bf18      	it	ne
 8004216:	81a3      	strhne	r3, [r4, #12]
 8004218:	bd10      	pop	{r4, pc}

0800421a <__sclose>:
 800421a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800421e:	f000 bed1 	b.w	8004fc4 <_close_r>

08004222 <strncpy>:
 8004222:	b510      	push	{r4, lr}
 8004224:	3901      	subs	r1, #1
 8004226:	4603      	mov	r3, r0
 8004228:	b132      	cbz	r2, 8004238 <strncpy+0x16>
 800422a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800422e:	f803 4b01 	strb.w	r4, [r3], #1
 8004232:	3a01      	subs	r2, #1
 8004234:	2c00      	cmp	r4, #0
 8004236:	d1f7      	bne.n	8004228 <strncpy+0x6>
 8004238:	441a      	add	r2, r3
 800423a:	2100      	movs	r1, #0
 800423c:	4293      	cmp	r3, r2
 800423e:	d100      	bne.n	8004242 <strncpy+0x20>
 8004240:	bd10      	pop	{r4, pc}
 8004242:	f803 1b01 	strb.w	r1, [r3], #1
 8004246:	e7f9      	b.n	800423c <strncpy+0x1a>

08004248 <sulp>:
 8004248:	b570      	push	{r4, r5, r6, lr}
 800424a:	4604      	mov	r4, r0
 800424c:	460d      	mov	r5, r1
 800424e:	ec45 4b10 	vmov	d0, r4, r5
 8004252:	4616      	mov	r6, r2
 8004254:	f002 fc62 	bl	8006b1c <__ulp>
 8004258:	ec51 0b10 	vmov	r0, r1, d0
 800425c:	b17e      	cbz	r6, 800427e <sulp+0x36>
 800425e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8004262:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004266:	2b00      	cmp	r3, #0
 8004268:	dd09      	ble.n	800427e <sulp+0x36>
 800426a:	051b      	lsls	r3, r3, #20
 800426c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8004270:	2400      	movs	r4, #0
 8004272:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8004276:	4622      	mov	r2, r4
 8004278:	462b      	mov	r3, r5
 800427a:	f7fc f9d5 	bl	8000628 <__aeabi_dmul>
 800427e:	bd70      	pop	{r4, r5, r6, pc}

08004280 <_strtod_l>:
 8004280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004284:	ed2d 8b02 	vpush	{d8}
 8004288:	b09d      	sub	sp, #116	; 0x74
 800428a:	461f      	mov	r7, r3
 800428c:	2300      	movs	r3, #0
 800428e:	9318      	str	r3, [sp, #96]	; 0x60
 8004290:	4ba2      	ldr	r3, [pc, #648]	; (800451c <_strtod_l+0x29c>)
 8004292:	9213      	str	r2, [sp, #76]	; 0x4c
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	9305      	str	r3, [sp, #20]
 8004298:	4604      	mov	r4, r0
 800429a:	4618      	mov	r0, r3
 800429c:	4688      	mov	r8, r1
 800429e:	f7fb ffa9 	bl	80001f4 <strlen>
 80042a2:	f04f 0a00 	mov.w	sl, #0
 80042a6:	4605      	mov	r5, r0
 80042a8:	f04f 0b00 	mov.w	fp, #0
 80042ac:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80042b0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80042b2:	781a      	ldrb	r2, [r3, #0]
 80042b4:	2a2b      	cmp	r2, #43	; 0x2b
 80042b6:	d04e      	beq.n	8004356 <_strtod_l+0xd6>
 80042b8:	d83b      	bhi.n	8004332 <_strtod_l+0xb2>
 80042ba:	2a0d      	cmp	r2, #13
 80042bc:	d834      	bhi.n	8004328 <_strtod_l+0xa8>
 80042be:	2a08      	cmp	r2, #8
 80042c0:	d834      	bhi.n	800432c <_strtod_l+0xac>
 80042c2:	2a00      	cmp	r2, #0
 80042c4:	d03e      	beq.n	8004344 <_strtod_l+0xc4>
 80042c6:	2300      	movs	r3, #0
 80042c8:	930a      	str	r3, [sp, #40]	; 0x28
 80042ca:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80042cc:	7833      	ldrb	r3, [r6, #0]
 80042ce:	2b30      	cmp	r3, #48	; 0x30
 80042d0:	f040 80b0 	bne.w	8004434 <_strtod_l+0x1b4>
 80042d4:	7873      	ldrb	r3, [r6, #1]
 80042d6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80042da:	2b58      	cmp	r3, #88	; 0x58
 80042dc:	d168      	bne.n	80043b0 <_strtod_l+0x130>
 80042de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80042e0:	9301      	str	r3, [sp, #4]
 80042e2:	ab18      	add	r3, sp, #96	; 0x60
 80042e4:	9702      	str	r7, [sp, #8]
 80042e6:	9300      	str	r3, [sp, #0]
 80042e8:	4a8d      	ldr	r2, [pc, #564]	; (8004520 <_strtod_l+0x2a0>)
 80042ea:	ab19      	add	r3, sp, #100	; 0x64
 80042ec:	a917      	add	r1, sp, #92	; 0x5c
 80042ee:	4620      	mov	r0, r4
 80042f0:	f001 fd5c 	bl	8005dac <__gethex>
 80042f4:	f010 0707 	ands.w	r7, r0, #7
 80042f8:	4605      	mov	r5, r0
 80042fa:	d005      	beq.n	8004308 <_strtod_l+0x88>
 80042fc:	2f06      	cmp	r7, #6
 80042fe:	d12c      	bne.n	800435a <_strtod_l+0xda>
 8004300:	3601      	adds	r6, #1
 8004302:	2300      	movs	r3, #0
 8004304:	9617      	str	r6, [sp, #92]	; 0x5c
 8004306:	930a      	str	r3, [sp, #40]	; 0x28
 8004308:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800430a:	2b00      	cmp	r3, #0
 800430c:	f040 8590 	bne.w	8004e30 <_strtod_l+0xbb0>
 8004310:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004312:	b1eb      	cbz	r3, 8004350 <_strtod_l+0xd0>
 8004314:	4652      	mov	r2, sl
 8004316:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800431a:	ec43 2b10 	vmov	d0, r2, r3
 800431e:	b01d      	add	sp, #116	; 0x74
 8004320:	ecbd 8b02 	vpop	{d8}
 8004324:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004328:	2a20      	cmp	r2, #32
 800432a:	d1cc      	bne.n	80042c6 <_strtod_l+0x46>
 800432c:	3301      	adds	r3, #1
 800432e:	9317      	str	r3, [sp, #92]	; 0x5c
 8004330:	e7be      	b.n	80042b0 <_strtod_l+0x30>
 8004332:	2a2d      	cmp	r2, #45	; 0x2d
 8004334:	d1c7      	bne.n	80042c6 <_strtod_l+0x46>
 8004336:	2201      	movs	r2, #1
 8004338:	920a      	str	r2, [sp, #40]	; 0x28
 800433a:	1c5a      	adds	r2, r3, #1
 800433c:	9217      	str	r2, [sp, #92]	; 0x5c
 800433e:	785b      	ldrb	r3, [r3, #1]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d1c2      	bne.n	80042ca <_strtod_l+0x4a>
 8004344:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004346:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800434a:	2b00      	cmp	r3, #0
 800434c:	f040 856e 	bne.w	8004e2c <_strtod_l+0xbac>
 8004350:	4652      	mov	r2, sl
 8004352:	465b      	mov	r3, fp
 8004354:	e7e1      	b.n	800431a <_strtod_l+0x9a>
 8004356:	2200      	movs	r2, #0
 8004358:	e7ee      	b.n	8004338 <_strtod_l+0xb8>
 800435a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800435c:	b13a      	cbz	r2, 800436e <_strtod_l+0xee>
 800435e:	2135      	movs	r1, #53	; 0x35
 8004360:	a81a      	add	r0, sp, #104	; 0x68
 8004362:	f002 fce6 	bl	8006d32 <__copybits>
 8004366:	9918      	ldr	r1, [sp, #96]	; 0x60
 8004368:	4620      	mov	r0, r4
 800436a:	f002 f8a5 	bl	80064b8 <_Bfree>
 800436e:	3f01      	subs	r7, #1
 8004370:	2f04      	cmp	r7, #4
 8004372:	d806      	bhi.n	8004382 <_strtod_l+0x102>
 8004374:	e8df f007 	tbb	[pc, r7]
 8004378:	1714030a 	.word	0x1714030a
 800437c:	0a          	.byte	0x0a
 800437d:	00          	.byte	0x00
 800437e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8004382:	0728      	lsls	r0, r5, #28
 8004384:	d5c0      	bpl.n	8004308 <_strtod_l+0x88>
 8004386:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800438a:	e7bd      	b.n	8004308 <_strtod_l+0x88>
 800438c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8004390:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8004392:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004396:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800439a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800439e:	e7f0      	b.n	8004382 <_strtod_l+0x102>
 80043a0:	f8df b180 	ldr.w	fp, [pc, #384]	; 8004524 <_strtod_l+0x2a4>
 80043a4:	e7ed      	b.n	8004382 <_strtod_l+0x102>
 80043a6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80043aa:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80043ae:	e7e8      	b.n	8004382 <_strtod_l+0x102>
 80043b0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80043b2:	1c5a      	adds	r2, r3, #1
 80043b4:	9217      	str	r2, [sp, #92]	; 0x5c
 80043b6:	785b      	ldrb	r3, [r3, #1]
 80043b8:	2b30      	cmp	r3, #48	; 0x30
 80043ba:	d0f9      	beq.n	80043b0 <_strtod_l+0x130>
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d0a3      	beq.n	8004308 <_strtod_l+0x88>
 80043c0:	2301      	movs	r3, #1
 80043c2:	f04f 0900 	mov.w	r9, #0
 80043c6:	9304      	str	r3, [sp, #16]
 80043c8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80043ca:	9308      	str	r3, [sp, #32]
 80043cc:	f8cd 901c 	str.w	r9, [sp, #28]
 80043d0:	464f      	mov	r7, r9
 80043d2:	220a      	movs	r2, #10
 80043d4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80043d6:	7806      	ldrb	r6, [r0, #0]
 80043d8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80043dc:	b2d9      	uxtb	r1, r3
 80043de:	2909      	cmp	r1, #9
 80043e0:	d92a      	bls.n	8004438 <_strtod_l+0x1b8>
 80043e2:	9905      	ldr	r1, [sp, #20]
 80043e4:	462a      	mov	r2, r5
 80043e6:	f003 fac3 	bl	8007970 <strncmp>
 80043ea:	b398      	cbz	r0, 8004454 <_strtod_l+0x1d4>
 80043ec:	2000      	movs	r0, #0
 80043ee:	4632      	mov	r2, r6
 80043f0:	463d      	mov	r5, r7
 80043f2:	9005      	str	r0, [sp, #20]
 80043f4:	4603      	mov	r3, r0
 80043f6:	2a65      	cmp	r2, #101	; 0x65
 80043f8:	d001      	beq.n	80043fe <_strtod_l+0x17e>
 80043fa:	2a45      	cmp	r2, #69	; 0x45
 80043fc:	d118      	bne.n	8004430 <_strtod_l+0x1b0>
 80043fe:	b91d      	cbnz	r5, 8004408 <_strtod_l+0x188>
 8004400:	9a04      	ldr	r2, [sp, #16]
 8004402:	4302      	orrs	r2, r0
 8004404:	d09e      	beq.n	8004344 <_strtod_l+0xc4>
 8004406:	2500      	movs	r5, #0
 8004408:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800440c:	f108 0201 	add.w	r2, r8, #1
 8004410:	9217      	str	r2, [sp, #92]	; 0x5c
 8004412:	f898 2001 	ldrb.w	r2, [r8, #1]
 8004416:	2a2b      	cmp	r2, #43	; 0x2b
 8004418:	d075      	beq.n	8004506 <_strtod_l+0x286>
 800441a:	2a2d      	cmp	r2, #45	; 0x2d
 800441c:	d07b      	beq.n	8004516 <_strtod_l+0x296>
 800441e:	f04f 0c00 	mov.w	ip, #0
 8004422:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8004426:	2909      	cmp	r1, #9
 8004428:	f240 8082 	bls.w	8004530 <_strtod_l+0x2b0>
 800442c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8004430:	2600      	movs	r6, #0
 8004432:	e09d      	b.n	8004570 <_strtod_l+0x2f0>
 8004434:	2300      	movs	r3, #0
 8004436:	e7c4      	b.n	80043c2 <_strtod_l+0x142>
 8004438:	2f08      	cmp	r7, #8
 800443a:	bfd8      	it	le
 800443c:	9907      	ldrle	r1, [sp, #28]
 800443e:	f100 0001 	add.w	r0, r0, #1
 8004442:	bfda      	itte	le
 8004444:	fb02 3301 	mlale	r3, r2, r1, r3
 8004448:	9307      	strle	r3, [sp, #28]
 800444a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800444e:	3701      	adds	r7, #1
 8004450:	9017      	str	r0, [sp, #92]	; 0x5c
 8004452:	e7bf      	b.n	80043d4 <_strtod_l+0x154>
 8004454:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004456:	195a      	adds	r2, r3, r5
 8004458:	9217      	str	r2, [sp, #92]	; 0x5c
 800445a:	5d5a      	ldrb	r2, [r3, r5]
 800445c:	2f00      	cmp	r7, #0
 800445e:	d037      	beq.n	80044d0 <_strtod_l+0x250>
 8004460:	9005      	str	r0, [sp, #20]
 8004462:	463d      	mov	r5, r7
 8004464:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8004468:	2b09      	cmp	r3, #9
 800446a:	d912      	bls.n	8004492 <_strtod_l+0x212>
 800446c:	2301      	movs	r3, #1
 800446e:	e7c2      	b.n	80043f6 <_strtod_l+0x176>
 8004470:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004472:	1c5a      	adds	r2, r3, #1
 8004474:	9217      	str	r2, [sp, #92]	; 0x5c
 8004476:	785a      	ldrb	r2, [r3, #1]
 8004478:	3001      	adds	r0, #1
 800447a:	2a30      	cmp	r2, #48	; 0x30
 800447c:	d0f8      	beq.n	8004470 <_strtod_l+0x1f0>
 800447e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8004482:	2b08      	cmp	r3, #8
 8004484:	f200 84d9 	bhi.w	8004e3a <_strtod_l+0xbba>
 8004488:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800448a:	9005      	str	r0, [sp, #20]
 800448c:	2000      	movs	r0, #0
 800448e:	9308      	str	r3, [sp, #32]
 8004490:	4605      	mov	r5, r0
 8004492:	3a30      	subs	r2, #48	; 0x30
 8004494:	f100 0301 	add.w	r3, r0, #1
 8004498:	d014      	beq.n	80044c4 <_strtod_l+0x244>
 800449a:	9905      	ldr	r1, [sp, #20]
 800449c:	4419      	add	r1, r3
 800449e:	9105      	str	r1, [sp, #20]
 80044a0:	462b      	mov	r3, r5
 80044a2:	eb00 0e05 	add.w	lr, r0, r5
 80044a6:	210a      	movs	r1, #10
 80044a8:	4573      	cmp	r3, lr
 80044aa:	d113      	bne.n	80044d4 <_strtod_l+0x254>
 80044ac:	182b      	adds	r3, r5, r0
 80044ae:	2b08      	cmp	r3, #8
 80044b0:	f105 0501 	add.w	r5, r5, #1
 80044b4:	4405      	add	r5, r0
 80044b6:	dc1c      	bgt.n	80044f2 <_strtod_l+0x272>
 80044b8:	9907      	ldr	r1, [sp, #28]
 80044ba:	230a      	movs	r3, #10
 80044bc:	fb03 2301 	mla	r3, r3, r1, r2
 80044c0:	9307      	str	r3, [sp, #28]
 80044c2:	2300      	movs	r3, #0
 80044c4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80044c6:	1c51      	adds	r1, r2, #1
 80044c8:	9117      	str	r1, [sp, #92]	; 0x5c
 80044ca:	7852      	ldrb	r2, [r2, #1]
 80044cc:	4618      	mov	r0, r3
 80044ce:	e7c9      	b.n	8004464 <_strtod_l+0x1e4>
 80044d0:	4638      	mov	r0, r7
 80044d2:	e7d2      	b.n	800447a <_strtod_l+0x1fa>
 80044d4:	2b08      	cmp	r3, #8
 80044d6:	dc04      	bgt.n	80044e2 <_strtod_l+0x262>
 80044d8:	9e07      	ldr	r6, [sp, #28]
 80044da:	434e      	muls	r6, r1
 80044dc:	9607      	str	r6, [sp, #28]
 80044de:	3301      	adds	r3, #1
 80044e0:	e7e2      	b.n	80044a8 <_strtod_l+0x228>
 80044e2:	f103 0c01 	add.w	ip, r3, #1
 80044e6:	f1bc 0f10 	cmp.w	ip, #16
 80044ea:	bfd8      	it	le
 80044ec:	fb01 f909 	mulle.w	r9, r1, r9
 80044f0:	e7f5      	b.n	80044de <_strtod_l+0x25e>
 80044f2:	2d10      	cmp	r5, #16
 80044f4:	bfdc      	itt	le
 80044f6:	230a      	movle	r3, #10
 80044f8:	fb03 2909 	mlale	r9, r3, r9, r2
 80044fc:	e7e1      	b.n	80044c2 <_strtod_l+0x242>
 80044fe:	2300      	movs	r3, #0
 8004500:	9305      	str	r3, [sp, #20]
 8004502:	2301      	movs	r3, #1
 8004504:	e77c      	b.n	8004400 <_strtod_l+0x180>
 8004506:	f04f 0c00 	mov.w	ip, #0
 800450a:	f108 0202 	add.w	r2, r8, #2
 800450e:	9217      	str	r2, [sp, #92]	; 0x5c
 8004510:	f898 2002 	ldrb.w	r2, [r8, #2]
 8004514:	e785      	b.n	8004422 <_strtod_l+0x1a2>
 8004516:	f04f 0c01 	mov.w	ip, #1
 800451a:	e7f6      	b.n	800450a <_strtod_l+0x28a>
 800451c:	08008cf0 	.word	0x08008cf0
 8004520:	08008aa8 	.word	0x08008aa8
 8004524:	7ff00000 	.word	0x7ff00000
 8004528:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800452a:	1c51      	adds	r1, r2, #1
 800452c:	9117      	str	r1, [sp, #92]	; 0x5c
 800452e:	7852      	ldrb	r2, [r2, #1]
 8004530:	2a30      	cmp	r2, #48	; 0x30
 8004532:	d0f9      	beq.n	8004528 <_strtod_l+0x2a8>
 8004534:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8004538:	2908      	cmp	r1, #8
 800453a:	f63f af79 	bhi.w	8004430 <_strtod_l+0x1b0>
 800453e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8004542:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8004544:	9206      	str	r2, [sp, #24]
 8004546:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8004548:	1c51      	adds	r1, r2, #1
 800454a:	9117      	str	r1, [sp, #92]	; 0x5c
 800454c:	7852      	ldrb	r2, [r2, #1]
 800454e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8004552:	2e09      	cmp	r6, #9
 8004554:	d937      	bls.n	80045c6 <_strtod_l+0x346>
 8004556:	9e06      	ldr	r6, [sp, #24]
 8004558:	1b89      	subs	r1, r1, r6
 800455a:	2908      	cmp	r1, #8
 800455c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8004560:	dc02      	bgt.n	8004568 <_strtod_l+0x2e8>
 8004562:	4576      	cmp	r6, lr
 8004564:	bfa8      	it	ge
 8004566:	4676      	movge	r6, lr
 8004568:	f1bc 0f00 	cmp.w	ip, #0
 800456c:	d000      	beq.n	8004570 <_strtod_l+0x2f0>
 800456e:	4276      	negs	r6, r6
 8004570:	2d00      	cmp	r5, #0
 8004572:	d14d      	bne.n	8004610 <_strtod_l+0x390>
 8004574:	9904      	ldr	r1, [sp, #16]
 8004576:	4301      	orrs	r1, r0
 8004578:	f47f aec6 	bne.w	8004308 <_strtod_l+0x88>
 800457c:	2b00      	cmp	r3, #0
 800457e:	f47f aee1 	bne.w	8004344 <_strtod_l+0xc4>
 8004582:	2a69      	cmp	r2, #105	; 0x69
 8004584:	d027      	beq.n	80045d6 <_strtod_l+0x356>
 8004586:	dc24      	bgt.n	80045d2 <_strtod_l+0x352>
 8004588:	2a49      	cmp	r2, #73	; 0x49
 800458a:	d024      	beq.n	80045d6 <_strtod_l+0x356>
 800458c:	2a4e      	cmp	r2, #78	; 0x4e
 800458e:	f47f aed9 	bne.w	8004344 <_strtod_l+0xc4>
 8004592:	499f      	ldr	r1, [pc, #636]	; (8004810 <_strtod_l+0x590>)
 8004594:	a817      	add	r0, sp, #92	; 0x5c
 8004596:	f001 fe61 	bl	800625c <__match>
 800459a:	2800      	cmp	r0, #0
 800459c:	f43f aed2 	beq.w	8004344 <_strtod_l+0xc4>
 80045a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80045a2:	781b      	ldrb	r3, [r3, #0]
 80045a4:	2b28      	cmp	r3, #40	; 0x28
 80045a6:	d12d      	bne.n	8004604 <_strtod_l+0x384>
 80045a8:	499a      	ldr	r1, [pc, #616]	; (8004814 <_strtod_l+0x594>)
 80045aa:	aa1a      	add	r2, sp, #104	; 0x68
 80045ac:	a817      	add	r0, sp, #92	; 0x5c
 80045ae:	f001 fe69 	bl	8006284 <__hexnan>
 80045b2:	2805      	cmp	r0, #5
 80045b4:	d126      	bne.n	8004604 <_strtod_l+0x384>
 80045b6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80045b8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 80045bc:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80045c0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80045c4:	e6a0      	b.n	8004308 <_strtod_l+0x88>
 80045c6:	210a      	movs	r1, #10
 80045c8:	fb01 2e0e 	mla	lr, r1, lr, r2
 80045cc:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80045d0:	e7b9      	b.n	8004546 <_strtod_l+0x2c6>
 80045d2:	2a6e      	cmp	r2, #110	; 0x6e
 80045d4:	e7db      	b.n	800458e <_strtod_l+0x30e>
 80045d6:	4990      	ldr	r1, [pc, #576]	; (8004818 <_strtod_l+0x598>)
 80045d8:	a817      	add	r0, sp, #92	; 0x5c
 80045da:	f001 fe3f 	bl	800625c <__match>
 80045de:	2800      	cmp	r0, #0
 80045e0:	f43f aeb0 	beq.w	8004344 <_strtod_l+0xc4>
 80045e4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80045e6:	498d      	ldr	r1, [pc, #564]	; (800481c <_strtod_l+0x59c>)
 80045e8:	3b01      	subs	r3, #1
 80045ea:	a817      	add	r0, sp, #92	; 0x5c
 80045ec:	9317      	str	r3, [sp, #92]	; 0x5c
 80045ee:	f001 fe35 	bl	800625c <__match>
 80045f2:	b910      	cbnz	r0, 80045fa <_strtod_l+0x37a>
 80045f4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80045f6:	3301      	adds	r3, #1
 80045f8:	9317      	str	r3, [sp, #92]	; 0x5c
 80045fa:	f8df b230 	ldr.w	fp, [pc, #560]	; 800482c <_strtod_l+0x5ac>
 80045fe:	f04f 0a00 	mov.w	sl, #0
 8004602:	e681      	b.n	8004308 <_strtod_l+0x88>
 8004604:	4886      	ldr	r0, [pc, #536]	; (8004820 <_strtod_l+0x5a0>)
 8004606:	f003 f963 	bl	80078d0 <nan>
 800460a:	ec5b ab10 	vmov	sl, fp, d0
 800460e:	e67b      	b.n	8004308 <_strtod_l+0x88>
 8004610:	9b05      	ldr	r3, [sp, #20]
 8004612:	9807      	ldr	r0, [sp, #28]
 8004614:	1af3      	subs	r3, r6, r3
 8004616:	2f00      	cmp	r7, #0
 8004618:	bf08      	it	eq
 800461a:	462f      	moveq	r7, r5
 800461c:	2d10      	cmp	r5, #16
 800461e:	9306      	str	r3, [sp, #24]
 8004620:	46a8      	mov	r8, r5
 8004622:	bfa8      	it	ge
 8004624:	f04f 0810 	movge.w	r8, #16
 8004628:	f7fb ff84 	bl	8000534 <__aeabi_ui2d>
 800462c:	2d09      	cmp	r5, #9
 800462e:	4682      	mov	sl, r0
 8004630:	468b      	mov	fp, r1
 8004632:	dd13      	ble.n	800465c <_strtod_l+0x3dc>
 8004634:	4b7b      	ldr	r3, [pc, #492]	; (8004824 <_strtod_l+0x5a4>)
 8004636:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800463a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800463e:	f7fb fff3 	bl	8000628 <__aeabi_dmul>
 8004642:	4682      	mov	sl, r0
 8004644:	4648      	mov	r0, r9
 8004646:	468b      	mov	fp, r1
 8004648:	f7fb ff74 	bl	8000534 <__aeabi_ui2d>
 800464c:	4602      	mov	r2, r0
 800464e:	460b      	mov	r3, r1
 8004650:	4650      	mov	r0, sl
 8004652:	4659      	mov	r1, fp
 8004654:	f7fb fe32 	bl	80002bc <__adddf3>
 8004658:	4682      	mov	sl, r0
 800465a:	468b      	mov	fp, r1
 800465c:	2d0f      	cmp	r5, #15
 800465e:	dc38      	bgt.n	80046d2 <_strtod_l+0x452>
 8004660:	9b06      	ldr	r3, [sp, #24]
 8004662:	2b00      	cmp	r3, #0
 8004664:	f43f ae50 	beq.w	8004308 <_strtod_l+0x88>
 8004668:	dd24      	ble.n	80046b4 <_strtod_l+0x434>
 800466a:	2b16      	cmp	r3, #22
 800466c:	dc0b      	bgt.n	8004686 <_strtod_l+0x406>
 800466e:	496d      	ldr	r1, [pc, #436]	; (8004824 <_strtod_l+0x5a4>)
 8004670:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8004674:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004678:	4652      	mov	r2, sl
 800467a:	465b      	mov	r3, fp
 800467c:	f7fb ffd4 	bl	8000628 <__aeabi_dmul>
 8004680:	4682      	mov	sl, r0
 8004682:	468b      	mov	fp, r1
 8004684:	e640      	b.n	8004308 <_strtod_l+0x88>
 8004686:	9a06      	ldr	r2, [sp, #24]
 8004688:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800468c:	4293      	cmp	r3, r2
 800468e:	db20      	blt.n	80046d2 <_strtod_l+0x452>
 8004690:	4c64      	ldr	r4, [pc, #400]	; (8004824 <_strtod_l+0x5a4>)
 8004692:	f1c5 050f 	rsb	r5, r5, #15
 8004696:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800469a:	4652      	mov	r2, sl
 800469c:	465b      	mov	r3, fp
 800469e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80046a2:	f7fb ffc1 	bl	8000628 <__aeabi_dmul>
 80046a6:	9b06      	ldr	r3, [sp, #24]
 80046a8:	1b5d      	subs	r5, r3, r5
 80046aa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80046ae:	e9d4 2300 	ldrd	r2, r3, [r4]
 80046b2:	e7e3      	b.n	800467c <_strtod_l+0x3fc>
 80046b4:	9b06      	ldr	r3, [sp, #24]
 80046b6:	3316      	adds	r3, #22
 80046b8:	db0b      	blt.n	80046d2 <_strtod_l+0x452>
 80046ba:	9b05      	ldr	r3, [sp, #20]
 80046bc:	1b9e      	subs	r6, r3, r6
 80046be:	4b59      	ldr	r3, [pc, #356]	; (8004824 <_strtod_l+0x5a4>)
 80046c0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80046c4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80046c8:	4650      	mov	r0, sl
 80046ca:	4659      	mov	r1, fp
 80046cc:	f7fc f8d6 	bl	800087c <__aeabi_ddiv>
 80046d0:	e7d6      	b.n	8004680 <_strtod_l+0x400>
 80046d2:	9b06      	ldr	r3, [sp, #24]
 80046d4:	eba5 0808 	sub.w	r8, r5, r8
 80046d8:	4498      	add	r8, r3
 80046da:	f1b8 0f00 	cmp.w	r8, #0
 80046de:	dd74      	ble.n	80047ca <_strtod_l+0x54a>
 80046e0:	f018 030f 	ands.w	r3, r8, #15
 80046e4:	d00a      	beq.n	80046fc <_strtod_l+0x47c>
 80046e6:	494f      	ldr	r1, [pc, #316]	; (8004824 <_strtod_l+0x5a4>)
 80046e8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80046ec:	4652      	mov	r2, sl
 80046ee:	465b      	mov	r3, fp
 80046f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80046f4:	f7fb ff98 	bl	8000628 <__aeabi_dmul>
 80046f8:	4682      	mov	sl, r0
 80046fa:	468b      	mov	fp, r1
 80046fc:	f038 080f 	bics.w	r8, r8, #15
 8004700:	d04f      	beq.n	80047a2 <_strtod_l+0x522>
 8004702:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8004706:	dd22      	ble.n	800474e <_strtod_l+0x4ce>
 8004708:	2500      	movs	r5, #0
 800470a:	462e      	mov	r6, r5
 800470c:	9507      	str	r5, [sp, #28]
 800470e:	9505      	str	r5, [sp, #20]
 8004710:	2322      	movs	r3, #34	; 0x22
 8004712:	f8df b118 	ldr.w	fp, [pc, #280]	; 800482c <_strtod_l+0x5ac>
 8004716:	6023      	str	r3, [r4, #0]
 8004718:	f04f 0a00 	mov.w	sl, #0
 800471c:	9b07      	ldr	r3, [sp, #28]
 800471e:	2b00      	cmp	r3, #0
 8004720:	f43f adf2 	beq.w	8004308 <_strtod_l+0x88>
 8004724:	9918      	ldr	r1, [sp, #96]	; 0x60
 8004726:	4620      	mov	r0, r4
 8004728:	f001 fec6 	bl	80064b8 <_Bfree>
 800472c:	9905      	ldr	r1, [sp, #20]
 800472e:	4620      	mov	r0, r4
 8004730:	f001 fec2 	bl	80064b8 <_Bfree>
 8004734:	4631      	mov	r1, r6
 8004736:	4620      	mov	r0, r4
 8004738:	f001 febe 	bl	80064b8 <_Bfree>
 800473c:	9907      	ldr	r1, [sp, #28]
 800473e:	4620      	mov	r0, r4
 8004740:	f001 feba 	bl	80064b8 <_Bfree>
 8004744:	4629      	mov	r1, r5
 8004746:	4620      	mov	r0, r4
 8004748:	f001 feb6 	bl	80064b8 <_Bfree>
 800474c:	e5dc      	b.n	8004308 <_strtod_l+0x88>
 800474e:	4b36      	ldr	r3, [pc, #216]	; (8004828 <_strtod_l+0x5a8>)
 8004750:	9304      	str	r3, [sp, #16]
 8004752:	2300      	movs	r3, #0
 8004754:	ea4f 1828 	mov.w	r8, r8, asr #4
 8004758:	4650      	mov	r0, sl
 800475a:	4659      	mov	r1, fp
 800475c:	4699      	mov	r9, r3
 800475e:	f1b8 0f01 	cmp.w	r8, #1
 8004762:	dc21      	bgt.n	80047a8 <_strtod_l+0x528>
 8004764:	b10b      	cbz	r3, 800476a <_strtod_l+0x4ea>
 8004766:	4682      	mov	sl, r0
 8004768:	468b      	mov	fp, r1
 800476a:	4b2f      	ldr	r3, [pc, #188]	; (8004828 <_strtod_l+0x5a8>)
 800476c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8004770:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8004774:	4652      	mov	r2, sl
 8004776:	465b      	mov	r3, fp
 8004778:	e9d9 0100 	ldrd	r0, r1, [r9]
 800477c:	f7fb ff54 	bl	8000628 <__aeabi_dmul>
 8004780:	4b2a      	ldr	r3, [pc, #168]	; (800482c <_strtod_l+0x5ac>)
 8004782:	460a      	mov	r2, r1
 8004784:	400b      	ands	r3, r1
 8004786:	492a      	ldr	r1, [pc, #168]	; (8004830 <_strtod_l+0x5b0>)
 8004788:	428b      	cmp	r3, r1
 800478a:	4682      	mov	sl, r0
 800478c:	d8bc      	bhi.n	8004708 <_strtod_l+0x488>
 800478e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8004792:	428b      	cmp	r3, r1
 8004794:	bf86      	itte	hi
 8004796:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8004834 <_strtod_l+0x5b4>
 800479a:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 800479e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80047a2:	2300      	movs	r3, #0
 80047a4:	9304      	str	r3, [sp, #16]
 80047a6:	e084      	b.n	80048b2 <_strtod_l+0x632>
 80047a8:	f018 0f01 	tst.w	r8, #1
 80047ac:	d005      	beq.n	80047ba <_strtod_l+0x53a>
 80047ae:	9b04      	ldr	r3, [sp, #16]
 80047b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047b4:	f7fb ff38 	bl	8000628 <__aeabi_dmul>
 80047b8:	2301      	movs	r3, #1
 80047ba:	9a04      	ldr	r2, [sp, #16]
 80047bc:	3208      	adds	r2, #8
 80047be:	f109 0901 	add.w	r9, r9, #1
 80047c2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80047c6:	9204      	str	r2, [sp, #16]
 80047c8:	e7c9      	b.n	800475e <_strtod_l+0x4de>
 80047ca:	d0ea      	beq.n	80047a2 <_strtod_l+0x522>
 80047cc:	f1c8 0800 	rsb	r8, r8, #0
 80047d0:	f018 020f 	ands.w	r2, r8, #15
 80047d4:	d00a      	beq.n	80047ec <_strtod_l+0x56c>
 80047d6:	4b13      	ldr	r3, [pc, #76]	; (8004824 <_strtod_l+0x5a4>)
 80047d8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80047dc:	4650      	mov	r0, sl
 80047de:	4659      	mov	r1, fp
 80047e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047e4:	f7fc f84a 	bl	800087c <__aeabi_ddiv>
 80047e8:	4682      	mov	sl, r0
 80047ea:	468b      	mov	fp, r1
 80047ec:	ea5f 1828 	movs.w	r8, r8, asr #4
 80047f0:	d0d7      	beq.n	80047a2 <_strtod_l+0x522>
 80047f2:	f1b8 0f1f 	cmp.w	r8, #31
 80047f6:	dd1f      	ble.n	8004838 <_strtod_l+0x5b8>
 80047f8:	2500      	movs	r5, #0
 80047fa:	462e      	mov	r6, r5
 80047fc:	9507      	str	r5, [sp, #28]
 80047fe:	9505      	str	r5, [sp, #20]
 8004800:	2322      	movs	r3, #34	; 0x22
 8004802:	f04f 0a00 	mov.w	sl, #0
 8004806:	f04f 0b00 	mov.w	fp, #0
 800480a:	6023      	str	r3, [r4, #0]
 800480c:	e786      	b.n	800471c <_strtod_l+0x49c>
 800480e:	bf00      	nop
 8004810:	08008a7d 	.word	0x08008a7d
 8004814:	08008abc 	.word	0x08008abc
 8004818:	08008a75 	.word	0x08008a75
 800481c:	08008bfc 	.word	0x08008bfc
 8004820:	08008ec3 	.word	0x08008ec3
 8004824:	08008d88 	.word	0x08008d88
 8004828:	08008d60 	.word	0x08008d60
 800482c:	7ff00000 	.word	0x7ff00000
 8004830:	7ca00000 	.word	0x7ca00000
 8004834:	7fefffff 	.word	0x7fefffff
 8004838:	f018 0310 	ands.w	r3, r8, #16
 800483c:	bf18      	it	ne
 800483e:	236a      	movne	r3, #106	; 0x6a
 8004840:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8004bf0 <_strtod_l+0x970>
 8004844:	9304      	str	r3, [sp, #16]
 8004846:	4650      	mov	r0, sl
 8004848:	4659      	mov	r1, fp
 800484a:	2300      	movs	r3, #0
 800484c:	f018 0f01 	tst.w	r8, #1
 8004850:	d004      	beq.n	800485c <_strtod_l+0x5dc>
 8004852:	e9d9 2300 	ldrd	r2, r3, [r9]
 8004856:	f7fb fee7 	bl	8000628 <__aeabi_dmul>
 800485a:	2301      	movs	r3, #1
 800485c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8004860:	f109 0908 	add.w	r9, r9, #8
 8004864:	d1f2      	bne.n	800484c <_strtod_l+0x5cc>
 8004866:	b10b      	cbz	r3, 800486c <_strtod_l+0x5ec>
 8004868:	4682      	mov	sl, r0
 800486a:	468b      	mov	fp, r1
 800486c:	9b04      	ldr	r3, [sp, #16]
 800486e:	b1c3      	cbz	r3, 80048a2 <_strtod_l+0x622>
 8004870:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8004874:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8004878:	2b00      	cmp	r3, #0
 800487a:	4659      	mov	r1, fp
 800487c:	dd11      	ble.n	80048a2 <_strtod_l+0x622>
 800487e:	2b1f      	cmp	r3, #31
 8004880:	f340 8124 	ble.w	8004acc <_strtod_l+0x84c>
 8004884:	2b34      	cmp	r3, #52	; 0x34
 8004886:	bfde      	ittt	le
 8004888:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800488c:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 8004890:	fa03 f202 	lslle.w	r2, r3, r2
 8004894:	f04f 0a00 	mov.w	sl, #0
 8004898:	bfcc      	ite	gt
 800489a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800489e:	ea02 0b01 	andle.w	fp, r2, r1
 80048a2:	2200      	movs	r2, #0
 80048a4:	2300      	movs	r3, #0
 80048a6:	4650      	mov	r0, sl
 80048a8:	4659      	mov	r1, fp
 80048aa:	f7fc f925 	bl	8000af8 <__aeabi_dcmpeq>
 80048ae:	2800      	cmp	r0, #0
 80048b0:	d1a2      	bne.n	80047f8 <_strtod_l+0x578>
 80048b2:	9b07      	ldr	r3, [sp, #28]
 80048b4:	9300      	str	r3, [sp, #0]
 80048b6:	9908      	ldr	r1, [sp, #32]
 80048b8:	462b      	mov	r3, r5
 80048ba:	463a      	mov	r2, r7
 80048bc:	4620      	mov	r0, r4
 80048be:	f001 fe63 	bl	8006588 <__s2b>
 80048c2:	9007      	str	r0, [sp, #28]
 80048c4:	2800      	cmp	r0, #0
 80048c6:	f43f af1f 	beq.w	8004708 <_strtod_l+0x488>
 80048ca:	9b05      	ldr	r3, [sp, #20]
 80048cc:	1b9e      	subs	r6, r3, r6
 80048ce:	9b06      	ldr	r3, [sp, #24]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	bfb4      	ite	lt
 80048d4:	4633      	movlt	r3, r6
 80048d6:	2300      	movge	r3, #0
 80048d8:	930c      	str	r3, [sp, #48]	; 0x30
 80048da:	9b06      	ldr	r3, [sp, #24]
 80048dc:	2500      	movs	r5, #0
 80048de:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80048e2:	9312      	str	r3, [sp, #72]	; 0x48
 80048e4:	462e      	mov	r6, r5
 80048e6:	9b07      	ldr	r3, [sp, #28]
 80048e8:	4620      	mov	r0, r4
 80048ea:	6859      	ldr	r1, [r3, #4]
 80048ec:	f001 fda4 	bl	8006438 <_Balloc>
 80048f0:	9005      	str	r0, [sp, #20]
 80048f2:	2800      	cmp	r0, #0
 80048f4:	f43f af0c 	beq.w	8004710 <_strtod_l+0x490>
 80048f8:	9b07      	ldr	r3, [sp, #28]
 80048fa:	691a      	ldr	r2, [r3, #16]
 80048fc:	3202      	adds	r2, #2
 80048fe:	f103 010c 	add.w	r1, r3, #12
 8004902:	0092      	lsls	r2, r2, #2
 8004904:	300c      	adds	r0, #12
 8004906:	f001 fd89 	bl	800641c <memcpy>
 800490a:	ec4b ab10 	vmov	d0, sl, fp
 800490e:	aa1a      	add	r2, sp, #104	; 0x68
 8004910:	a919      	add	r1, sp, #100	; 0x64
 8004912:	4620      	mov	r0, r4
 8004914:	f002 f97e 	bl	8006c14 <__d2b>
 8004918:	ec4b ab18 	vmov	d8, sl, fp
 800491c:	9018      	str	r0, [sp, #96]	; 0x60
 800491e:	2800      	cmp	r0, #0
 8004920:	f43f aef6 	beq.w	8004710 <_strtod_l+0x490>
 8004924:	2101      	movs	r1, #1
 8004926:	4620      	mov	r0, r4
 8004928:	f001 fec8 	bl	80066bc <__i2b>
 800492c:	4606      	mov	r6, r0
 800492e:	2800      	cmp	r0, #0
 8004930:	f43f aeee 	beq.w	8004710 <_strtod_l+0x490>
 8004934:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004936:	9904      	ldr	r1, [sp, #16]
 8004938:	2b00      	cmp	r3, #0
 800493a:	bfab      	itete	ge
 800493c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800493e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8004940:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8004942:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8004946:	bfac      	ite	ge
 8004948:	eb03 0902 	addge.w	r9, r3, r2
 800494c:	1ad7      	sublt	r7, r2, r3
 800494e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8004950:	eba3 0801 	sub.w	r8, r3, r1
 8004954:	4490      	add	r8, r2
 8004956:	4ba1      	ldr	r3, [pc, #644]	; (8004bdc <_strtod_l+0x95c>)
 8004958:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800495c:	4598      	cmp	r8, r3
 800495e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8004962:	f280 80c7 	bge.w	8004af4 <_strtod_l+0x874>
 8004966:	eba3 0308 	sub.w	r3, r3, r8
 800496a:	2b1f      	cmp	r3, #31
 800496c:	eba2 0203 	sub.w	r2, r2, r3
 8004970:	f04f 0101 	mov.w	r1, #1
 8004974:	f300 80b1 	bgt.w	8004ada <_strtod_l+0x85a>
 8004978:	fa01 f303 	lsl.w	r3, r1, r3
 800497c:	930d      	str	r3, [sp, #52]	; 0x34
 800497e:	2300      	movs	r3, #0
 8004980:	9308      	str	r3, [sp, #32]
 8004982:	eb09 0802 	add.w	r8, r9, r2
 8004986:	9b04      	ldr	r3, [sp, #16]
 8004988:	45c1      	cmp	r9, r8
 800498a:	4417      	add	r7, r2
 800498c:	441f      	add	r7, r3
 800498e:	464b      	mov	r3, r9
 8004990:	bfa8      	it	ge
 8004992:	4643      	movge	r3, r8
 8004994:	42bb      	cmp	r3, r7
 8004996:	bfa8      	it	ge
 8004998:	463b      	movge	r3, r7
 800499a:	2b00      	cmp	r3, #0
 800499c:	bfc2      	ittt	gt
 800499e:	eba8 0803 	subgt.w	r8, r8, r3
 80049a2:	1aff      	subgt	r7, r7, r3
 80049a4:	eba9 0903 	subgt.w	r9, r9, r3
 80049a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	dd17      	ble.n	80049de <_strtod_l+0x75e>
 80049ae:	4631      	mov	r1, r6
 80049b0:	461a      	mov	r2, r3
 80049b2:	4620      	mov	r0, r4
 80049b4:	f001 ff42 	bl	800683c <__pow5mult>
 80049b8:	4606      	mov	r6, r0
 80049ba:	2800      	cmp	r0, #0
 80049bc:	f43f aea8 	beq.w	8004710 <_strtod_l+0x490>
 80049c0:	4601      	mov	r1, r0
 80049c2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80049c4:	4620      	mov	r0, r4
 80049c6:	f001 fe8f 	bl	80066e8 <__multiply>
 80049ca:	900b      	str	r0, [sp, #44]	; 0x2c
 80049cc:	2800      	cmp	r0, #0
 80049ce:	f43f ae9f 	beq.w	8004710 <_strtod_l+0x490>
 80049d2:	9918      	ldr	r1, [sp, #96]	; 0x60
 80049d4:	4620      	mov	r0, r4
 80049d6:	f001 fd6f 	bl	80064b8 <_Bfree>
 80049da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80049dc:	9318      	str	r3, [sp, #96]	; 0x60
 80049de:	f1b8 0f00 	cmp.w	r8, #0
 80049e2:	f300 808c 	bgt.w	8004afe <_strtod_l+0x87e>
 80049e6:	9b06      	ldr	r3, [sp, #24]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	dd08      	ble.n	80049fe <_strtod_l+0x77e>
 80049ec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80049ee:	9905      	ldr	r1, [sp, #20]
 80049f0:	4620      	mov	r0, r4
 80049f2:	f001 ff23 	bl	800683c <__pow5mult>
 80049f6:	9005      	str	r0, [sp, #20]
 80049f8:	2800      	cmp	r0, #0
 80049fa:	f43f ae89 	beq.w	8004710 <_strtod_l+0x490>
 80049fe:	2f00      	cmp	r7, #0
 8004a00:	dd08      	ble.n	8004a14 <_strtod_l+0x794>
 8004a02:	9905      	ldr	r1, [sp, #20]
 8004a04:	463a      	mov	r2, r7
 8004a06:	4620      	mov	r0, r4
 8004a08:	f001 ff72 	bl	80068f0 <__lshift>
 8004a0c:	9005      	str	r0, [sp, #20]
 8004a0e:	2800      	cmp	r0, #0
 8004a10:	f43f ae7e 	beq.w	8004710 <_strtod_l+0x490>
 8004a14:	f1b9 0f00 	cmp.w	r9, #0
 8004a18:	dd08      	ble.n	8004a2c <_strtod_l+0x7ac>
 8004a1a:	4631      	mov	r1, r6
 8004a1c:	464a      	mov	r2, r9
 8004a1e:	4620      	mov	r0, r4
 8004a20:	f001 ff66 	bl	80068f0 <__lshift>
 8004a24:	4606      	mov	r6, r0
 8004a26:	2800      	cmp	r0, #0
 8004a28:	f43f ae72 	beq.w	8004710 <_strtod_l+0x490>
 8004a2c:	9a05      	ldr	r2, [sp, #20]
 8004a2e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8004a30:	4620      	mov	r0, r4
 8004a32:	f001 ffe9 	bl	8006a08 <__mdiff>
 8004a36:	4605      	mov	r5, r0
 8004a38:	2800      	cmp	r0, #0
 8004a3a:	f43f ae69 	beq.w	8004710 <_strtod_l+0x490>
 8004a3e:	68c3      	ldr	r3, [r0, #12]
 8004a40:	930b      	str	r3, [sp, #44]	; 0x2c
 8004a42:	2300      	movs	r3, #0
 8004a44:	60c3      	str	r3, [r0, #12]
 8004a46:	4631      	mov	r1, r6
 8004a48:	f001 ffc2 	bl	80069d0 <__mcmp>
 8004a4c:	2800      	cmp	r0, #0
 8004a4e:	da60      	bge.n	8004b12 <_strtod_l+0x892>
 8004a50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004a52:	ea53 030a 	orrs.w	r3, r3, sl
 8004a56:	f040 8082 	bne.w	8004b5e <_strtod_l+0x8de>
 8004a5a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d17d      	bne.n	8004b5e <_strtod_l+0x8de>
 8004a62:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8004a66:	0d1b      	lsrs	r3, r3, #20
 8004a68:	051b      	lsls	r3, r3, #20
 8004a6a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8004a6e:	d976      	bls.n	8004b5e <_strtod_l+0x8de>
 8004a70:	696b      	ldr	r3, [r5, #20]
 8004a72:	b913      	cbnz	r3, 8004a7a <_strtod_l+0x7fa>
 8004a74:	692b      	ldr	r3, [r5, #16]
 8004a76:	2b01      	cmp	r3, #1
 8004a78:	dd71      	ble.n	8004b5e <_strtod_l+0x8de>
 8004a7a:	4629      	mov	r1, r5
 8004a7c:	2201      	movs	r2, #1
 8004a7e:	4620      	mov	r0, r4
 8004a80:	f001 ff36 	bl	80068f0 <__lshift>
 8004a84:	4631      	mov	r1, r6
 8004a86:	4605      	mov	r5, r0
 8004a88:	f001 ffa2 	bl	80069d0 <__mcmp>
 8004a8c:	2800      	cmp	r0, #0
 8004a8e:	dd66      	ble.n	8004b5e <_strtod_l+0x8de>
 8004a90:	9904      	ldr	r1, [sp, #16]
 8004a92:	4a53      	ldr	r2, [pc, #332]	; (8004be0 <_strtod_l+0x960>)
 8004a94:	465b      	mov	r3, fp
 8004a96:	2900      	cmp	r1, #0
 8004a98:	f000 8081 	beq.w	8004b9e <_strtod_l+0x91e>
 8004a9c:	ea02 010b 	and.w	r1, r2, fp
 8004aa0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8004aa4:	dc7b      	bgt.n	8004b9e <_strtod_l+0x91e>
 8004aa6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8004aaa:	f77f aea9 	ble.w	8004800 <_strtod_l+0x580>
 8004aae:	4b4d      	ldr	r3, [pc, #308]	; (8004be4 <_strtod_l+0x964>)
 8004ab0:	4650      	mov	r0, sl
 8004ab2:	4659      	mov	r1, fp
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	f7fb fdb7 	bl	8000628 <__aeabi_dmul>
 8004aba:	460b      	mov	r3, r1
 8004abc:	4303      	orrs	r3, r0
 8004abe:	bf08      	it	eq
 8004ac0:	2322      	moveq	r3, #34	; 0x22
 8004ac2:	4682      	mov	sl, r0
 8004ac4:	468b      	mov	fp, r1
 8004ac6:	bf08      	it	eq
 8004ac8:	6023      	streq	r3, [r4, #0]
 8004aca:	e62b      	b.n	8004724 <_strtod_l+0x4a4>
 8004acc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ad4:	ea03 0a0a 	and.w	sl, r3, sl
 8004ad8:	e6e3      	b.n	80048a2 <_strtod_l+0x622>
 8004ada:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8004ade:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8004ae2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8004ae6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8004aea:	fa01 f308 	lsl.w	r3, r1, r8
 8004aee:	9308      	str	r3, [sp, #32]
 8004af0:	910d      	str	r1, [sp, #52]	; 0x34
 8004af2:	e746      	b.n	8004982 <_strtod_l+0x702>
 8004af4:	2300      	movs	r3, #0
 8004af6:	9308      	str	r3, [sp, #32]
 8004af8:	2301      	movs	r3, #1
 8004afa:	930d      	str	r3, [sp, #52]	; 0x34
 8004afc:	e741      	b.n	8004982 <_strtod_l+0x702>
 8004afe:	9918      	ldr	r1, [sp, #96]	; 0x60
 8004b00:	4642      	mov	r2, r8
 8004b02:	4620      	mov	r0, r4
 8004b04:	f001 fef4 	bl	80068f0 <__lshift>
 8004b08:	9018      	str	r0, [sp, #96]	; 0x60
 8004b0a:	2800      	cmp	r0, #0
 8004b0c:	f47f af6b 	bne.w	80049e6 <_strtod_l+0x766>
 8004b10:	e5fe      	b.n	8004710 <_strtod_l+0x490>
 8004b12:	465f      	mov	r7, fp
 8004b14:	d16e      	bne.n	8004bf4 <_strtod_l+0x974>
 8004b16:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004b18:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004b1c:	b342      	cbz	r2, 8004b70 <_strtod_l+0x8f0>
 8004b1e:	4a32      	ldr	r2, [pc, #200]	; (8004be8 <_strtod_l+0x968>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d128      	bne.n	8004b76 <_strtod_l+0x8f6>
 8004b24:	9b04      	ldr	r3, [sp, #16]
 8004b26:	4651      	mov	r1, sl
 8004b28:	b1eb      	cbz	r3, 8004b66 <_strtod_l+0x8e6>
 8004b2a:	4b2d      	ldr	r3, [pc, #180]	; (8004be0 <_strtod_l+0x960>)
 8004b2c:	403b      	ands	r3, r7
 8004b2e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8004b32:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004b36:	d819      	bhi.n	8004b6c <_strtod_l+0x8ec>
 8004b38:	0d1b      	lsrs	r3, r3, #20
 8004b3a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b42:	4299      	cmp	r1, r3
 8004b44:	d117      	bne.n	8004b76 <_strtod_l+0x8f6>
 8004b46:	4b29      	ldr	r3, [pc, #164]	; (8004bec <_strtod_l+0x96c>)
 8004b48:	429f      	cmp	r7, r3
 8004b4a:	d102      	bne.n	8004b52 <_strtod_l+0x8d2>
 8004b4c:	3101      	adds	r1, #1
 8004b4e:	f43f addf 	beq.w	8004710 <_strtod_l+0x490>
 8004b52:	4b23      	ldr	r3, [pc, #140]	; (8004be0 <_strtod_l+0x960>)
 8004b54:	403b      	ands	r3, r7
 8004b56:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8004b5a:	f04f 0a00 	mov.w	sl, #0
 8004b5e:	9b04      	ldr	r3, [sp, #16]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d1a4      	bne.n	8004aae <_strtod_l+0x82e>
 8004b64:	e5de      	b.n	8004724 <_strtod_l+0x4a4>
 8004b66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004b6a:	e7ea      	b.n	8004b42 <_strtod_l+0x8c2>
 8004b6c:	4613      	mov	r3, r2
 8004b6e:	e7e8      	b.n	8004b42 <_strtod_l+0x8c2>
 8004b70:	ea53 030a 	orrs.w	r3, r3, sl
 8004b74:	d08c      	beq.n	8004a90 <_strtod_l+0x810>
 8004b76:	9b08      	ldr	r3, [sp, #32]
 8004b78:	b1db      	cbz	r3, 8004bb2 <_strtod_l+0x932>
 8004b7a:	423b      	tst	r3, r7
 8004b7c:	d0ef      	beq.n	8004b5e <_strtod_l+0x8de>
 8004b7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004b80:	9a04      	ldr	r2, [sp, #16]
 8004b82:	4650      	mov	r0, sl
 8004b84:	4659      	mov	r1, fp
 8004b86:	b1c3      	cbz	r3, 8004bba <_strtod_l+0x93a>
 8004b88:	f7ff fb5e 	bl	8004248 <sulp>
 8004b8c:	4602      	mov	r2, r0
 8004b8e:	460b      	mov	r3, r1
 8004b90:	ec51 0b18 	vmov	r0, r1, d8
 8004b94:	f7fb fb92 	bl	80002bc <__adddf3>
 8004b98:	4682      	mov	sl, r0
 8004b9a:	468b      	mov	fp, r1
 8004b9c:	e7df      	b.n	8004b5e <_strtod_l+0x8de>
 8004b9e:	4013      	ands	r3, r2
 8004ba0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8004ba4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8004ba8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8004bac:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8004bb0:	e7d5      	b.n	8004b5e <_strtod_l+0x8de>
 8004bb2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004bb4:	ea13 0f0a 	tst.w	r3, sl
 8004bb8:	e7e0      	b.n	8004b7c <_strtod_l+0x8fc>
 8004bba:	f7ff fb45 	bl	8004248 <sulp>
 8004bbe:	4602      	mov	r2, r0
 8004bc0:	460b      	mov	r3, r1
 8004bc2:	ec51 0b18 	vmov	r0, r1, d8
 8004bc6:	f7fb fb77 	bl	80002b8 <__aeabi_dsub>
 8004bca:	2200      	movs	r2, #0
 8004bcc:	2300      	movs	r3, #0
 8004bce:	4682      	mov	sl, r0
 8004bd0:	468b      	mov	fp, r1
 8004bd2:	f7fb ff91 	bl	8000af8 <__aeabi_dcmpeq>
 8004bd6:	2800      	cmp	r0, #0
 8004bd8:	d0c1      	beq.n	8004b5e <_strtod_l+0x8de>
 8004bda:	e611      	b.n	8004800 <_strtod_l+0x580>
 8004bdc:	fffffc02 	.word	0xfffffc02
 8004be0:	7ff00000 	.word	0x7ff00000
 8004be4:	39500000 	.word	0x39500000
 8004be8:	000fffff 	.word	0x000fffff
 8004bec:	7fefffff 	.word	0x7fefffff
 8004bf0:	08008ad0 	.word	0x08008ad0
 8004bf4:	4631      	mov	r1, r6
 8004bf6:	4628      	mov	r0, r5
 8004bf8:	f002 f868 	bl	8006ccc <__ratio>
 8004bfc:	ec59 8b10 	vmov	r8, r9, d0
 8004c00:	ee10 0a10 	vmov	r0, s0
 8004c04:	2200      	movs	r2, #0
 8004c06:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004c0a:	4649      	mov	r1, r9
 8004c0c:	f7fb ff88 	bl	8000b20 <__aeabi_dcmple>
 8004c10:	2800      	cmp	r0, #0
 8004c12:	d07a      	beq.n	8004d0a <_strtod_l+0xa8a>
 8004c14:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d04a      	beq.n	8004cb0 <_strtod_l+0xa30>
 8004c1a:	4b95      	ldr	r3, [pc, #596]	; (8004e70 <_strtod_l+0xbf0>)
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004c22:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8004e70 <_strtod_l+0xbf0>
 8004c26:	f04f 0800 	mov.w	r8, #0
 8004c2a:	4b92      	ldr	r3, [pc, #584]	; (8004e74 <_strtod_l+0xbf4>)
 8004c2c:	403b      	ands	r3, r7
 8004c2e:	930d      	str	r3, [sp, #52]	; 0x34
 8004c30:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004c32:	4b91      	ldr	r3, [pc, #580]	; (8004e78 <_strtod_l+0xbf8>)
 8004c34:	429a      	cmp	r2, r3
 8004c36:	f040 80b0 	bne.w	8004d9a <_strtod_l+0xb1a>
 8004c3a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004c3e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8004c42:	ec4b ab10 	vmov	d0, sl, fp
 8004c46:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004c4a:	f001 ff67 	bl	8006b1c <__ulp>
 8004c4e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004c52:	ec53 2b10 	vmov	r2, r3, d0
 8004c56:	f7fb fce7 	bl	8000628 <__aeabi_dmul>
 8004c5a:	4652      	mov	r2, sl
 8004c5c:	465b      	mov	r3, fp
 8004c5e:	f7fb fb2d 	bl	80002bc <__adddf3>
 8004c62:	460b      	mov	r3, r1
 8004c64:	4983      	ldr	r1, [pc, #524]	; (8004e74 <_strtod_l+0xbf4>)
 8004c66:	4a85      	ldr	r2, [pc, #532]	; (8004e7c <_strtod_l+0xbfc>)
 8004c68:	4019      	ands	r1, r3
 8004c6a:	4291      	cmp	r1, r2
 8004c6c:	4682      	mov	sl, r0
 8004c6e:	d960      	bls.n	8004d32 <_strtod_l+0xab2>
 8004c70:	ee18 3a90 	vmov	r3, s17
 8004c74:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d104      	bne.n	8004c86 <_strtod_l+0xa06>
 8004c7c:	ee18 3a10 	vmov	r3, s16
 8004c80:	3301      	adds	r3, #1
 8004c82:	f43f ad45 	beq.w	8004710 <_strtod_l+0x490>
 8004c86:	f8df b200 	ldr.w	fp, [pc, #512]	; 8004e88 <_strtod_l+0xc08>
 8004c8a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8004c8e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8004c90:	4620      	mov	r0, r4
 8004c92:	f001 fc11 	bl	80064b8 <_Bfree>
 8004c96:	9905      	ldr	r1, [sp, #20]
 8004c98:	4620      	mov	r0, r4
 8004c9a:	f001 fc0d 	bl	80064b8 <_Bfree>
 8004c9e:	4631      	mov	r1, r6
 8004ca0:	4620      	mov	r0, r4
 8004ca2:	f001 fc09 	bl	80064b8 <_Bfree>
 8004ca6:	4629      	mov	r1, r5
 8004ca8:	4620      	mov	r0, r4
 8004caa:	f001 fc05 	bl	80064b8 <_Bfree>
 8004cae:	e61a      	b.n	80048e6 <_strtod_l+0x666>
 8004cb0:	f1ba 0f00 	cmp.w	sl, #0
 8004cb4:	d11b      	bne.n	8004cee <_strtod_l+0xa6e>
 8004cb6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004cba:	b9f3      	cbnz	r3, 8004cfa <_strtod_l+0xa7a>
 8004cbc:	4b6c      	ldr	r3, [pc, #432]	; (8004e70 <_strtod_l+0xbf0>)
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	4640      	mov	r0, r8
 8004cc2:	4649      	mov	r1, r9
 8004cc4:	f7fb ff22 	bl	8000b0c <__aeabi_dcmplt>
 8004cc8:	b9d0      	cbnz	r0, 8004d00 <_strtod_l+0xa80>
 8004cca:	4640      	mov	r0, r8
 8004ccc:	4649      	mov	r1, r9
 8004cce:	4b6c      	ldr	r3, [pc, #432]	; (8004e80 <_strtod_l+0xc00>)
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	f7fb fca9 	bl	8000628 <__aeabi_dmul>
 8004cd6:	4680      	mov	r8, r0
 8004cd8:	4689      	mov	r9, r1
 8004cda:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8004cde:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8004ce2:	9315      	str	r3, [sp, #84]	; 0x54
 8004ce4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8004ce8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004cec:	e79d      	b.n	8004c2a <_strtod_l+0x9aa>
 8004cee:	f1ba 0f01 	cmp.w	sl, #1
 8004cf2:	d102      	bne.n	8004cfa <_strtod_l+0xa7a>
 8004cf4:	2f00      	cmp	r7, #0
 8004cf6:	f43f ad83 	beq.w	8004800 <_strtod_l+0x580>
 8004cfa:	4b62      	ldr	r3, [pc, #392]	; (8004e84 <_strtod_l+0xc04>)
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	e78e      	b.n	8004c1e <_strtod_l+0x99e>
 8004d00:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8004e80 <_strtod_l+0xc00>
 8004d04:	f04f 0800 	mov.w	r8, #0
 8004d08:	e7e7      	b.n	8004cda <_strtod_l+0xa5a>
 8004d0a:	4b5d      	ldr	r3, [pc, #372]	; (8004e80 <_strtod_l+0xc00>)
 8004d0c:	4640      	mov	r0, r8
 8004d0e:	4649      	mov	r1, r9
 8004d10:	2200      	movs	r2, #0
 8004d12:	f7fb fc89 	bl	8000628 <__aeabi_dmul>
 8004d16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004d18:	4680      	mov	r8, r0
 8004d1a:	4689      	mov	r9, r1
 8004d1c:	b933      	cbnz	r3, 8004d2c <_strtod_l+0xaac>
 8004d1e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004d22:	900e      	str	r0, [sp, #56]	; 0x38
 8004d24:	930f      	str	r3, [sp, #60]	; 0x3c
 8004d26:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8004d2a:	e7dd      	b.n	8004ce8 <_strtod_l+0xa68>
 8004d2c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8004d30:	e7f9      	b.n	8004d26 <_strtod_l+0xaa6>
 8004d32:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8004d36:	9b04      	ldr	r3, [sp, #16]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d1a8      	bne.n	8004c8e <_strtod_l+0xa0e>
 8004d3c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8004d40:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004d42:	0d1b      	lsrs	r3, r3, #20
 8004d44:	051b      	lsls	r3, r3, #20
 8004d46:	429a      	cmp	r2, r3
 8004d48:	d1a1      	bne.n	8004c8e <_strtod_l+0xa0e>
 8004d4a:	4640      	mov	r0, r8
 8004d4c:	4649      	mov	r1, r9
 8004d4e:	f7fb ffb3 	bl	8000cb8 <__aeabi_d2lz>
 8004d52:	f7fb fc3b 	bl	80005cc <__aeabi_l2d>
 8004d56:	4602      	mov	r2, r0
 8004d58:	460b      	mov	r3, r1
 8004d5a:	4640      	mov	r0, r8
 8004d5c:	4649      	mov	r1, r9
 8004d5e:	f7fb faab 	bl	80002b8 <__aeabi_dsub>
 8004d62:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004d64:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004d68:	ea43 030a 	orr.w	r3, r3, sl
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	4680      	mov	r8, r0
 8004d70:	4689      	mov	r9, r1
 8004d72:	d055      	beq.n	8004e20 <_strtod_l+0xba0>
 8004d74:	a336      	add	r3, pc, #216	; (adr r3, 8004e50 <_strtod_l+0xbd0>)
 8004d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d7a:	f7fb fec7 	bl	8000b0c <__aeabi_dcmplt>
 8004d7e:	2800      	cmp	r0, #0
 8004d80:	f47f acd0 	bne.w	8004724 <_strtod_l+0x4a4>
 8004d84:	a334      	add	r3, pc, #208	; (adr r3, 8004e58 <_strtod_l+0xbd8>)
 8004d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d8a:	4640      	mov	r0, r8
 8004d8c:	4649      	mov	r1, r9
 8004d8e:	f7fb fedb 	bl	8000b48 <__aeabi_dcmpgt>
 8004d92:	2800      	cmp	r0, #0
 8004d94:	f43f af7b 	beq.w	8004c8e <_strtod_l+0xa0e>
 8004d98:	e4c4      	b.n	8004724 <_strtod_l+0x4a4>
 8004d9a:	9b04      	ldr	r3, [sp, #16]
 8004d9c:	b333      	cbz	r3, 8004dec <_strtod_l+0xb6c>
 8004d9e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004da0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8004da4:	d822      	bhi.n	8004dec <_strtod_l+0xb6c>
 8004da6:	a32e      	add	r3, pc, #184	; (adr r3, 8004e60 <_strtod_l+0xbe0>)
 8004da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dac:	4640      	mov	r0, r8
 8004dae:	4649      	mov	r1, r9
 8004db0:	f7fb feb6 	bl	8000b20 <__aeabi_dcmple>
 8004db4:	b1a0      	cbz	r0, 8004de0 <_strtod_l+0xb60>
 8004db6:	4649      	mov	r1, r9
 8004db8:	4640      	mov	r0, r8
 8004dba:	f7fb ff0d 	bl	8000bd8 <__aeabi_d2uiz>
 8004dbe:	2801      	cmp	r0, #1
 8004dc0:	bf38      	it	cc
 8004dc2:	2001      	movcc	r0, #1
 8004dc4:	f7fb fbb6 	bl	8000534 <__aeabi_ui2d>
 8004dc8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004dca:	4680      	mov	r8, r0
 8004dcc:	4689      	mov	r9, r1
 8004dce:	bb23      	cbnz	r3, 8004e1a <_strtod_l+0xb9a>
 8004dd0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004dd4:	9010      	str	r0, [sp, #64]	; 0x40
 8004dd6:	9311      	str	r3, [sp, #68]	; 0x44
 8004dd8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004ddc:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004de0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004de2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004de4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8004de8:	1a9b      	subs	r3, r3, r2
 8004dea:	9309      	str	r3, [sp, #36]	; 0x24
 8004dec:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004df0:	eeb0 0a48 	vmov.f32	s0, s16
 8004df4:	eef0 0a68 	vmov.f32	s1, s17
 8004df8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004dfc:	f001 fe8e 	bl	8006b1c <__ulp>
 8004e00:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004e04:	ec53 2b10 	vmov	r2, r3, d0
 8004e08:	f7fb fc0e 	bl	8000628 <__aeabi_dmul>
 8004e0c:	ec53 2b18 	vmov	r2, r3, d8
 8004e10:	f7fb fa54 	bl	80002bc <__adddf3>
 8004e14:	4682      	mov	sl, r0
 8004e16:	468b      	mov	fp, r1
 8004e18:	e78d      	b.n	8004d36 <_strtod_l+0xab6>
 8004e1a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8004e1e:	e7db      	b.n	8004dd8 <_strtod_l+0xb58>
 8004e20:	a311      	add	r3, pc, #68	; (adr r3, 8004e68 <_strtod_l+0xbe8>)
 8004e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e26:	f7fb fe71 	bl	8000b0c <__aeabi_dcmplt>
 8004e2a:	e7b2      	b.n	8004d92 <_strtod_l+0xb12>
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	930a      	str	r3, [sp, #40]	; 0x28
 8004e30:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8004e32:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004e34:	6013      	str	r3, [r2, #0]
 8004e36:	f7ff ba6b 	b.w	8004310 <_strtod_l+0x90>
 8004e3a:	2a65      	cmp	r2, #101	; 0x65
 8004e3c:	f43f ab5f 	beq.w	80044fe <_strtod_l+0x27e>
 8004e40:	2a45      	cmp	r2, #69	; 0x45
 8004e42:	f43f ab5c 	beq.w	80044fe <_strtod_l+0x27e>
 8004e46:	2301      	movs	r3, #1
 8004e48:	f7ff bb94 	b.w	8004574 <_strtod_l+0x2f4>
 8004e4c:	f3af 8000 	nop.w
 8004e50:	94a03595 	.word	0x94a03595
 8004e54:	3fdfffff 	.word	0x3fdfffff
 8004e58:	35afe535 	.word	0x35afe535
 8004e5c:	3fe00000 	.word	0x3fe00000
 8004e60:	ffc00000 	.word	0xffc00000
 8004e64:	41dfffff 	.word	0x41dfffff
 8004e68:	94a03595 	.word	0x94a03595
 8004e6c:	3fcfffff 	.word	0x3fcfffff
 8004e70:	3ff00000 	.word	0x3ff00000
 8004e74:	7ff00000 	.word	0x7ff00000
 8004e78:	7fe00000 	.word	0x7fe00000
 8004e7c:	7c9fffff 	.word	0x7c9fffff
 8004e80:	3fe00000 	.word	0x3fe00000
 8004e84:	bff00000 	.word	0xbff00000
 8004e88:	7fefffff 	.word	0x7fefffff

08004e8c <_strtod_r>:
 8004e8c:	4b01      	ldr	r3, [pc, #4]	; (8004e94 <_strtod_r+0x8>)
 8004e8e:	f7ff b9f7 	b.w	8004280 <_strtod_l>
 8004e92:	bf00      	nop
 8004e94:	20000084 	.word	0x20000084

08004e98 <_strtol_l.constprop.0>:
 8004e98:	2b01      	cmp	r3, #1
 8004e9a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e9e:	d001      	beq.n	8004ea4 <_strtol_l.constprop.0+0xc>
 8004ea0:	2b24      	cmp	r3, #36	; 0x24
 8004ea2:	d906      	bls.n	8004eb2 <_strtol_l.constprop.0+0x1a>
 8004ea4:	f7fe fa7a 	bl	800339c <__errno>
 8004ea8:	2316      	movs	r3, #22
 8004eaa:	6003      	str	r3, [r0, #0]
 8004eac:	2000      	movs	r0, #0
 8004eae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004eb2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8004f98 <_strtol_l.constprop.0+0x100>
 8004eb6:	460d      	mov	r5, r1
 8004eb8:	462e      	mov	r6, r5
 8004eba:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004ebe:	f814 700c 	ldrb.w	r7, [r4, ip]
 8004ec2:	f017 0708 	ands.w	r7, r7, #8
 8004ec6:	d1f7      	bne.n	8004eb8 <_strtol_l.constprop.0+0x20>
 8004ec8:	2c2d      	cmp	r4, #45	; 0x2d
 8004eca:	d132      	bne.n	8004f32 <_strtol_l.constprop.0+0x9a>
 8004ecc:	782c      	ldrb	r4, [r5, #0]
 8004ece:	2701      	movs	r7, #1
 8004ed0:	1cb5      	adds	r5, r6, #2
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d05b      	beq.n	8004f8e <_strtol_l.constprop.0+0xf6>
 8004ed6:	2b10      	cmp	r3, #16
 8004ed8:	d109      	bne.n	8004eee <_strtol_l.constprop.0+0x56>
 8004eda:	2c30      	cmp	r4, #48	; 0x30
 8004edc:	d107      	bne.n	8004eee <_strtol_l.constprop.0+0x56>
 8004ede:	782c      	ldrb	r4, [r5, #0]
 8004ee0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8004ee4:	2c58      	cmp	r4, #88	; 0x58
 8004ee6:	d14d      	bne.n	8004f84 <_strtol_l.constprop.0+0xec>
 8004ee8:	786c      	ldrb	r4, [r5, #1]
 8004eea:	2310      	movs	r3, #16
 8004eec:	3502      	adds	r5, #2
 8004eee:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8004ef2:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8004ef6:	f04f 0c00 	mov.w	ip, #0
 8004efa:	fbb8 f9f3 	udiv	r9, r8, r3
 8004efe:	4666      	mov	r6, ip
 8004f00:	fb03 8a19 	mls	sl, r3, r9, r8
 8004f04:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8004f08:	f1be 0f09 	cmp.w	lr, #9
 8004f0c:	d816      	bhi.n	8004f3c <_strtol_l.constprop.0+0xa4>
 8004f0e:	4674      	mov	r4, lr
 8004f10:	42a3      	cmp	r3, r4
 8004f12:	dd24      	ble.n	8004f5e <_strtol_l.constprop.0+0xc6>
 8004f14:	f1bc 0f00 	cmp.w	ip, #0
 8004f18:	db1e      	blt.n	8004f58 <_strtol_l.constprop.0+0xc0>
 8004f1a:	45b1      	cmp	r9, r6
 8004f1c:	d31c      	bcc.n	8004f58 <_strtol_l.constprop.0+0xc0>
 8004f1e:	d101      	bne.n	8004f24 <_strtol_l.constprop.0+0x8c>
 8004f20:	45a2      	cmp	sl, r4
 8004f22:	db19      	blt.n	8004f58 <_strtol_l.constprop.0+0xc0>
 8004f24:	fb06 4603 	mla	r6, r6, r3, r4
 8004f28:	f04f 0c01 	mov.w	ip, #1
 8004f2c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004f30:	e7e8      	b.n	8004f04 <_strtol_l.constprop.0+0x6c>
 8004f32:	2c2b      	cmp	r4, #43	; 0x2b
 8004f34:	bf04      	itt	eq
 8004f36:	782c      	ldrbeq	r4, [r5, #0]
 8004f38:	1cb5      	addeq	r5, r6, #2
 8004f3a:	e7ca      	b.n	8004ed2 <_strtol_l.constprop.0+0x3a>
 8004f3c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8004f40:	f1be 0f19 	cmp.w	lr, #25
 8004f44:	d801      	bhi.n	8004f4a <_strtol_l.constprop.0+0xb2>
 8004f46:	3c37      	subs	r4, #55	; 0x37
 8004f48:	e7e2      	b.n	8004f10 <_strtol_l.constprop.0+0x78>
 8004f4a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8004f4e:	f1be 0f19 	cmp.w	lr, #25
 8004f52:	d804      	bhi.n	8004f5e <_strtol_l.constprop.0+0xc6>
 8004f54:	3c57      	subs	r4, #87	; 0x57
 8004f56:	e7db      	b.n	8004f10 <_strtol_l.constprop.0+0x78>
 8004f58:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8004f5c:	e7e6      	b.n	8004f2c <_strtol_l.constprop.0+0x94>
 8004f5e:	f1bc 0f00 	cmp.w	ip, #0
 8004f62:	da05      	bge.n	8004f70 <_strtol_l.constprop.0+0xd8>
 8004f64:	2322      	movs	r3, #34	; 0x22
 8004f66:	6003      	str	r3, [r0, #0]
 8004f68:	4646      	mov	r6, r8
 8004f6a:	b942      	cbnz	r2, 8004f7e <_strtol_l.constprop.0+0xe6>
 8004f6c:	4630      	mov	r0, r6
 8004f6e:	e79e      	b.n	8004eae <_strtol_l.constprop.0+0x16>
 8004f70:	b107      	cbz	r7, 8004f74 <_strtol_l.constprop.0+0xdc>
 8004f72:	4276      	negs	r6, r6
 8004f74:	2a00      	cmp	r2, #0
 8004f76:	d0f9      	beq.n	8004f6c <_strtol_l.constprop.0+0xd4>
 8004f78:	f1bc 0f00 	cmp.w	ip, #0
 8004f7c:	d000      	beq.n	8004f80 <_strtol_l.constprop.0+0xe8>
 8004f7e:	1e69      	subs	r1, r5, #1
 8004f80:	6011      	str	r1, [r2, #0]
 8004f82:	e7f3      	b.n	8004f6c <_strtol_l.constprop.0+0xd4>
 8004f84:	2430      	movs	r4, #48	; 0x30
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d1b1      	bne.n	8004eee <_strtol_l.constprop.0+0x56>
 8004f8a:	2308      	movs	r3, #8
 8004f8c:	e7af      	b.n	8004eee <_strtol_l.constprop.0+0x56>
 8004f8e:	2c30      	cmp	r4, #48	; 0x30
 8004f90:	d0a5      	beq.n	8004ede <_strtol_l.constprop.0+0x46>
 8004f92:	230a      	movs	r3, #10
 8004f94:	e7ab      	b.n	8004eee <_strtol_l.constprop.0+0x56>
 8004f96:	bf00      	nop
 8004f98:	08008af9 	.word	0x08008af9

08004f9c <_strtol_r>:
 8004f9c:	f7ff bf7c 	b.w	8004e98 <_strtol_l.constprop.0>

08004fa0 <_write_r>:
 8004fa0:	b538      	push	{r3, r4, r5, lr}
 8004fa2:	4d07      	ldr	r5, [pc, #28]	; (8004fc0 <_write_r+0x20>)
 8004fa4:	4604      	mov	r4, r0
 8004fa6:	4608      	mov	r0, r1
 8004fa8:	4611      	mov	r1, r2
 8004faa:	2200      	movs	r2, #0
 8004fac:	602a      	str	r2, [r5, #0]
 8004fae:	461a      	mov	r2, r3
 8004fb0:	f7fc ffb4 	bl	8001f1c <_write>
 8004fb4:	1c43      	adds	r3, r0, #1
 8004fb6:	d102      	bne.n	8004fbe <_write_r+0x1e>
 8004fb8:	682b      	ldr	r3, [r5, #0]
 8004fba:	b103      	cbz	r3, 8004fbe <_write_r+0x1e>
 8004fbc:	6023      	str	r3, [r4, #0]
 8004fbe:	bd38      	pop	{r3, r4, r5, pc}
 8004fc0:	200006f4 	.word	0x200006f4

08004fc4 <_close_r>:
 8004fc4:	b538      	push	{r3, r4, r5, lr}
 8004fc6:	4d06      	ldr	r5, [pc, #24]	; (8004fe0 <_close_r+0x1c>)
 8004fc8:	2300      	movs	r3, #0
 8004fca:	4604      	mov	r4, r0
 8004fcc:	4608      	mov	r0, r1
 8004fce:	602b      	str	r3, [r5, #0]
 8004fd0:	f7fc ffc0 	bl	8001f54 <_close>
 8004fd4:	1c43      	adds	r3, r0, #1
 8004fd6:	d102      	bne.n	8004fde <_close_r+0x1a>
 8004fd8:	682b      	ldr	r3, [r5, #0]
 8004fda:	b103      	cbz	r3, 8004fde <_close_r+0x1a>
 8004fdc:	6023      	str	r3, [r4, #0]
 8004fde:	bd38      	pop	{r3, r4, r5, pc}
 8004fe0:	200006f4 	.word	0x200006f4

08004fe4 <quorem>:
 8004fe4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fe8:	6903      	ldr	r3, [r0, #16]
 8004fea:	690c      	ldr	r4, [r1, #16]
 8004fec:	42a3      	cmp	r3, r4
 8004fee:	4607      	mov	r7, r0
 8004ff0:	f2c0 8081 	blt.w	80050f6 <quorem+0x112>
 8004ff4:	3c01      	subs	r4, #1
 8004ff6:	f101 0814 	add.w	r8, r1, #20
 8004ffa:	f100 0514 	add.w	r5, r0, #20
 8004ffe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005002:	9301      	str	r3, [sp, #4]
 8005004:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005008:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800500c:	3301      	adds	r3, #1
 800500e:	429a      	cmp	r2, r3
 8005010:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005014:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005018:	fbb2 f6f3 	udiv	r6, r2, r3
 800501c:	d331      	bcc.n	8005082 <quorem+0x9e>
 800501e:	f04f 0e00 	mov.w	lr, #0
 8005022:	4640      	mov	r0, r8
 8005024:	46ac      	mov	ip, r5
 8005026:	46f2      	mov	sl, lr
 8005028:	f850 2b04 	ldr.w	r2, [r0], #4
 800502c:	b293      	uxth	r3, r2
 800502e:	fb06 e303 	mla	r3, r6, r3, lr
 8005032:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005036:	b29b      	uxth	r3, r3
 8005038:	ebaa 0303 	sub.w	r3, sl, r3
 800503c:	f8dc a000 	ldr.w	sl, [ip]
 8005040:	0c12      	lsrs	r2, r2, #16
 8005042:	fa13 f38a 	uxtah	r3, r3, sl
 8005046:	fb06 e202 	mla	r2, r6, r2, lr
 800504a:	9300      	str	r3, [sp, #0]
 800504c:	9b00      	ldr	r3, [sp, #0]
 800504e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005052:	b292      	uxth	r2, r2
 8005054:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005058:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800505c:	f8bd 3000 	ldrh.w	r3, [sp]
 8005060:	4581      	cmp	r9, r0
 8005062:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005066:	f84c 3b04 	str.w	r3, [ip], #4
 800506a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800506e:	d2db      	bcs.n	8005028 <quorem+0x44>
 8005070:	f855 300b 	ldr.w	r3, [r5, fp]
 8005074:	b92b      	cbnz	r3, 8005082 <quorem+0x9e>
 8005076:	9b01      	ldr	r3, [sp, #4]
 8005078:	3b04      	subs	r3, #4
 800507a:	429d      	cmp	r5, r3
 800507c:	461a      	mov	r2, r3
 800507e:	d32e      	bcc.n	80050de <quorem+0xfa>
 8005080:	613c      	str	r4, [r7, #16]
 8005082:	4638      	mov	r0, r7
 8005084:	f001 fca4 	bl	80069d0 <__mcmp>
 8005088:	2800      	cmp	r0, #0
 800508a:	db24      	blt.n	80050d6 <quorem+0xf2>
 800508c:	3601      	adds	r6, #1
 800508e:	4628      	mov	r0, r5
 8005090:	f04f 0c00 	mov.w	ip, #0
 8005094:	f858 2b04 	ldr.w	r2, [r8], #4
 8005098:	f8d0 e000 	ldr.w	lr, [r0]
 800509c:	b293      	uxth	r3, r2
 800509e:	ebac 0303 	sub.w	r3, ip, r3
 80050a2:	0c12      	lsrs	r2, r2, #16
 80050a4:	fa13 f38e 	uxtah	r3, r3, lr
 80050a8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80050ac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80050b0:	b29b      	uxth	r3, r3
 80050b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80050b6:	45c1      	cmp	r9, r8
 80050b8:	f840 3b04 	str.w	r3, [r0], #4
 80050bc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80050c0:	d2e8      	bcs.n	8005094 <quorem+0xb0>
 80050c2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80050c6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80050ca:	b922      	cbnz	r2, 80050d6 <quorem+0xf2>
 80050cc:	3b04      	subs	r3, #4
 80050ce:	429d      	cmp	r5, r3
 80050d0:	461a      	mov	r2, r3
 80050d2:	d30a      	bcc.n	80050ea <quorem+0x106>
 80050d4:	613c      	str	r4, [r7, #16]
 80050d6:	4630      	mov	r0, r6
 80050d8:	b003      	add	sp, #12
 80050da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050de:	6812      	ldr	r2, [r2, #0]
 80050e0:	3b04      	subs	r3, #4
 80050e2:	2a00      	cmp	r2, #0
 80050e4:	d1cc      	bne.n	8005080 <quorem+0x9c>
 80050e6:	3c01      	subs	r4, #1
 80050e8:	e7c7      	b.n	800507a <quorem+0x96>
 80050ea:	6812      	ldr	r2, [r2, #0]
 80050ec:	3b04      	subs	r3, #4
 80050ee:	2a00      	cmp	r2, #0
 80050f0:	d1f0      	bne.n	80050d4 <quorem+0xf0>
 80050f2:	3c01      	subs	r4, #1
 80050f4:	e7eb      	b.n	80050ce <quorem+0xea>
 80050f6:	2000      	movs	r0, #0
 80050f8:	e7ee      	b.n	80050d8 <quorem+0xf4>
 80050fa:	0000      	movs	r0, r0
 80050fc:	0000      	movs	r0, r0
	...

08005100 <_dtoa_r>:
 8005100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005104:	ed2d 8b04 	vpush	{d8-d9}
 8005108:	ec57 6b10 	vmov	r6, r7, d0
 800510c:	b093      	sub	sp, #76	; 0x4c
 800510e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005110:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005114:	9106      	str	r1, [sp, #24]
 8005116:	ee10 aa10 	vmov	sl, s0
 800511a:	4604      	mov	r4, r0
 800511c:	9209      	str	r2, [sp, #36]	; 0x24
 800511e:	930c      	str	r3, [sp, #48]	; 0x30
 8005120:	46bb      	mov	fp, r7
 8005122:	b975      	cbnz	r5, 8005142 <_dtoa_r+0x42>
 8005124:	2010      	movs	r0, #16
 8005126:	f001 f95f 	bl	80063e8 <malloc>
 800512a:	4602      	mov	r2, r0
 800512c:	6260      	str	r0, [r4, #36]	; 0x24
 800512e:	b920      	cbnz	r0, 800513a <_dtoa_r+0x3a>
 8005130:	4ba7      	ldr	r3, [pc, #668]	; (80053d0 <_dtoa_r+0x2d0>)
 8005132:	21ea      	movs	r1, #234	; 0xea
 8005134:	48a7      	ldr	r0, [pc, #668]	; (80053d4 <_dtoa_r+0x2d4>)
 8005136:	f002 fceb 	bl	8007b10 <__assert_func>
 800513a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800513e:	6005      	str	r5, [r0, #0]
 8005140:	60c5      	str	r5, [r0, #12]
 8005142:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005144:	6819      	ldr	r1, [r3, #0]
 8005146:	b151      	cbz	r1, 800515e <_dtoa_r+0x5e>
 8005148:	685a      	ldr	r2, [r3, #4]
 800514a:	604a      	str	r2, [r1, #4]
 800514c:	2301      	movs	r3, #1
 800514e:	4093      	lsls	r3, r2
 8005150:	608b      	str	r3, [r1, #8]
 8005152:	4620      	mov	r0, r4
 8005154:	f001 f9b0 	bl	80064b8 <_Bfree>
 8005158:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800515a:	2200      	movs	r2, #0
 800515c:	601a      	str	r2, [r3, #0]
 800515e:	1e3b      	subs	r3, r7, #0
 8005160:	bfaa      	itet	ge
 8005162:	2300      	movge	r3, #0
 8005164:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8005168:	f8c8 3000 	strge.w	r3, [r8]
 800516c:	4b9a      	ldr	r3, [pc, #616]	; (80053d8 <_dtoa_r+0x2d8>)
 800516e:	bfbc      	itt	lt
 8005170:	2201      	movlt	r2, #1
 8005172:	f8c8 2000 	strlt.w	r2, [r8]
 8005176:	ea33 030b 	bics.w	r3, r3, fp
 800517a:	d11b      	bne.n	80051b4 <_dtoa_r+0xb4>
 800517c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800517e:	f242 730f 	movw	r3, #9999	; 0x270f
 8005182:	6013      	str	r3, [r2, #0]
 8005184:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005188:	4333      	orrs	r3, r6
 800518a:	f000 8592 	beq.w	8005cb2 <_dtoa_r+0xbb2>
 800518e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005190:	b963      	cbnz	r3, 80051ac <_dtoa_r+0xac>
 8005192:	4b92      	ldr	r3, [pc, #584]	; (80053dc <_dtoa_r+0x2dc>)
 8005194:	e022      	b.n	80051dc <_dtoa_r+0xdc>
 8005196:	4b92      	ldr	r3, [pc, #584]	; (80053e0 <_dtoa_r+0x2e0>)
 8005198:	9301      	str	r3, [sp, #4]
 800519a:	3308      	adds	r3, #8
 800519c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800519e:	6013      	str	r3, [r2, #0]
 80051a0:	9801      	ldr	r0, [sp, #4]
 80051a2:	b013      	add	sp, #76	; 0x4c
 80051a4:	ecbd 8b04 	vpop	{d8-d9}
 80051a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051ac:	4b8b      	ldr	r3, [pc, #556]	; (80053dc <_dtoa_r+0x2dc>)
 80051ae:	9301      	str	r3, [sp, #4]
 80051b0:	3303      	adds	r3, #3
 80051b2:	e7f3      	b.n	800519c <_dtoa_r+0x9c>
 80051b4:	2200      	movs	r2, #0
 80051b6:	2300      	movs	r3, #0
 80051b8:	4650      	mov	r0, sl
 80051ba:	4659      	mov	r1, fp
 80051bc:	f7fb fc9c 	bl	8000af8 <__aeabi_dcmpeq>
 80051c0:	ec4b ab19 	vmov	d9, sl, fp
 80051c4:	4680      	mov	r8, r0
 80051c6:	b158      	cbz	r0, 80051e0 <_dtoa_r+0xe0>
 80051c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80051ca:	2301      	movs	r3, #1
 80051cc:	6013      	str	r3, [r2, #0]
 80051ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	f000 856b 	beq.w	8005cac <_dtoa_r+0xbac>
 80051d6:	4883      	ldr	r0, [pc, #524]	; (80053e4 <_dtoa_r+0x2e4>)
 80051d8:	6018      	str	r0, [r3, #0]
 80051da:	1e43      	subs	r3, r0, #1
 80051dc:	9301      	str	r3, [sp, #4]
 80051de:	e7df      	b.n	80051a0 <_dtoa_r+0xa0>
 80051e0:	ec4b ab10 	vmov	d0, sl, fp
 80051e4:	aa10      	add	r2, sp, #64	; 0x40
 80051e6:	a911      	add	r1, sp, #68	; 0x44
 80051e8:	4620      	mov	r0, r4
 80051ea:	f001 fd13 	bl	8006c14 <__d2b>
 80051ee:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80051f2:	ee08 0a10 	vmov	s16, r0
 80051f6:	2d00      	cmp	r5, #0
 80051f8:	f000 8084 	beq.w	8005304 <_dtoa_r+0x204>
 80051fc:	ee19 3a90 	vmov	r3, s19
 8005200:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005204:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8005208:	4656      	mov	r6, sl
 800520a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800520e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005212:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8005216:	4b74      	ldr	r3, [pc, #464]	; (80053e8 <_dtoa_r+0x2e8>)
 8005218:	2200      	movs	r2, #0
 800521a:	4630      	mov	r0, r6
 800521c:	4639      	mov	r1, r7
 800521e:	f7fb f84b 	bl	80002b8 <__aeabi_dsub>
 8005222:	a365      	add	r3, pc, #404	; (adr r3, 80053b8 <_dtoa_r+0x2b8>)
 8005224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005228:	f7fb f9fe 	bl	8000628 <__aeabi_dmul>
 800522c:	a364      	add	r3, pc, #400	; (adr r3, 80053c0 <_dtoa_r+0x2c0>)
 800522e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005232:	f7fb f843 	bl	80002bc <__adddf3>
 8005236:	4606      	mov	r6, r0
 8005238:	4628      	mov	r0, r5
 800523a:	460f      	mov	r7, r1
 800523c:	f7fb f98a 	bl	8000554 <__aeabi_i2d>
 8005240:	a361      	add	r3, pc, #388	; (adr r3, 80053c8 <_dtoa_r+0x2c8>)
 8005242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005246:	f7fb f9ef 	bl	8000628 <__aeabi_dmul>
 800524a:	4602      	mov	r2, r0
 800524c:	460b      	mov	r3, r1
 800524e:	4630      	mov	r0, r6
 8005250:	4639      	mov	r1, r7
 8005252:	f7fb f833 	bl	80002bc <__adddf3>
 8005256:	4606      	mov	r6, r0
 8005258:	460f      	mov	r7, r1
 800525a:	f7fb fc95 	bl	8000b88 <__aeabi_d2iz>
 800525e:	2200      	movs	r2, #0
 8005260:	9000      	str	r0, [sp, #0]
 8005262:	2300      	movs	r3, #0
 8005264:	4630      	mov	r0, r6
 8005266:	4639      	mov	r1, r7
 8005268:	f7fb fc50 	bl	8000b0c <__aeabi_dcmplt>
 800526c:	b150      	cbz	r0, 8005284 <_dtoa_r+0x184>
 800526e:	9800      	ldr	r0, [sp, #0]
 8005270:	f7fb f970 	bl	8000554 <__aeabi_i2d>
 8005274:	4632      	mov	r2, r6
 8005276:	463b      	mov	r3, r7
 8005278:	f7fb fc3e 	bl	8000af8 <__aeabi_dcmpeq>
 800527c:	b910      	cbnz	r0, 8005284 <_dtoa_r+0x184>
 800527e:	9b00      	ldr	r3, [sp, #0]
 8005280:	3b01      	subs	r3, #1
 8005282:	9300      	str	r3, [sp, #0]
 8005284:	9b00      	ldr	r3, [sp, #0]
 8005286:	2b16      	cmp	r3, #22
 8005288:	d85a      	bhi.n	8005340 <_dtoa_r+0x240>
 800528a:	9a00      	ldr	r2, [sp, #0]
 800528c:	4b57      	ldr	r3, [pc, #348]	; (80053ec <_dtoa_r+0x2ec>)
 800528e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005296:	ec51 0b19 	vmov	r0, r1, d9
 800529a:	f7fb fc37 	bl	8000b0c <__aeabi_dcmplt>
 800529e:	2800      	cmp	r0, #0
 80052a0:	d050      	beq.n	8005344 <_dtoa_r+0x244>
 80052a2:	9b00      	ldr	r3, [sp, #0]
 80052a4:	3b01      	subs	r3, #1
 80052a6:	9300      	str	r3, [sp, #0]
 80052a8:	2300      	movs	r3, #0
 80052aa:	930b      	str	r3, [sp, #44]	; 0x2c
 80052ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80052ae:	1b5d      	subs	r5, r3, r5
 80052b0:	1e6b      	subs	r3, r5, #1
 80052b2:	9305      	str	r3, [sp, #20]
 80052b4:	bf45      	ittet	mi
 80052b6:	f1c5 0301 	rsbmi	r3, r5, #1
 80052ba:	9304      	strmi	r3, [sp, #16]
 80052bc:	2300      	movpl	r3, #0
 80052be:	2300      	movmi	r3, #0
 80052c0:	bf4c      	ite	mi
 80052c2:	9305      	strmi	r3, [sp, #20]
 80052c4:	9304      	strpl	r3, [sp, #16]
 80052c6:	9b00      	ldr	r3, [sp, #0]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	db3d      	blt.n	8005348 <_dtoa_r+0x248>
 80052cc:	9b05      	ldr	r3, [sp, #20]
 80052ce:	9a00      	ldr	r2, [sp, #0]
 80052d0:	920a      	str	r2, [sp, #40]	; 0x28
 80052d2:	4413      	add	r3, r2
 80052d4:	9305      	str	r3, [sp, #20]
 80052d6:	2300      	movs	r3, #0
 80052d8:	9307      	str	r3, [sp, #28]
 80052da:	9b06      	ldr	r3, [sp, #24]
 80052dc:	2b09      	cmp	r3, #9
 80052de:	f200 8089 	bhi.w	80053f4 <_dtoa_r+0x2f4>
 80052e2:	2b05      	cmp	r3, #5
 80052e4:	bfc4      	itt	gt
 80052e6:	3b04      	subgt	r3, #4
 80052e8:	9306      	strgt	r3, [sp, #24]
 80052ea:	9b06      	ldr	r3, [sp, #24]
 80052ec:	f1a3 0302 	sub.w	r3, r3, #2
 80052f0:	bfcc      	ite	gt
 80052f2:	2500      	movgt	r5, #0
 80052f4:	2501      	movle	r5, #1
 80052f6:	2b03      	cmp	r3, #3
 80052f8:	f200 8087 	bhi.w	800540a <_dtoa_r+0x30a>
 80052fc:	e8df f003 	tbb	[pc, r3]
 8005300:	59383a2d 	.word	0x59383a2d
 8005304:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005308:	441d      	add	r5, r3
 800530a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800530e:	2b20      	cmp	r3, #32
 8005310:	bfc1      	itttt	gt
 8005312:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005316:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800531a:	fa0b f303 	lslgt.w	r3, fp, r3
 800531e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005322:	bfda      	itte	le
 8005324:	f1c3 0320 	rsble	r3, r3, #32
 8005328:	fa06 f003 	lslle.w	r0, r6, r3
 800532c:	4318      	orrgt	r0, r3
 800532e:	f7fb f901 	bl	8000534 <__aeabi_ui2d>
 8005332:	2301      	movs	r3, #1
 8005334:	4606      	mov	r6, r0
 8005336:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800533a:	3d01      	subs	r5, #1
 800533c:	930e      	str	r3, [sp, #56]	; 0x38
 800533e:	e76a      	b.n	8005216 <_dtoa_r+0x116>
 8005340:	2301      	movs	r3, #1
 8005342:	e7b2      	b.n	80052aa <_dtoa_r+0x1aa>
 8005344:	900b      	str	r0, [sp, #44]	; 0x2c
 8005346:	e7b1      	b.n	80052ac <_dtoa_r+0x1ac>
 8005348:	9b04      	ldr	r3, [sp, #16]
 800534a:	9a00      	ldr	r2, [sp, #0]
 800534c:	1a9b      	subs	r3, r3, r2
 800534e:	9304      	str	r3, [sp, #16]
 8005350:	4253      	negs	r3, r2
 8005352:	9307      	str	r3, [sp, #28]
 8005354:	2300      	movs	r3, #0
 8005356:	930a      	str	r3, [sp, #40]	; 0x28
 8005358:	e7bf      	b.n	80052da <_dtoa_r+0x1da>
 800535a:	2300      	movs	r3, #0
 800535c:	9308      	str	r3, [sp, #32]
 800535e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005360:	2b00      	cmp	r3, #0
 8005362:	dc55      	bgt.n	8005410 <_dtoa_r+0x310>
 8005364:	2301      	movs	r3, #1
 8005366:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800536a:	461a      	mov	r2, r3
 800536c:	9209      	str	r2, [sp, #36]	; 0x24
 800536e:	e00c      	b.n	800538a <_dtoa_r+0x28a>
 8005370:	2301      	movs	r3, #1
 8005372:	e7f3      	b.n	800535c <_dtoa_r+0x25c>
 8005374:	2300      	movs	r3, #0
 8005376:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005378:	9308      	str	r3, [sp, #32]
 800537a:	9b00      	ldr	r3, [sp, #0]
 800537c:	4413      	add	r3, r2
 800537e:	9302      	str	r3, [sp, #8]
 8005380:	3301      	adds	r3, #1
 8005382:	2b01      	cmp	r3, #1
 8005384:	9303      	str	r3, [sp, #12]
 8005386:	bfb8      	it	lt
 8005388:	2301      	movlt	r3, #1
 800538a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800538c:	2200      	movs	r2, #0
 800538e:	6042      	str	r2, [r0, #4]
 8005390:	2204      	movs	r2, #4
 8005392:	f102 0614 	add.w	r6, r2, #20
 8005396:	429e      	cmp	r6, r3
 8005398:	6841      	ldr	r1, [r0, #4]
 800539a:	d93d      	bls.n	8005418 <_dtoa_r+0x318>
 800539c:	4620      	mov	r0, r4
 800539e:	f001 f84b 	bl	8006438 <_Balloc>
 80053a2:	9001      	str	r0, [sp, #4]
 80053a4:	2800      	cmp	r0, #0
 80053a6:	d13b      	bne.n	8005420 <_dtoa_r+0x320>
 80053a8:	4b11      	ldr	r3, [pc, #68]	; (80053f0 <_dtoa_r+0x2f0>)
 80053aa:	4602      	mov	r2, r0
 80053ac:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80053b0:	e6c0      	b.n	8005134 <_dtoa_r+0x34>
 80053b2:	2301      	movs	r3, #1
 80053b4:	e7df      	b.n	8005376 <_dtoa_r+0x276>
 80053b6:	bf00      	nop
 80053b8:	636f4361 	.word	0x636f4361
 80053bc:	3fd287a7 	.word	0x3fd287a7
 80053c0:	8b60c8b3 	.word	0x8b60c8b3
 80053c4:	3fc68a28 	.word	0x3fc68a28
 80053c8:	509f79fb 	.word	0x509f79fb
 80053cc:	3fd34413 	.word	0x3fd34413
 80053d0:	08008c06 	.word	0x08008c06
 80053d4:	08008c1d 	.word	0x08008c1d
 80053d8:	7ff00000 	.word	0x7ff00000
 80053dc:	08008c02 	.word	0x08008c02
 80053e0:	08008bf9 	.word	0x08008bf9
 80053e4:	08008e72 	.word	0x08008e72
 80053e8:	3ff80000 	.word	0x3ff80000
 80053ec:	08008d88 	.word	0x08008d88
 80053f0:	08008c78 	.word	0x08008c78
 80053f4:	2501      	movs	r5, #1
 80053f6:	2300      	movs	r3, #0
 80053f8:	9306      	str	r3, [sp, #24]
 80053fa:	9508      	str	r5, [sp, #32]
 80053fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005400:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005404:	2200      	movs	r2, #0
 8005406:	2312      	movs	r3, #18
 8005408:	e7b0      	b.n	800536c <_dtoa_r+0x26c>
 800540a:	2301      	movs	r3, #1
 800540c:	9308      	str	r3, [sp, #32]
 800540e:	e7f5      	b.n	80053fc <_dtoa_r+0x2fc>
 8005410:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005412:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005416:	e7b8      	b.n	800538a <_dtoa_r+0x28a>
 8005418:	3101      	adds	r1, #1
 800541a:	6041      	str	r1, [r0, #4]
 800541c:	0052      	lsls	r2, r2, #1
 800541e:	e7b8      	b.n	8005392 <_dtoa_r+0x292>
 8005420:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005422:	9a01      	ldr	r2, [sp, #4]
 8005424:	601a      	str	r2, [r3, #0]
 8005426:	9b03      	ldr	r3, [sp, #12]
 8005428:	2b0e      	cmp	r3, #14
 800542a:	f200 809d 	bhi.w	8005568 <_dtoa_r+0x468>
 800542e:	2d00      	cmp	r5, #0
 8005430:	f000 809a 	beq.w	8005568 <_dtoa_r+0x468>
 8005434:	9b00      	ldr	r3, [sp, #0]
 8005436:	2b00      	cmp	r3, #0
 8005438:	dd32      	ble.n	80054a0 <_dtoa_r+0x3a0>
 800543a:	4ab7      	ldr	r2, [pc, #732]	; (8005718 <_dtoa_r+0x618>)
 800543c:	f003 030f 	and.w	r3, r3, #15
 8005440:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005444:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005448:	9b00      	ldr	r3, [sp, #0]
 800544a:	05d8      	lsls	r0, r3, #23
 800544c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8005450:	d516      	bpl.n	8005480 <_dtoa_r+0x380>
 8005452:	4bb2      	ldr	r3, [pc, #712]	; (800571c <_dtoa_r+0x61c>)
 8005454:	ec51 0b19 	vmov	r0, r1, d9
 8005458:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800545c:	f7fb fa0e 	bl	800087c <__aeabi_ddiv>
 8005460:	f007 070f 	and.w	r7, r7, #15
 8005464:	4682      	mov	sl, r0
 8005466:	468b      	mov	fp, r1
 8005468:	2503      	movs	r5, #3
 800546a:	4eac      	ldr	r6, [pc, #688]	; (800571c <_dtoa_r+0x61c>)
 800546c:	b957      	cbnz	r7, 8005484 <_dtoa_r+0x384>
 800546e:	4642      	mov	r2, r8
 8005470:	464b      	mov	r3, r9
 8005472:	4650      	mov	r0, sl
 8005474:	4659      	mov	r1, fp
 8005476:	f7fb fa01 	bl	800087c <__aeabi_ddiv>
 800547a:	4682      	mov	sl, r0
 800547c:	468b      	mov	fp, r1
 800547e:	e028      	b.n	80054d2 <_dtoa_r+0x3d2>
 8005480:	2502      	movs	r5, #2
 8005482:	e7f2      	b.n	800546a <_dtoa_r+0x36a>
 8005484:	07f9      	lsls	r1, r7, #31
 8005486:	d508      	bpl.n	800549a <_dtoa_r+0x39a>
 8005488:	4640      	mov	r0, r8
 800548a:	4649      	mov	r1, r9
 800548c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005490:	f7fb f8ca 	bl	8000628 <__aeabi_dmul>
 8005494:	3501      	adds	r5, #1
 8005496:	4680      	mov	r8, r0
 8005498:	4689      	mov	r9, r1
 800549a:	107f      	asrs	r7, r7, #1
 800549c:	3608      	adds	r6, #8
 800549e:	e7e5      	b.n	800546c <_dtoa_r+0x36c>
 80054a0:	f000 809b 	beq.w	80055da <_dtoa_r+0x4da>
 80054a4:	9b00      	ldr	r3, [sp, #0]
 80054a6:	4f9d      	ldr	r7, [pc, #628]	; (800571c <_dtoa_r+0x61c>)
 80054a8:	425e      	negs	r6, r3
 80054aa:	4b9b      	ldr	r3, [pc, #620]	; (8005718 <_dtoa_r+0x618>)
 80054ac:	f006 020f 	and.w	r2, r6, #15
 80054b0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80054b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054b8:	ec51 0b19 	vmov	r0, r1, d9
 80054bc:	f7fb f8b4 	bl	8000628 <__aeabi_dmul>
 80054c0:	1136      	asrs	r6, r6, #4
 80054c2:	4682      	mov	sl, r0
 80054c4:	468b      	mov	fp, r1
 80054c6:	2300      	movs	r3, #0
 80054c8:	2502      	movs	r5, #2
 80054ca:	2e00      	cmp	r6, #0
 80054cc:	d17a      	bne.n	80055c4 <_dtoa_r+0x4c4>
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d1d3      	bne.n	800547a <_dtoa_r+0x37a>
 80054d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	f000 8082 	beq.w	80055de <_dtoa_r+0x4de>
 80054da:	4b91      	ldr	r3, [pc, #580]	; (8005720 <_dtoa_r+0x620>)
 80054dc:	2200      	movs	r2, #0
 80054de:	4650      	mov	r0, sl
 80054e0:	4659      	mov	r1, fp
 80054e2:	f7fb fb13 	bl	8000b0c <__aeabi_dcmplt>
 80054e6:	2800      	cmp	r0, #0
 80054e8:	d079      	beq.n	80055de <_dtoa_r+0x4de>
 80054ea:	9b03      	ldr	r3, [sp, #12]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d076      	beq.n	80055de <_dtoa_r+0x4de>
 80054f0:	9b02      	ldr	r3, [sp, #8]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	dd36      	ble.n	8005564 <_dtoa_r+0x464>
 80054f6:	9b00      	ldr	r3, [sp, #0]
 80054f8:	4650      	mov	r0, sl
 80054fa:	4659      	mov	r1, fp
 80054fc:	1e5f      	subs	r7, r3, #1
 80054fe:	2200      	movs	r2, #0
 8005500:	4b88      	ldr	r3, [pc, #544]	; (8005724 <_dtoa_r+0x624>)
 8005502:	f7fb f891 	bl	8000628 <__aeabi_dmul>
 8005506:	9e02      	ldr	r6, [sp, #8]
 8005508:	4682      	mov	sl, r0
 800550a:	468b      	mov	fp, r1
 800550c:	3501      	adds	r5, #1
 800550e:	4628      	mov	r0, r5
 8005510:	f7fb f820 	bl	8000554 <__aeabi_i2d>
 8005514:	4652      	mov	r2, sl
 8005516:	465b      	mov	r3, fp
 8005518:	f7fb f886 	bl	8000628 <__aeabi_dmul>
 800551c:	4b82      	ldr	r3, [pc, #520]	; (8005728 <_dtoa_r+0x628>)
 800551e:	2200      	movs	r2, #0
 8005520:	f7fa fecc 	bl	80002bc <__adddf3>
 8005524:	46d0      	mov	r8, sl
 8005526:	46d9      	mov	r9, fp
 8005528:	4682      	mov	sl, r0
 800552a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800552e:	2e00      	cmp	r6, #0
 8005530:	d158      	bne.n	80055e4 <_dtoa_r+0x4e4>
 8005532:	4b7e      	ldr	r3, [pc, #504]	; (800572c <_dtoa_r+0x62c>)
 8005534:	2200      	movs	r2, #0
 8005536:	4640      	mov	r0, r8
 8005538:	4649      	mov	r1, r9
 800553a:	f7fa febd 	bl	80002b8 <__aeabi_dsub>
 800553e:	4652      	mov	r2, sl
 8005540:	465b      	mov	r3, fp
 8005542:	4680      	mov	r8, r0
 8005544:	4689      	mov	r9, r1
 8005546:	f7fb faff 	bl	8000b48 <__aeabi_dcmpgt>
 800554a:	2800      	cmp	r0, #0
 800554c:	f040 8295 	bne.w	8005a7a <_dtoa_r+0x97a>
 8005550:	4652      	mov	r2, sl
 8005552:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8005556:	4640      	mov	r0, r8
 8005558:	4649      	mov	r1, r9
 800555a:	f7fb fad7 	bl	8000b0c <__aeabi_dcmplt>
 800555e:	2800      	cmp	r0, #0
 8005560:	f040 8289 	bne.w	8005a76 <_dtoa_r+0x976>
 8005564:	ec5b ab19 	vmov	sl, fp, d9
 8005568:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800556a:	2b00      	cmp	r3, #0
 800556c:	f2c0 8148 	blt.w	8005800 <_dtoa_r+0x700>
 8005570:	9a00      	ldr	r2, [sp, #0]
 8005572:	2a0e      	cmp	r2, #14
 8005574:	f300 8144 	bgt.w	8005800 <_dtoa_r+0x700>
 8005578:	4b67      	ldr	r3, [pc, #412]	; (8005718 <_dtoa_r+0x618>)
 800557a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800557e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005582:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005584:	2b00      	cmp	r3, #0
 8005586:	f280 80d5 	bge.w	8005734 <_dtoa_r+0x634>
 800558a:	9b03      	ldr	r3, [sp, #12]
 800558c:	2b00      	cmp	r3, #0
 800558e:	f300 80d1 	bgt.w	8005734 <_dtoa_r+0x634>
 8005592:	f040 826f 	bne.w	8005a74 <_dtoa_r+0x974>
 8005596:	4b65      	ldr	r3, [pc, #404]	; (800572c <_dtoa_r+0x62c>)
 8005598:	2200      	movs	r2, #0
 800559a:	4640      	mov	r0, r8
 800559c:	4649      	mov	r1, r9
 800559e:	f7fb f843 	bl	8000628 <__aeabi_dmul>
 80055a2:	4652      	mov	r2, sl
 80055a4:	465b      	mov	r3, fp
 80055a6:	f7fb fac5 	bl	8000b34 <__aeabi_dcmpge>
 80055aa:	9e03      	ldr	r6, [sp, #12]
 80055ac:	4637      	mov	r7, r6
 80055ae:	2800      	cmp	r0, #0
 80055b0:	f040 8245 	bne.w	8005a3e <_dtoa_r+0x93e>
 80055b4:	9d01      	ldr	r5, [sp, #4]
 80055b6:	2331      	movs	r3, #49	; 0x31
 80055b8:	f805 3b01 	strb.w	r3, [r5], #1
 80055bc:	9b00      	ldr	r3, [sp, #0]
 80055be:	3301      	adds	r3, #1
 80055c0:	9300      	str	r3, [sp, #0]
 80055c2:	e240      	b.n	8005a46 <_dtoa_r+0x946>
 80055c4:	07f2      	lsls	r2, r6, #31
 80055c6:	d505      	bpl.n	80055d4 <_dtoa_r+0x4d4>
 80055c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80055cc:	f7fb f82c 	bl	8000628 <__aeabi_dmul>
 80055d0:	3501      	adds	r5, #1
 80055d2:	2301      	movs	r3, #1
 80055d4:	1076      	asrs	r6, r6, #1
 80055d6:	3708      	adds	r7, #8
 80055d8:	e777      	b.n	80054ca <_dtoa_r+0x3ca>
 80055da:	2502      	movs	r5, #2
 80055dc:	e779      	b.n	80054d2 <_dtoa_r+0x3d2>
 80055de:	9f00      	ldr	r7, [sp, #0]
 80055e0:	9e03      	ldr	r6, [sp, #12]
 80055e2:	e794      	b.n	800550e <_dtoa_r+0x40e>
 80055e4:	9901      	ldr	r1, [sp, #4]
 80055e6:	4b4c      	ldr	r3, [pc, #304]	; (8005718 <_dtoa_r+0x618>)
 80055e8:	4431      	add	r1, r6
 80055ea:	910d      	str	r1, [sp, #52]	; 0x34
 80055ec:	9908      	ldr	r1, [sp, #32]
 80055ee:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80055f2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80055f6:	2900      	cmp	r1, #0
 80055f8:	d043      	beq.n	8005682 <_dtoa_r+0x582>
 80055fa:	494d      	ldr	r1, [pc, #308]	; (8005730 <_dtoa_r+0x630>)
 80055fc:	2000      	movs	r0, #0
 80055fe:	f7fb f93d 	bl	800087c <__aeabi_ddiv>
 8005602:	4652      	mov	r2, sl
 8005604:	465b      	mov	r3, fp
 8005606:	f7fa fe57 	bl	80002b8 <__aeabi_dsub>
 800560a:	9d01      	ldr	r5, [sp, #4]
 800560c:	4682      	mov	sl, r0
 800560e:	468b      	mov	fp, r1
 8005610:	4649      	mov	r1, r9
 8005612:	4640      	mov	r0, r8
 8005614:	f7fb fab8 	bl	8000b88 <__aeabi_d2iz>
 8005618:	4606      	mov	r6, r0
 800561a:	f7fa ff9b 	bl	8000554 <__aeabi_i2d>
 800561e:	4602      	mov	r2, r0
 8005620:	460b      	mov	r3, r1
 8005622:	4640      	mov	r0, r8
 8005624:	4649      	mov	r1, r9
 8005626:	f7fa fe47 	bl	80002b8 <__aeabi_dsub>
 800562a:	3630      	adds	r6, #48	; 0x30
 800562c:	f805 6b01 	strb.w	r6, [r5], #1
 8005630:	4652      	mov	r2, sl
 8005632:	465b      	mov	r3, fp
 8005634:	4680      	mov	r8, r0
 8005636:	4689      	mov	r9, r1
 8005638:	f7fb fa68 	bl	8000b0c <__aeabi_dcmplt>
 800563c:	2800      	cmp	r0, #0
 800563e:	d163      	bne.n	8005708 <_dtoa_r+0x608>
 8005640:	4642      	mov	r2, r8
 8005642:	464b      	mov	r3, r9
 8005644:	4936      	ldr	r1, [pc, #216]	; (8005720 <_dtoa_r+0x620>)
 8005646:	2000      	movs	r0, #0
 8005648:	f7fa fe36 	bl	80002b8 <__aeabi_dsub>
 800564c:	4652      	mov	r2, sl
 800564e:	465b      	mov	r3, fp
 8005650:	f7fb fa5c 	bl	8000b0c <__aeabi_dcmplt>
 8005654:	2800      	cmp	r0, #0
 8005656:	f040 80b5 	bne.w	80057c4 <_dtoa_r+0x6c4>
 800565a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800565c:	429d      	cmp	r5, r3
 800565e:	d081      	beq.n	8005564 <_dtoa_r+0x464>
 8005660:	4b30      	ldr	r3, [pc, #192]	; (8005724 <_dtoa_r+0x624>)
 8005662:	2200      	movs	r2, #0
 8005664:	4650      	mov	r0, sl
 8005666:	4659      	mov	r1, fp
 8005668:	f7fa ffde 	bl	8000628 <__aeabi_dmul>
 800566c:	4b2d      	ldr	r3, [pc, #180]	; (8005724 <_dtoa_r+0x624>)
 800566e:	4682      	mov	sl, r0
 8005670:	468b      	mov	fp, r1
 8005672:	4640      	mov	r0, r8
 8005674:	4649      	mov	r1, r9
 8005676:	2200      	movs	r2, #0
 8005678:	f7fa ffd6 	bl	8000628 <__aeabi_dmul>
 800567c:	4680      	mov	r8, r0
 800567e:	4689      	mov	r9, r1
 8005680:	e7c6      	b.n	8005610 <_dtoa_r+0x510>
 8005682:	4650      	mov	r0, sl
 8005684:	4659      	mov	r1, fp
 8005686:	f7fa ffcf 	bl	8000628 <__aeabi_dmul>
 800568a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800568c:	9d01      	ldr	r5, [sp, #4]
 800568e:	930f      	str	r3, [sp, #60]	; 0x3c
 8005690:	4682      	mov	sl, r0
 8005692:	468b      	mov	fp, r1
 8005694:	4649      	mov	r1, r9
 8005696:	4640      	mov	r0, r8
 8005698:	f7fb fa76 	bl	8000b88 <__aeabi_d2iz>
 800569c:	4606      	mov	r6, r0
 800569e:	f7fa ff59 	bl	8000554 <__aeabi_i2d>
 80056a2:	3630      	adds	r6, #48	; 0x30
 80056a4:	4602      	mov	r2, r0
 80056a6:	460b      	mov	r3, r1
 80056a8:	4640      	mov	r0, r8
 80056aa:	4649      	mov	r1, r9
 80056ac:	f7fa fe04 	bl	80002b8 <__aeabi_dsub>
 80056b0:	f805 6b01 	strb.w	r6, [r5], #1
 80056b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80056b6:	429d      	cmp	r5, r3
 80056b8:	4680      	mov	r8, r0
 80056ba:	4689      	mov	r9, r1
 80056bc:	f04f 0200 	mov.w	r2, #0
 80056c0:	d124      	bne.n	800570c <_dtoa_r+0x60c>
 80056c2:	4b1b      	ldr	r3, [pc, #108]	; (8005730 <_dtoa_r+0x630>)
 80056c4:	4650      	mov	r0, sl
 80056c6:	4659      	mov	r1, fp
 80056c8:	f7fa fdf8 	bl	80002bc <__adddf3>
 80056cc:	4602      	mov	r2, r0
 80056ce:	460b      	mov	r3, r1
 80056d0:	4640      	mov	r0, r8
 80056d2:	4649      	mov	r1, r9
 80056d4:	f7fb fa38 	bl	8000b48 <__aeabi_dcmpgt>
 80056d8:	2800      	cmp	r0, #0
 80056da:	d173      	bne.n	80057c4 <_dtoa_r+0x6c4>
 80056dc:	4652      	mov	r2, sl
 80056de:	465b      	mov	r3, fp
 80056e0:	4913      	ldr	r1, [pc, #76]	; (8005730 <_dtoa_r+0x630>)
 80056e2:	2000      	movs	r0, #0
 80056e4:	f7fa fde8 	bl	80002b8 <__aeabi_dsub>
 80056e8:	4602      	mov	r2, r0
 80056ea:	460b      	mov	r3, r1
 80056ec:	4640      	mov	r0, r8
 80056ee:	4649      	mov	r1, r9
 80056f0:	f7fb fa0c 	bl	8000b0c <__aeabi_dcmplt>
 80056f4:	2800      	cmp	r0, #0
 80056f6:	f43f af35 	beq.w	8005564 <_dtoa_r+0x464>
 80056fa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80056fc:	1e6b      	subs	r3, r5, #1
 80056fe:	930f      	str	r3, [sp, #60]	; 0x3c
 8005700:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005704:	2b30      	cmp	r3, #48	; 0x30
 8005706:	d0f8      	beq.n	80056fa <_dtoa_r+0x5fa>
 8005708:	9700      	str	r7, [sp, #0]
 800570a:	e049      	b.n	80057a0 <_dtoa_r+0x6a0>
 800570c:	4b05      	ldr	r3, [pc, #20]	; (8005724 <_dtoa_r+0x624>)
 800570e:	f7fa ff8b 	bl	8000628 <__aeabi_dmul>
 8005712:	4680      	mov	r8, r0
 8005714:	4689      	mov	r9, r1
 8005716:	e7bd      	b.n	8005694 <_dtoa_r+0x594>
 8005718:	08008d88 	.word	0x08008d88
 800571c:	08008d60 	.word	0x08008d60
 8005720:	3ff00000 	.word	0x3ff00000
 8005724:	40240000 	.word	0x40240000
 8005728:	401c0000 	.word	0x401c0000
 800572c:	40140000 	.word	0x40140000
 8005730:	3fe00000 	.word	0x3fe00000
 8005734:	9d01      	ldr	r5, [sp, #4]
 8005736:	4656      	mov	r6, sl
 8005738:	465f      	mov	r7, fp
 800573a:	4642      	mov	r2, r8
 800573c:	464b      	mov	r3, r9
 800573e:	4630      	mov	r0, r6
 8005740:	4639      	mov	r1, r7
 8005742:	f7fb f89b 	bl	800087c <__aeabi_ddiv>
 8005746:	f7fb fa1f 	bl	8000b88 <__aeabi_d2iz>
 800574a:	4682      	mov	sl, r0
 800574c:	f7fa ff02 	bl	8000554 <__aeabi_i2d>
 8005750:	4642      	mov	r2, r8
 8005752:	464b      	mov	r3, r9
 8005754:	f7fa ff68 	bl	8000628 <__aeabi_dmul>
 8005758:	4602      	mov	r2, r0
 800575a:	460b      	mov	r3, r1
 800575c:	4630      	mov	r0, r6
 800575e:	4639      	mov	r1, r7
 8005760:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8005764:	f7fa fda8 	bl	80002b8 <__aeabi_dsub>
 8005768:	f805 6b01 	strb.w	r6, [r5], #1
 800576c:	9e01      	ldr	r6, [sp, #4]
 800576e:	9f03      	ldr	r7, [sp, #12]
 8005770:	1bae      	subs	r6, r5, r6
 8005772:	42b7      	cmp	r7, r6
 8005774:	4602      	mov	r2, r0
 8005776:	460b      	mov	r3, r1
 8005778:	d135      	bne.n	80057e6 <_dtoa_r+0x6e6>
 800577a:	f7fa fd9f 	bl	80002bc <__adddf3>
 800577e:	4642      	mov	r2, r8
 8005780:	464b      	mov	r3, r9
 8005782:	4606      	mov	r6, r0
 8005784:	460f      	mov	r7, r1
 8005786:	f7fb f9df 	bl	8000b48 <__aeabi_dcmpgt>
 800578a:	b9d0      	cbnz	r0, 80057c2 <_dtoa_r+0x6c2>
 800578c:	4642      	mov	r2, r8
 800578e:	464b      	mov	r3, r9
 8005790:	4630      	mov	r0, r6
 8005792:	4639      	mov	r1, r7
 8005794:	f7fb f9b0 	bl	8000af8 <__aeabi_dcmpeq>
 8005798:	b110      	cbz	r0, 80057a0 <_dtoa_r+0x6a0>
 800579a:	f01a 0f01 	tst.w	sl, #1
 800579e:	d110      	bne.n	80057c2 <_dtoa_r+0x6c2>
 80057a0:	4620      	mov	r0, r4
 80057a2:	ee18 1a10 	vmov	r1, s16
 80057a6:	f000 fe87 	bl	80064b8 <_Bfree>
 80057aa:	2300      	movs	r3, #0
 80057ac:	9800      	ldr	r0, [sp, #0]
 80057ae:	702b      	strb	r3, [r5, #0]
 80057b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80057b2:	3001      	adds	r0, #1
 80057b4:	6018      	str	r0, [r3, #0]
 80057b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	f43f acf1 	beq.w	80051a0 <_dtoa_r+0xa0>
 80057be:	601d      	str	r5, [r3, #0]
 80057c0:	e4ee      	b.n	80051a0 <_dtoa_r+0xa0>
 80057c2:	9f00      	ldr	r7, [sp, #0]
 80057c4:	462b      	mov	r3, r5
 80057c6:	461d      	mov	r5, r3
 80057c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80057cc:	2a39      	cmp	r2, #57	; 0x39
 80057ce:	d106      	bne.n	80057de <_dtoa_r+0x6de>
 80057d0:	9a01      	ldr	r2, [sp, #4]
 80057d2:	429a      	cmp	r2, r3
 80057d4:	d1f7      	bne.n	80057c6 <_dtoa_r+0x6c6>
 80057d6:	9901      	ldr	r1, [sp, #4]
 80057d8:	2230      	movs	r2, #48	; 0x30
 80057da:	3701      	adds	r7, #1
 80057dc:	700a      	strb	r2, [r1, #0]
 80057de:	781a      	ldrb	r2, [r3, #0]
 80057e0:	3201      	adds	r2, #1
 80057e2:	701a      	strb	r2, [r3, #0]
 80057e4:	e790      	b.n	8005708 <_dtoa_r+0x608>
 80057e6:	4ba6      	ldr	r3, [pc, #664]	; (8005a80 <_dtoa_r+0x980>)
 80057e8:	2200      	movs	r2, #0
 80057ea:	f7fa ff1d 	bl	8000628 <__aeabi_dmul>
 80057ee:	2200      	movs	r2, #0
 80057f0:	2300      	movs	r3, #0
 80057f2:	4606      	mov	r6, r0
 80057f4:	460f      	mov	r7, r1
 80057f6:	f7fb f97f 	bl	8000af8 <__aeabi_dcmpeq>
 80057fa:	2800      	cmp	r0, #0
 80057fc:	d09d      	beq.n	800573a <_dtoa_r+0x63a>
 80057fe:	e7cf      	b.n	80057a0 <_dtoa_r+0x6a0>
 8005800:	9a08      	ldr	r2, [sp, #32]
 8005802:	2a00      	cmp	r2, #0
 8005804:	f000 80d7 	beq.w	80059b6 <_dtoa_r+0x8b6>
 8005808:	9a06      	ldr	r2, [sp, #24]
 800580a:	2a01      	cmp	r2, #1
 800580c:	f300 80ba 	bgt.w	8005984 <_dtoa_r+0x884>
 8005810:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005812:	2a00      	cmp	r2, #0
 8005814:	f000 80b2 	beq.w	800597c <_dtoa_r+0x87c>
 8005818:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800581c:	9e07      	ldr	r6, [sp, #28]
 800581e:	9d04      	ldr	r5, [sp, #16]
 8005820:	9a04      	ldr	r2, [sp, #16]
 8005822:	441a      	add	r2, r3
 8005824:	9204      	str	r2, [sp, #16]
 8005826:	9a05      	ldr	r2, [sp, #20]
 8005828:	2101      	movs	r1, #1
 800582a:	441a      	add	r2, r3
 800582c:	4620      	mov	r0, r4
 800582e:	9205      	str	r2, [sp, #20]
 8005830:	f000 ff44 	bl	80066bc <__i2b>
 8005834:	4607      	mov	r7, r0
 8005836:	2d00      	cmp	r5, #0
 8005838:	dd0c      	ble.n	8005854 <_dtoa_r+0x754>
 800583a:	9b05      	ldr	r3, [sp, #20]
 800583c:	2b00      	cmp	r3, #0
 800583e:	dd09      	ble.n	8005854 <_dtoa_r+0x754>
 8005840:	42ab      	cmp	r3, r5
 8005842:	9a04      	ldr	r2, [sp, #16]
 8005844:	bfa8      	it	ge
 8005846:	462b      	movge	r3, r5
 8005848:	1ad2      	subs	r2, r2, r3
 800584a:	9204      	str	r2, [sp, #16]
 800584c:	9a05      	ldr	r2, [sp, #20]
 800584e:	1aed      	subs	r5, r5, r3
 8005850:	1ad3      	subs	r3, r2, r3
 8005852:	9305      	str	r3, [sp, #20]
 8005854:	9b07      	ldr	r3, [sp, #28]
 8005856:	b31b      	cbz	r3, 80058a0 <_dtoa_r+0x7a0>
 8005858:	9b08      	ldr	r3, [sp, #32]
 800585a:	2b00      	cmp	r3, #0
 800585c:	f000 80af 	beq.w	80059be <_dtoa_r+0x8be>
 8005860:	2e00      	cmp	r6, #0
 8005862:	dd13      	ble.n	800588c <_dtoa_r+0x78c>
 8005864:	4639      	mov	r1, r7
 8005866:	4632      	mov	r2, r6
 8005868:	4620      	mov	r0, r4
 800586a:	f000 ffe7 	bl	800683c <__pow5mult>
 800586e:	ee18 2a10 	vmov	r2, s16
 8005872:	4601      	mov	r1, r0
 8005874:	4607      	mov	r7, r0
 8005876:	4620      	mov	r0, r4
 8005878:	f000 ff36 	bl	80066e8 <__multiply>
 800587c:	ee18 1a10 	vmov	r1, s16
 8005880:	4680      	mov	r8, r0
 8005882:	4620      	mov	r0, r4
 8005884:	f000 fe18 	bl	80064b8 <_Bfree>
 8005888:	ee08 8a10 	vmov	s16, r8
 800588c:	9b07      	ldr	r3, [sp, #28]
 800588e:	1b9a      	subs	r2, r3, r6
 8005890:	d006      	beq.n	80058a0 <_dtoa_r+0x7a0>
 8005892:	ee18 1a10 	vmov	r1, s16
 8005896:	4620      	mov	r0, r4
 8005898:	f000 ffd0 	bl	800683c <__pow5mult>
 800589c:	ee08 0a10 	vmov	s16, r0
 80058a0:	2101      	movs	r1, #1
 80058a2:	4620      	mov	r0, r4
 80058a4:	f000 ff0a 	bl	80066bc <__i2b>
 80058a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	4606      	mov	r6, r0
 80058ae:	f340 8088 	ble.w	80059c2 <_dtoa_r+0x8c2>
 80058b2:	461a      	mov	r2, r3
 80058b4:	4601      	mov	r1, r0
 80058b6:	4620      	mov	r0, r4
 80058b8:	f000 ffc0 	bl	800683c <__pow5mult>
 80058bc:	9b06      	ldr	r3, [sp, #24]
 80058be:	2b01      	cmp	r3, #1
 80058c0:	4606      	mov	r6, r0
 80058c2:	f340 8081 	ble.w	80059c8 <_dtoa_r+0x8c8>
 80058c6:	f04f 0800 	mov.w	r8, #0
 80058ca:	6933      	ldr	r3, [r6, #16]
 80058cc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80058d0:	6918      	ldr	r0, [r3, #16]
 80058d2:	f000 fea3 	bl	800661c <__hi0bits>
 80058d6:	f1c0 0020 	rsb	r0, r0, #32
 80058da:	9b05      	ldr	r3, [sp, #20]
 80058dc:	4418      	add	r0, r3
 80058de:	f010 001f 	ands.w	r0, r0, #31
 80058e2:	f000 8092 	beq.w	8005a0a <_dtoa_r+0x90a>
 80058e6:	f1c0 0320 	rsb	r3, r0, #32
 80058ea:	2b04      	cmp	r3, #4
 80058ec:	f340 808a 	ble.w	8005a04 <_dtoa_r+0x904>
 80058f0:	f1c0 001c 	rsb	r0, r0, #28
 80058f4:	9b04      	ldr	r3, [sp, #16]
 80058f6:	4403      	add	r3, r0
 80058f8:	9304      	str	r3, [sp, #16]
 80058fa:	9b05      	ldr	r3, [sp, #20]
 80058fc:	4403      	add	r3, r0
 80058fe:	4405      	add	r5, r0
 8005900:	9305      	str	r3, [sp, #20]
 8005902:	9b04      	ldr	r3, [sp, #16]
 8005904:	2b00      	cmp	r3, #0
 8005906:	dd07      	ble.n	8005918 <_dtoa_r+0x818>
 8005908:	ee18 1a10 	vmov	r1, s16
 800590c:	461a      	mov	r2, r3
 800590e:	4620      	mov	r0, r4
 8005910:	f000 ffee 	bl	80068f0 <__lshift>
 8005914:	ee08 0a10 	vmov	s16, r0
 8005918:	9b05      	ldr	r3, [sp, #20]
 800591a:	2b00      	cmp	r3, #0
 800591c:	dd05      	ble.n	800592a <_dtoa_r+0x82a>
 800591e:	4631      	mov	r1, r6
 8005920:	461a      	mov	r2, r3
 8005922:	4620      	mov	r0, r4
 8005924:	f000 ffe4 	bl	80068f0 <__lshift>
 8005928:	4606      	mov	r6, r0
 800592a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800592c:	2b00      	cmp	r3, #0
 800592e:	d06e      	beq.n	8005a0e <_dtoa_r+0x90e>
 8005930:	ee18 0a10 	vmov	r0, s16
 8005934:	4631      	mov	r1, r6
 8005936:	f001 f84b 	bl	80069d0 <__mcmp>
 800593a:	2800      	cmp	r0, #0
 800593c:	da67      	bge.n	8005a0e <_dtoa_r+0x90e>
 800593e:	9b00      	ldr	r3, [sp, #0]
 8005940:	3b01      	subs	r3, #1
 8005942:	ee18 1a10 	vmov	r1, s16
 8005946:	9300      	str	r3, [sp, #0]
 8005948:	220a      	movs	r2, #10
 800594a:	2300      	movs	r3, #0
 800594c:	4620      	mov	r0, r4
 800594e:	f000 fdd5 	bl	80064fc <__multadd>
 8005952:	9b08      	ldr	r3, [sp, #32]
 8005954:	ee08 0a10 	vmov	s16, r0
 8005958:	2b00      	cmp	r3, #0
 800595a:	f000 81b1 	beq.w	8005cc0 <_dtoa_r+0xbc0>
 800595e:	2300      	movs	r3, #0
 8005960:	4639      	mov	r1, r7
 8005962:	220a      	movs	r2, #10
 8005964:	4620      	mov	r0, r4
 8005966:	f000 fdc9 	bl	80064fc <__multadd>
 800596a:	9b02      	ldr	r3, [sp, #8]
 800596c:	2b00      	cmp	r3, #0
 800596e:	4607      	mov	r7, r0
 8005970:	f300 808e 	bgt.w	8005a90 <_dtoa_r+0x990>
 8005974:	9b06      	ldr	r3, [sp, #24]
 8005976:	2b02      	cmp	r3, #2
 8005978:	dc51      	bgt.n	8005a1e <_dtoa_r+0x91e>
 800597a:	e089      	b.n	8005a90 <_dtoa_r+0x990>
 800597c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800597e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005982:	e74b      	b.n	800581c <_dtoa_r+0x71c>
 8005984:	9b03      	ldr	r3, [sp, #12]
 8005986:	1e5e      	subs	r6, r3, #1
 8005988:	9b07      	ldr	r3, [sp, #28]
 800598a:	42b3      	cmp	r3, r6
 800598c:	bfbf      	itttt	lt
 800598e:	9b07      	ldrlt	r3, [sp, #28]
 8005990:	9607      	strlt	r6, [sp, #28]
 8005992:	1af2      	sublt	r2, r6, r3
 8005994:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005996:	bfb6      	itet	lt
 8005998:	189b      	addlt	r3, r3, r2
 800599a:	1b9e      	subge	r6, r3, r6
 800599c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800599e:	9b03      	ldr	r3, [sp, #12]
 80059a0:	bfb8      	it	lt
 80059a2:	2600      	movlt	r6, #0
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	bfb7      	itett	lt
 80059a8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80059ac:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80059b0:	1a9d      	sublt	r5, r3, r2
 80059b2:	2300      	movlt	r3, #0
 80059b4:	e734      	b.n	8005820 <_dtoa_r+0x720>
 80059b6:	9e07      	ldr	r6, [sp, #28]
 80059b8:	9d04      	ldr	r5, [sp, #16]
 80059ba:	9f08      	ldr	r7, [sp, #32]
 80059bc:	e73b      	b.n	8005836 <_dtoa_r+0x736>
 80059be:	9a07      	ldr	r2, [sp, #28]
 80059c0:	e767      	b.n	8005892 <_dtoa_r+0x792>
 80059c2:	9b06      	ldr	r3, [sp, #24]
 80059c4:	2b01      	cmp	r3, #1
 80059c6:	dc18      	bgt.n	80059fa <_dtoa_r+0x8fa>
 80059c8:	f1ba 0f00 	cmp.w	sl, #0
 80059cc:	d115      	bne.n	80059fa <_dtoa_r+0x8fa>
 80059ce:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80059d2:	b993      	cbnz	r3, 80059fa <_dtoa_r+0x8fa>
 80059d4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80059d8:	0d1b      	lsrs	r3, r3, #20
 80059da:	051b      	lsls	r3, r3, #20
 80059dc:	b183      	cbz	r3, 8005a00 <_dtoa_r+0x900>
 80059de:	9b04      	ldr	r3, [sp, #16]
 80059e0:	3301      	adds	r3, #1
 80059e2:	9304      	str	r3, [sp, #16]
 80059e4:	9b05      	ldr	r3, [sp, #20]
 80059e6:	3301      	adds	r3, #1
 80059e8:	9305      	str	r3, [sp, #20]
 80059ea:	f04f 0801 	mov.w	r8, #1
 80059ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	f47f af6a 	bne.w	80058ca <_dtoa_r+0x7ca>
 80059f6:	2001      	movs	r0, #1
 80059f8:	e76f      	b.n	80058da <_dtoa_r+0x7da>
 80059fa:	f04f 0800 	mov.w	r8, #0
 80059fe:	e7f6      	b.n	80059ee <_dtoa_r+0x8ee>
 8005a00:	4698      	mov	r8, r3
 8005a02:	e7f4      	b.n	80059ee <_dtoa_r+0x8ee>
 8005a04:	f43f af7d 	beq.w	8005902 <_dtoa_r+0x802>
 8005a08:	4618      	mov	r0, r3
 8005a0a:	301c      	adds	r0, #28
 8005a0c:	e772      	b.n	80058f4 <_dtoa_r+0x7f4>
 8005a0e:	9b03      	ldr	r3, [sp, #12]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	dc37      	bgt.n	8005a84 <_dtoa_r+0x984>
 8005a14:	9b06      	ldr	r3, [sp, #24]
 8005a16:	2b02      	cmp	r3, #2
 8005a18:	dd34      	ble.n	8005a84 <_dtoa_r+0x984>
 8005a1a:	9b03      	ldr	r3, [sp, #12]
 8005a1c:	9302      	str	r3, [sp, #8]
 8005a1e:	9b02      	ldr	r3, [sp, #8]
 8005a20:	b96b      	cbnz	r3, 8005a3e <_dtoa_r+0x93e>
 8005a22:	4631      	mov	r1, r6
 8005a24:	2205      	movs	r2, #5
 8005a26:	4620      	mov	r0, r4
 8005a28:	f000 fd68 	bl	80064fc <__multadd>
 8005a2c:	4601      	mov	r1, r0
 8005a2e:	4606      	mov	r6, r0
 8005a30:	ee18 0a10 	vmov	r0, s16
 8005a34:	f000 ffcc 	bl	80069d0 <__mcmp>
 8005a38:	2800      	cmp	r0, #0
 8005a3a:	f73f adbb 	bgt.w	80055b4 <_dtoa_r+0x4b4>
 8005a3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a40:	9d01      	ldr	r5, [sp, #4]
 8005a42:	43db      	mvns	r3, r3
 8005a44:	9300      	str	r3, [sp, #0]
 8005a46:	f04f 0800 	mov.w	r8, #0
 8005a4a:	4631      	mov	r1, r6
 8005a4c:	4620      	mov	r0, r4
 8005a4e:	f000 fd33 	bl	80064b8 <_Bfree>
 8005a52:	2f00      	cmp	r7, #0
 8005a54:	f43f aea4 	beq.w	80057a0 <_dtoa_r+0x6a0>
 8005a58:	f1b8 0f00 	cmp.w	r8, #0
 8005a5c:	d005      	beq.n	8005a6a <_dtoa_r+0x96a>
 8005a5e:	45b8      	cmp	r8, r7
 8005a60:	d003      	beq.n	8005a6a <_dtoa_r+0x96a>
 8005a62:	4641      	mov	r1, r8
 8005a64:	4620      	mov	r0, r4
 8005a66:	f000 fd27 	bl	80064b8 <_Bfree>
 8005a6a:	4639      	mov	r1, r7
 8005a6c:	4620      	mov	r0, r4
 8005a6e:	f000 fd23 	bl	80064b8 <_Bfree>
 8005a72:	e695      	b.n	80057a0 <_dtoa_r+0x6a0>
 8005a74:	2600      	movs	r6, #0
 8005a76:	4637      	mov	r7, r6
 8005a78:	e7e1      	b.n	8005a3e <_dtoa_r+0x93e>
 8005a7a:	9700      	str	r7, [sp, #0]
 8005a7c:	4637      	mov	r7, r6
 8005a7e:	e599      	b.n	80055b4 <_dtoa_r+0x4b4>
 8005a80:	40240000 	.word	0x40240000
 8005a84:	9b08      	ldr	r3, [sp, #32]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	f000 80ca 	beq.w	8005c20 <_dtoa_r+0xb20>
 8005a8c:	9b03      	ldr	r3, [sp, #12]
 8005a8e:	9302      	str	r3, [sp, #8]
 8005a90:	2d00      	cmp	r5, #0
 8005a92:	dd05      	ble.n	8005aa0 <_dtoa_r+0x9a0>
 8005a94:	4639      	mov	r1, r7
 8005a96:	462a      	mov	r2, r5
 8005a98:	4620      	mov	r0, r4
 8005a9a:	f000 ff29 	bl	80068f0 <__lshift>
 8005a9e:	4607      	mov	r7, r0
 8005aa0:	f1b8 0f00 	cmp.w	r8, #0
 8005aa4:	d05b      	beq.n	8005b5e <_dtoa_r+0xa5e>
 8005aa6:	6879      	ldr	r1, [r7, #4]
 8005aa8:	4620      	mov	r0, r4
 8005aaa:	f000 fcc5 	bl	8006438 <_Balloc>
 8005aae:	4605      	mov	r5, r0
 8005ab0:	b928      	cbnz	r0, 8005abe <_dtoa_r+0x9be>
 8005ab2:	4b87      	ldr	r3, [pc, #540]	; (8005cd0 <_dtoa_r+0xbd0>)
 8005ab4:	4602      	mov	r2, r0
 8005ab6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005aba:	f7ff bb3b 	b.w	8005134 <_dtoa_r+0x34>
 8005abe:	693a      	ldr	r2, [r7, #16]
 8005ac0:	3202      	adds	r2, #2
 8005ac2:	0092      	lsls	r2, r2, #2
 8005ac4:	f107 010c 	add.w	r1, r7, #12
 8005ac8:	300c      	adds	r0, #12
 8005aca:	f000 fca7 	bl	800641c <memcpy>
 8005ace:	2201      	movs	r2, #1
 8005ad0:	4629      	mov	r1, r5
 8005ad2:	4620      	mov	r0, r4
 8005ad4:	f000 ff0c 	bl	80068f0 <__lshift>
 8005ad8:	9b01      	ldr	r3, [sp, #4]
 8005ada:	f103 0901 	add.w	r9, r3, #1
 8005ade:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8005ae2:	4413      	add	r3, r2
 8005ae4:	9305      	str	r3, [sp, #20]
 8005ae6:	f00a 0301 	and.w	r3, sl, #1
 8005aea:	46b8      	mov	r8, r7
 8005aec:	9304      	str	r3, [sp, #16]
 8005aee:	4607      	mov	r7, r0
 8005af0:	4631      	mov	r1, r6
 8005af2:	ee18 0a10 	vmov	r0, s16
 8005af6:	f7ff fa75 	bl	8004fe4 <quorem>
 8005afa:	4641      	mov	r1, r8
 8005afc:	9002      	str	r0, [sp, #8]
 8005afe:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8005b02:	ee18 0a10 	vmov	r0, s16
 8005b06:	f000 ff63 	bl	80069d0 <__mcmp>
 8005b0a:	463a      	mov	r2, r7
 8005b0c:	9003      	str	r0, [sp, #12]
 8005b0e:	4631      	mov	r1, r6
 8005b10:	4620      	mov	r0, r4
 8005b12:	f000 ff79 	bl	8006a08 <__mdiff>
 8005b16:	68c2      	ldr	r2, [r0, #12]
 8005b18:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8005b1c:	4605      	mov	r5, r0
 8005b1e:	bb02      	cbnz	r2, 8005b62 <_dtoa_r+0xa62>
 8005b20:	4601      	mov	r1, r0
 8005b22:	ee18 0a10 	vmov	r0, s16
 8005b26:	f000 ff53 	bl	80069d0 <__mcmp>
 8005b2a:	4602      	mov	r2, r0
 8005b2c:	4629      	mov	r1, r5
 8005b2e:	4620      	mov	r0, r4
 8005b30:	9207      	str	r2, [sp, #28]
 8005b32:	f000 fcc1 	bl	80064b8 <_Bfree>
 8005b36:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8005b3a:	ea43 0102 	orr.w	r1, r3, r2
 8005b3e:	9b04      	ldr	r3, [sp, #16]
 8005b40:	430b      	orrs	r3, r1
 8005b42:	464d      	mov	r5, r9
 8005b44:	d10f      	bne.n	8005b66 <_dtoa_r+0xa66>
 8005b46:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005b4a:	d02a      	beq.n	8005ba2 <_dtoa_r+0xaa2>
 8005b4c:	9b03      	ldr	r3, [sp, #12]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	dd02      	ble.n	8005b58 <_dtoa_r+0xa58>
 8005b52:	9b02      	ldr	r3, [sp, #8]
 8005b54:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8005b58:	f88b a000 	strb.w	sl, [fp]
 8005b5c:	e775      	b.n	8005a4a <_dtoa_r+0x94a>
 8005b5e:	4638      	mov	r0, r7
 8005b60:	e7ba      	b.n	8005ad8 <_dtoa_r+0x9d8>
 8005b62:	2201      	movs	r2, #1
 8005b64:	e7e2      	b.n	8005b2c <_dtoa_r+0xa2c>
 8005b66:	9b03      	ldr	r3, [sp, #12]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	db04      	blt.n	8005b76 <_dtoa_r+0xa76>
 8005b6c:	9906      	ldr	r1, [sp, #24]
 8005b6e:	430b      	orrs	r3, r1
 8005b70:	9904      	ldr	r1, [sp, #16]
 8005b72:	430b      	orrs	r3, r1
 8005b74:	d122      	bne.n	8005bbc <_dtoa_r+0xabc>
 8005b76:	2a00      	cmp	r2, #0
 8005b78:	ddee      	ble.n	8005b58 <_dtoa_r+0xa58>
 8005b7a:	ee18 1a10 	vmov	r1, s16
 8005b7e:	2201      	movs	r2, #1
 8005b80:	4620      	mov	r0, r4
 8005b82:	f000 feb5 	bl	80068f0 <__lshift>
 8005b86:	4631      	mov	r1, r6
 8005b88:	ee08 0a10 	vmov	s16, r0
 8005b8c:	f000 ff20 	bl	80069d0 <__mcmp>
 8005b90:	2800      	cmp	r0, #0
 8005b92:	dc03      	bgt.n	8005b9c <_dtoa_r+0xa9c>
 8005b94:	d1e0      	bne.n	8005b58 <_dtoa_r+0xa58>
 8005b96:	f01a 0f01 	tst.w	sl, #1
 8005b9a:	d0dd      	beq.n	8005b58 <_dtoa_r+0xa58>
 8005b9c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005ba0:	d1d7      	bne.n	8005b52 <_dtoa_r+0xa52>
 8005ba2:	2339      	movs	r3, #57	; 0x39
 8005ba4:	f88b 3000 	strb.w	r3, [fp]
 8005ba8:	462b      	mov	r3, r5
 8005baa:	461d      	mov	r5, r3
 8005bac:	3b01      	subs	r3, #1
 8005bae:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005bb2:	2a39      	cmp	r2, #57	; 0x39
 8005bb4:	d071      	beq.n	8005c9a <_dtoa_r+0xb9a>
 8005bb6:	3201      	adds	r2, #1
 8005bb8:	701a      	strb	r2, [r3, #0]
 8005bba:	e746      	b.n	8005a4a <_dtoa_r+0x94a>
 8005bbc:	2a00      	cmp	r2, #0
 8005bbe:	dd07      	ble.n	8005bd0 <_dtoa_r+0xad0>
 8005bc0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005bc4:	d0ed      	beq.n	8005ba2 <_dtoa_r+0xaa2>
 8005bc6:	f10a 0301 	add.w	r3, sl, #1
 8005bca:	f88b 3000 	strb.w	r3, [fp]
 8005bce:	e73c      	b.n	8005a4a <_dtoa_r+0x94a>
 8005bd0:	9b05      	ldr	r3, [sp, #20]
 8005bd2:	f809 ac01 	strb.w	sl, [r9, #-1]
 8005bd6:	4599      	cmp	r9, r3
 8005bd8:	d047      	beq.n	8005c6a <_dtoa_r+0xb6a>
 8005bda:	ee18 1a10 	vmov	r1, s16
 8005bde:	2300      	movs	r3, #0
 8005be0:	220a      	movs	r2, #10
 8005be2:	4620      	mov	r0, r4
 8005be4:	f000 fc8a 	bl	80064fc <__multadd>
 8005be8:	45b8      	cmp	r8, r7
 8005bea:	ee08 0a10 	vmov	s16, r0
 8005bee:	f04f 0300 	mov.w	r3, #0
 8005bf2:	f04f 020a 	mov.w	r2, #10
 8005bf6:	4641      	mov	r1, r8
 8005bf8:	4620      	mov	r0, r4
 8005bfa:	d106      	bne.n	8005c0a <_dtoa_r+0xb0a>
 8005bfc:	f000 fc7e 	bl	80064fc <__multadd>
 8005c00:	4680      	mov	r8, r0
 8005c02:	4607      	mov	r7, r0
 8005c04:	f109 0901 	add.w	r9, r9, #1
 8005c08:	e772      	b.n	8005af0 <_dtoa_r+0x9f0>
 8005c0a:	f000 fc77 	bl	80064fc <__multadd>
 8005c0e:	4639      	mov	r1, r7
 8005c10:	4680      	mov	r8, r0
 8005c12:	2300      	movs	r3, #0
 8005c14:	220a      	movs	r2, #10
 8005c16:	4620      	mov	r0, r4
 8005c18:	f000 fc70 	bl	80064fc <__multadd>
 8005c1c:	4607      	mov	r7, r0
 8005c1e:	e7f1      	b.n	8005c04 <_dtoa_r+0xb04>
 8005c20:	9b03      	ldr	r3, [sp, #12]
 8005c22:	9302      	str	r3, [sp, #8]
 8005c24:	9d01      	ldr	r5, [sp, #4]
 8005c26:	ee18 0a10 	vmov	r0, s16
 8005c2a:	4631      	mov	r1, r6
 8005c2c:	f7ff f9da 	bl	8004fe4 <quorem>
 8005c30:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8005c34:	9b01      	ldr	r3, [sp, #4]
 8005c36:	f805 ab01 	strb.w	sl, [r5], #1
 8005c3a:	1aea      	subs	r2, r5, r3
 8005c3c:	9b02      	ldr	r3, [sp, #8]
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	dd09      	ble.n	8005c56 <_dtoa_r+0xb56>
 8005c42:	ee18 1a10 	vmov	r1, s16
 8005c46:	2300      	movs	r3, #0
 8005c48:	220a      	movs	r2, #10
 8005c4a:	4620      	mov	r0, r4
 8005c4c:	f000 fc56 	bl	80064fc <__multadd>
 8005c50:	ee08 0a10 	vmov	s16, r0
 8005c54:	e7e7      	b.n	8005c26 <_dtoa_r+0xb26>
 8005c56:	9b02      	ldr	r3, [sp, #8]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	bfc8      	it	gt
 8005c5c:	461d      	movgt	r5, r3
 8005c5e:	9b01      	ldr	r3, [sp, #4]
 8005c60:	bfd8      	it	le
 8005c62:	2501      	movle	r5, #1
 8005c64:	441d      	add	r5, r3
 8005c66:	f04f 0800 	mov.w	r8, #0
 8005c6a:	ee18 1a10 	vmov	r1, s16
 8005c6e:	2201      	movs	r2, #1
 8005c70:	4620      	mov	r0, r4
 8005c72:	f000 fe3d 	bl	80068f0 <__lshift>
 8005c76:	4631      	mov	r1, r6
 8005c78:	ee08 0a10 	vmov	s16, r0
 8005c7c:	f000 fea8 	bl	80069d0 <__mcmp>
 8005c80:	2800      	cmp	r0, #0
 8005c82:	dc91      	bgt.n	8005ba8 <_dtoa_r+0xaa8>
 8005c84:	d102      	bne.n	8005c8c <_dtoa_r+0xb8c>
 8005c86:	f01a 0f01 	tst.w	sl, #1
 8005c8a:	d18d      	bne.n	8005ba8 <_dtoa_r+0xaa8>
 8005c8c:	462b      	mov	r3, r5
 8005c8e:	461d      	mov	r5, r3
 8005c90:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005c94:	2a30      	cmp	r2, #48	; 0x30
 8005c96:	d0fa      	beq.n	8005c8e <_dtoa_r+0xb8e>
 8005c98:	e6d7      	b.n	8005a4a <_dtoa_r+0x94a>
 8005c9a:	9a01      	ldr	r2, [sp, #4]
 8005c9c:	429a      	cmp	r2, r3
 8005c9e:	d184      	bne.n	8005baa <_dtoa_r+0xaaa>
 8005ca0:	9b00      	ldr	r3, [sp, #0]
 8005ca2:	3301      	adds	r3, #1
 8005ca4:	9300      	str	r3, [sp, #0]
 8005ca6:	2331      	movs	r3, #49	; 0x31
 8005ca8:	7013      	strb	r3, [r2, #0]
 8005caa:	e6ce      	b.n	8005a4a <_dtoa_r+0x94a>
 8005cac:	4b09      	ldr	r3, [pc, #36]	; (8005cd4 <_dtoa_r+0xbd4>)
 8005cae:	f7ff ba95 	b.w	80051dc <_dtoa_r+0xdc>
 8005cb2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	f47f aa6e 	bne.w	8005196 <_dtoa_r+0x96>
 8005cba:	4b07      	ldr	r3, [pc, #28]	; (8005cd8 <_dtoa_r+0xbd8>)
 8005cbc:	f7ff ba8e 	b.w	80051dc <_dtoa_r+0xdc>
 8005cc0:	9b02      	ldr	r3, [sp, #8]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	dcae      	bgt.n	8005c24 <_dtoa_r+0xb24>
 8005cc6:	9b06      	ldr	r3, [sp, #24]
 8005cc8:	2b02      	cmp	r3, #2
 8005cca:	f73f aea8 	bgt.w	8005a1e <_dtoa_r+0x91e>
 8005cce:	e7a9      	b.n	8005c24 <_dtoa_r+0xb24>
 8005cd0:	08008c78 	.word	0x08008c78
 8005cd4:	08008e71 	.word	0x08008e71
 8005cd8:	08008bf9 	.word	0x08008bf9

08005cdc <rshift>:
 8005cdc:	6903      	ldr	r3, [r0, #16]
 8005cde:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8005ce2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005ce6:	ea4f 1261 	mov.w	r2, r1, asr #5
 8005cea:	f100 0414 	add.w	r4, r0, #20
 8005cee:	dd45      	ble.n	8005d7c <rshift+0xa0>
 8005cf0:	f011 011f 	ands.w	r1, r1, #31
 8005cf4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8005cf8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8005cfc:	d10c      	bne.n	8005d18 <rshift+0x3c>
 8005cfe:	f100 0710 	add.w	r7, r0, #16
 8005d02:	4629      	mov	r1, r5
 8005d04:	42b1      	cmp	r1, r6
 8005d06:	d334      	bcc.n	8005d72 <rshift+0x96>
 8005d08:	1a9b      	subs	r3, r3, r2
 8005d0a:	009b      	lsls	r3, r3, #2
 8005d0c:	1eea      	subs	r2, r5, #3
 8005d0e:	4296      	cmp	r6, r2
 8005d10:	bf38      	it	cc
 8005d12:	2300      	movcc	r3, #0
 8005d14:	4423      	add	r3, r4
 8005d16:	e015      	b.n	8005d44 <rshift+0x68>
 8005d18:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8005d1c:	f1c1 0820 	rsb	r8, r1, #32
 8005d20:	40cf      	lsrs	r7, r1
 8005d22:	f105 0e04 	add.w	lr, r5, #4
 8005d26:	46a1      	mov	r9, r4
 8005d28:	4576      	cmp	r6, lr
 8005d2a:	46f4      	mov	ip, lr
 8005d2c:	d815      	bhi.n	8005d5a <rshift+0x7e>
 8005d2e:	1a9a      	subs	r2, r3, r2
 8005d30:	0092      	lsls	r2, r2, #2
 8005d32:	3a04      	subs	r2, #4
 8005d34:	3501      	adds	r5, #1
 8005d36:	42ae      	cmp	r6, r5
 8005d38:	bf38      	it	cc
 8005d3a:	2200      	movcc	r2, #0
 8005d3c:	18a3      	adds	r3, r4, r2
 8005d3e:	50a7      	str	r7, [r4, r2]
 8005d40:	b107      	cbz	r7, 8005d44 <rshift+0x68>
 8005d42:	3304      	adds	r3, #4
 8005d44:	1b1a      	subs	r2, r3, r4
 8005d46:	42a3      	cmp	r3, r4
 8005d48:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8005d4c:	bf08      	it	eq
 8005d4e:	2300      	moveq	r3, #0
 8005d50:	6102      	str	r2, [r0, #16]
 8005d52:	bf08      	it	eq
 8005d54:	6143      	streq	r3, [r0, #20]
 8005d56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005d5a:	f8dc c000 	ldr.w	ip, [ip]
 8005d5e:	fa0c fc08 	lsl.w	ip, ip, r8
 8005d62:	ea4c 0707 	orr.w	r7, ip, r7
 8005d66:	f849 7b04 	str.w	r7, [r9], #4
 8005d6a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8005d6e:	40cf      	lsrs	r7, r1
 8005d70:	e7da      	b.n	8005d28 <rshift+0x4c>
 8005d72:	f851 cb04 	ldr.w	ip, [r1], #4
 8005d76:	f847 cf04 	str.w	ip, [r7, #4]!
 8005d7a:	e7c3      	b.n	8005d04 <rshift+0x28>
 8005d7c:	4623      	mov	r3, r4
 8005d7e:	e7e1      	b.n	8005d44 <rshift+0x68>

08005d80 <__hexdig_fun>:
 8005d80:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8005d84:	2b09      	cmp	r3, #9
 8005d86:	d802      	bhi.n	8005d8e <__hexdig_fun+0xe>
 8005d88:	3820      	subs	r0, #32
 8005d8a:	b2c0      	uxtb	r0, r0
 8005d8c:	4770      	bx	lr
 8005d8e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8005d92:	2b05      	cmp	r3, #5
 8005d94:	d801      	bhi.n	8005d9a <__hexdig_fun+0x1a>
 8005d96:	3847      	subs	r0, #71	; 0x47
 8005d98:	e7f7      	b.n	8005d8a <__hexdig_fun+0xa>
 8005d9a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8005d9e:	2b05      	cmp	r3, #5
 8005da0:	d801      	bhi.n	8005da6 <__hexdig_fun+0x26>
 8005da2:	3827      	subs	r0, #39	; 0x27
 8005da4:	e7f1      	b.n	8005d8a <__hexdig_fun+0xa>
 8005da6:	2000      	movs	r0, #0
 8005da8:	4770      	bx	lr
	...

08005dac <__gethex>:
 8005dac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005db0:	ed2d 8b02 	vpush	{d8}
 8005db4:	b089      	sub	sp, #36	; 0x24
 8005db6:	ee08 0a10 	vmov	s16, r0
 8005dba:	9304      	str	r3, [sp, #16]
 8005dbc:	4bb4      	ldr	r3, [pc, #720]	; (8006090 <__gethex+0x2e4>)
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	9301      	str	r3, [sp, #4]
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	468b      	mov	fp, r1
 8005dc6:	4690      	mov	r8, r2
 8005dc8:	f7fa fa14 	bl	80001f4 <strlen>
 8005dcc:	9b01      	ldr	r3, [sp, #4]
 8005dce:	f8db 2000 	ldr.w	r2, [fp]
 8005dd2:	4403      	add	r3, r0
 8005dd4:	4682      	mov	sl, r0
 8005dd6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8005dda:	9305      	str	r3, [sp, #20]
 8005ddc:	1c93      	adds	r3, r2, #2
 8005dde:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8005de2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8005de6:	32fe      	adds	r2, #254	; 0xfe
 8005de8:	18d1      	adds	r1, r2, r3
 8005dea:	461f      	mov	r7, r3
 8005dec:	f813 0b01 	ldrb.w	r0, [r3], #1
 8005df0:	9100      	str	r1, [sp, #0]
 8005df2:	2830      	cmp	r0, #48	; 0x30
 8005df4:	d0f8      	beq.n	8005de8 <__gethex+0x3c>
 8005df6:	f7ff ffc3 	bl	8005d80 <__hexdig_fun>
 8005dfa:	4604      	mov	r4, r0
 8005dfc:	2800      	cmp	r0, #0
 8005dfe:	d13a      	bne.n	8005e76 <__gethex+0xca>
 8005e00:	9901      	ldr	r1, [sp, #4]
 8005e02:	4652      	mov	r2, sl
 8005e04:	4638      	mov	r0, r7
 8005e06:	f001 fdb3 	bl	8007970 <strncmp>
 8005e0a:	4605      	mov	r5, r0
 8005e0c:	2800      	cmp	r0, #0
 8005e0e:	d168      	bne.n	8005ee2 <__gethex+0x136>
 8005e10:	f817 000a 	ldrb.w	r0, [r7, sl]
 8005e14:	eb07 060a 	add.w	r6, r7, sl
 8005e18:	f7ff ffb2 	bl	8005d80 <__hexdig_fun>
 8005e1c:	2800      	cmp	r0, #0
 8005e1e:	d062      	beq.n	8005ee6 <__gethex+0x13a>
 8005e20:	4633      	mov	r3, r6
 8005e22:	7818      	ldrb	r0, [r3, #0]
 8005e24:	2830      	cmp	r0, #48	; 0x30
 8005e26:	461f      	mov	r7, r3
 8005e28:	f103 0301 	add.w	r3, r3, #1
 8005e2c:	d0f9      	beq.n	8005e22 <__gethex+0x76>
 8005e2e:	f7ff ffa7 	bl	8005d80 <__hexdig_fun>
 8005e32:	2301      	movs	r3, #1
 8005e34:	fab0 f480 	clz	r4, r0
 8005e38:	0964      	lsrs	r4, r4, #5
 8005e3a:	4635      	mov	r5, r6
 8005e3c:	9300      	str	r3, [sp, #0]
 8005e3e:	463a      	mov	r2, r7
 8005e40:	4616      	mov	r6, r2
 8005e42:	3201      	adds	r2, #1
 8005e44:	7830      	ldrb	r0, [r6, #0]
 8005e46:	f7ff ff9b 	bl	8005d80 <__hexdig_fun>
 8005e4a:	2800      	cmp	r0, #0
 8005e4c:	d1f8      	bne.n	8005e40 <__gethex+0x94>
 8005e4e:	9901      	ldr	r1, [sp, #4]
 8005e50:	4652      	mov	r2, sl
 8005e52:	4630      	mov	r0, r6
 8005e54:	f001 fd8c 	bl	8007970 <strncmp>
 8005e58:	b980      	cbnz	r0, 8005e7c <__gethex+0xd0>
 8005e5a:	b94d      	cbnz	r5, 8005e70 <__gethex+0xc4>
 8005e5c:	eb06 050a 	add.w	r5, r6, sl
 8005e60:	462a      	mov	r2, r5
 8005e62:	4616      	mov	r6, r2
 8005e64:	3201      	adds	r2, #1
 8005e66:	7830      	ldrb	r0, [r6, #0]
 8005e68:	f7ff ff8a 	bl	8005d80 <__hexdig_fun>
 8005e6c:	2800      	cmp	r0, #0
 8005e6e:	d1f8      	bne.n	8005e62 <__gethex+0xb6>
 8005e70:	1bad      	subs	r5, r5, r6
 8005e72:	00ad      	lsls	r5, r5, #2
 8005e74:	e004      	b.n	8005e80 <__gethex+0xd4>
 8005e76:	2400      	movs	r4, #0
 8005e78:	4625      	mov	r5, r4
 8005e7a:	e7e0      	b.n	8005e3e <__gethex+0x92>
 8005e7c:	2d00      	cmp	r5, #0
 8005e7e:	d1f7      	bne.n	8005e70 <__gethex+0xc4>
 8005e80:	7833      	ldrb	r3, [r6, #0]
 8005e82:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005e86:	2b50      	cmp	r3, #80	; 0x50
 8005e88:	d13b      	bne.n	8005f02 <__gethex+0x156>
 8005e8a:	7873      	ldrb	r3, [r6, #1]
 8005e8c:	2b2b      	cmp	r3, #43	; 0x2b
 8005e8e:	d02c      	beq.n	8005eea <__gethex+0x13e>
 8005e90:	2b2d      	cmp	r3, #45	; 0x2d
 8005e92:	d02e      	beq.n	8005ef2 <__gethex+0x146>
 8005e94:	1c71      	adds	r1, r6, #1
 8005e96:	f04f 0900 	mov.w	r9, #0
 8005e9a:	7808      	ldrb	r0, [r1, #0]
 8005e9c:	f7ff ff70 	bl	8005d80 <__hexdig_fun>
 8005ea0:	1e43      	subs	r3, r0, #1
 8005ea2:	b2db      	uxtb	r3, r3
 8005ea4:	2b18      	cmp	r3, #24
 8005ea6:	d82c      	bhi.n	8005f02 <__gethex+0x156>
 8005ea8:	f1a0 0210 	sub.w	r2, r0, #16
 8005eac:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8005eb0:	f7ff ff66 	bl	8005d80 <__hexdig_fun>
 8005eb4:	1e43      	subs	r3, r0, #1
 8005eb6:	b2db      	uxtb	r3, r3
 8005eb8:	2b18      	cmp	r3, #24
 8005eba:	d91d      	bls.n	8005ef8 <__gethex+0x14c>
 8005ebc:	f1b9 0f00 	cmp.w	r9, #0
 8005ec0:	d000      	beq.n	8005ec4 <__gethex+0x118>
 8005ec2:	4252      	negs	r2, r2
 8005ec4:	4415      	add	r5, r2
 8005ec6:	f8cb 1000 	str.w	r1, [fp]
 8005eca:	b1e4      	cbz	r4, 8005f06 <__gethex+0x15a>
 8005ecc:	9b00      	ldr	r3, [sp, #0]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	bf14      	ite	ne
 8005ed2:	2700      	movne	r7, #0
 8005ed4:	2706      	moveq	r7, #6
 8005ed6:	4638      	mov	r0, r7
 8005ed8:	b009      	add	sp, #36	; 0x24
 8005eda:	ecbd 8b02 	vpop	{d8}
 8005ede:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ee2:	463e      	mov	r6, r7
 8005ee4:	4625      	mov	r5, r4
 8005ee6:	2401      	movs	r4, #1
 8005ee8:	e7ca      	b.n	8005e80 <__gethex+0xd4>
 8005eea:	f04f 0900 	mov.w	r9, #0
 8005eee:	1cb1      	adds	r1, r6, #2
 8005ef0:	e7d3      	b.n	8005e9a <__gethex+0xee>
 8005ef2:	f04f 0901 	mov.w	r9, #1
 8005ef6:	e7fa      	b.n	8005eee <__gethex+0x142>
 8005ef8:	230a      	movs	r3, #10
 8005efa:	fb03 0202 	mla	r2, r3, r2, r0
 8005efe:	3a10      	subs	r2, #16
 8005f00:	e7d4      	b.n	8005eac <__gethex+0x100>
 8005f02:	4631      	mov	r1, r6
 8005f04:	e7df      	b.n	8005ec6 <__gethex+0x11a>
 8005f06:	1bf3      	subs	r3, r6, r7
 8005f08:	3b01      	subs	r3, #1
 8005f0a:	4621      	mov	r1, r4
 8005f0c:	2b07      	cmp	r3, #7
 8005f0e:	dc0b      	bgt.n	8005f28 <__gethex+0x17c>
 8005f10:	ee18 0a10 	vmov	r0, s16
 8005f14:	f000 fa90 	bl	8006438 <_Balloc>
 8005f18:	4604      	mov	r4, r0
 8005f1a:	b940      	cbnz	r0, 8005f2e <__gethex+0x182>
 8005f1c:	4b5d      	ldr	r3, [pc, #372]	; (8006094 <__gethex+0x2e8>)
 8005f1e:	4602      	mov	r2, r0
 8005f20:	21de      	movs	r1, #222	; 0xde
 8005f22:	485d      	ldr	r0, [pc, #372]	; (8006098 <__gethex+0x2ec>)
 8005f24:	f001 fdf4 	bl	8007b10 <__assert_func>
 8005f28:	3101      	adds	r1, #1
 8005f2a:	105b      	asrs	r3, r3, #1
 8005f2c:	e7ee      	b.n	8005f0c <__gethex+0x160>
 8005f2e:	f100 0914 	add.w	r9, r0, #20
 8005f32:	f04f 0b00 	mov.w	fp, #0
 8005f36:	f1ca 0301 	rsb	r3, sl, #1
 8005f3a:	f8cd 9008 	str.w	r9, [sp, #8]
 8005f3e:	f8cd b000 	str.w	fp, [sp]
 8005f42:	9306      	str	r3, [sp, #24]
 8005f44:	42b7      	cmp	r7, r6
 8005f46:	d340      	bcc.n	8005fca <__gethex+0x21e>
 8005f48:	9802      	ldr	r0, [sp, #8]
 8005f4a:	9b00      	ldr	r3, [sp, #0]
 8005f4c:	f840 3b04 	str.w	r3, [r0], #4
 8005f50:	eba0 0009 	sub.w	r0, r0, r9
 8005f54:	1080      	asrs	r0, r0, #2
 8005f56:	0146      	lsls	r6, r0, #5
 8005f58:	6120      	str	r0, [r4, #16]
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	f000 fb5e 	bl	800661c <__hi0bits>
 8005f60:	1a30      	subs	r0, r6, r0
 8005f62:	f8d8 6000 	ldr.w	r6, [r8]
 8005f66:	42b0      	cmp	r0, r6
 8005f68:	dd63      	ble.n	8006032 <__gethex+0x286>
 8005f6a:	1b87      	subs	r7, r0, r6
 8005f6c:	4639      	mov	r1, r7
 8005f6e:	4620      	mov	r0, r4
 8005f70:	f000 ff02 	bl	8006d78 <__any_on>
 8005f74:	4682      	mov	sl, r0
 8005f76:	b1a8      	cbz	r0, 8005fa4 <__gethex+0x1f8>
 8005f78:	1e7b      	subs	r3, r7, #1
 8005f7a:	1159      	asrs	r1, r3, #5
 8005f7c:	f003 021f 	and.w	r2, r3, #31
 8005f80:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8005f84:	f04f 0a01 	mov.w	sl, #1
 8005f88:	fa0a f202 	lsl.w	r2, sl, r2
 8005f8c:	420a      	tst	r2, r1
 8005f8e:	d009      	beq.n	8005fa4 <__gethex+0x1f8>
 8005f90:	4553      	cmp	r3, sl
 8005f92:	dd05      	ble.n	8005fa0 <__gethex+0x1f4>
 8005f94:	1eb9      	subs	r1, r7, #2
 8005f96:	4620      	mov	r0, r4
 8005f98:	f000 feee 	bl	8006d78 <__any_on>
 8005f9c:	2800      	cmp	r0, #0
 8005f9e:	d145      	bne.n	800602c <__gethex+0x280>
 8005fa0:	f04f 0a02 	mov.w	sl, #2
 8005fa4:	4639      	mov	r1, r7
 8005fa6:	4620      	mov	r0, r4
 8005fa8:	f7ff fe98 	bl	8005cdc <rshift>
 8005fac:	443d      	add	r5, r7
 8005fae:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005fb2:	42ab      	cmp	r3, r5
 8005fb4:	da4c      	bge.n	8006050 <__gethex+0x2a4>
 8005fb6:	ee18 0a10 	vmov	r0, s16
 8005fba:	4621      	mov	r1, r4
 8005fbc:	f000 fa7c 	bl	80064b8 <_Bfree>
 8005fc0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	6013      	str	r3, [r2, #0]
 8005fc6:	27a3      	movs	r7, #163	; 0xa3
 8005fc8:	e785      	b.n	8005ed6 <__gethex+0x12a>
 8005fca:	1e73      	subs	r3, r6, #1
 8005fcc:	9a05      	ldr	r2, [sp, #20]
 8005fce:	9303      	str	r3, [sp, #12]
 8005fd0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d019      	beq.n	800600c <__gethex+0x260>
 8005fd8:	f1bb 0f20 	cmp.w	fp, #32
 8005fdc:	d107      	bne.n	8005fee <__gethex+0x242>
 8005fde:	9b02      	ldr	r3, [sp, #8]
 8005fe0:	9a00      	ldr	r2, [sp, #0]
 8005fe2:	f843 2b04 	str.w	r2, [r3], #4
 8005fe6:	9302      	str	r3, [sp, #8]
 8005fe8:	2300      	movs	r3, #0
 8005fea:	9300      	str	r3, [sp, #0]
 8005fec:	469b      	mov	fp, r3
 8005fee:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8005ff2:	f7ff fec5 	bl	8005d80 <__hexdig_fun>
 8005ff6:	9b00      	ldr	r3, [sp, #0]
 8005ff8:	f000 000f 	and.w	r0, r0, #15
 8005ffc:	fa00 f00b 	lsl.w	r0, r0, fp
 8006000:	4303      	orrs	r3, r0
 8006002:	9300      	str	r3, [sp, #0]
 8006004:	f10b 0b04 	add.w	fp, fp, #4
 8006008:	9b03      	ldr	r3, [sp, #12]
 800600a:	e00d      	b.n	8006028 <__gethex+0x27c>
 800600c:	9b03      	ldr	r3, [sp, #12]
 800600e:	9a06      	ldr	r2, [sp, #24]
 8006010:	4413      	add	r3, r2
 8006012:	42bb      	cmp	r3, r7
 8006014:	d3e0      	bcc.n	8005fd8 <__gethex+0x22c>
 8006016:	4618      	mov	r0, r3
 8006018:	9901      	ldr	r1, [sp, #4]
 800601a:	9307      	str	r3, [sp, #28]
 800601c:	4652      	mov	r2, sl
 800601e:	f001 fca7 	bl	8007970 <strncmp>
 8006022:	9b07      	ldr	r3, [sp, #28]
 8006024:	2800      	cmp	r0, #0
 8006026:	d1d7      	bne.n	8005fd8 <__gethex+0x22c>
 8006028:	461e      	mov	r6, r3
 800602a:	e78b      	b.n	8005f44 <__gethex+0x198>
 800602c:	f04f 0a03 	mov.w	sl, #3
 8006030:	e7b8      	b.n	8005fa4 <__gethex+0x1f8>
 8006032:	da0a      	bge.n	800604a <__gethex+0x29e>
 8006034:	1a37      	subs	r7, r6, r0
 8006036:	4621      	mov	r1, r4
 8006038:	ee18 0a10 	vmov	r0, s16
 800603c:	463a      	mov	r2, r7
 800603e:	f000 fc57 	bl	80068f0 <__lshift>
 8006042:	1bed      	subs	r5, r5, r7
 8006044:	4604      	mov	r4, r0
 8006046:	f100 0914 	add.w	r9, r0, #20
 800604a:	f04f 0a00 	mov.w	sl, #0
 800604e:	e7ae      	b.n	8005fae <__gethex+0x202>
 8006050:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8006054:	42a8      	cmp	r0, r5
 8006056:	dd72      	ble.n	800613e <__gethex+0x392>
 8006058:	1b45      	subs	r5, r0, r5
 800605a:	42ae      	cmp	r6, r5
 800605c:	dc36      	bgt.n	80060cc <__gethex+0x320>
 800605e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006062:	2b02      	cmp	r3, #2
 8006064:	d02a      	beq.n	80060bc <__gethex+0x310>
 8006066:	2b03      	cmp	r3, #3
 8006068:	d02c      	beq.n	80060c4 <__gethex+0x318>
 800606a:	2b01      	cmp	r3, #1
 800606c:	d11c      	bne.n	80060a8 <__gethex+0x2fc>
 800606e:	42ae      	cmp	r6, r5
 8006070:	d11a      	bne.n	80060a8 <__gethex+0x2fc>
 8006072:	2e01      	cmp	r6, #1
 8006074:	d112      	bne.n	800609c <__gethex+0x2f0>
 8006076:	9a04      	ldr	r2, [sp, #16]
 8006078:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800607c:	6013      	str	r3, [r2, #0]
 800607e:	2301      	movs	r3, #1
 8006080:	6123      	str	r3, [r4, #16]
 8006082:	f8c9 3000 	str.w	r3, [r9]
 8006086:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006088:	2762      	movs	r7, #98	; 0x62
 800608a:	601c      	str	r4, [r3, #0]
 800608c:	e723      	b.n	8005ed6 <__gethex+0x12a>
 800608e:	bf00      	nop
 8006090:	08008cf0 	.word	0x08008cf0
 8006094:	08008c78 	.word	0x08008c78
 8006098:	08008c89 	.word	0x08008c89
 800609c:	1e71      	subs	r1, r6, #1
 800609e:	4620      	mov	r0, r4
 80060a0:	f000 fe6a 	bl	8006d78 <__any_on>
 80060a4:	2800      	cmp	r0, #0
 80060a6:	d1e6      	bne.n	8006076 <__gethex+0x2ca>
 80060a8:	ee18 0a10 	vmov	r0, s16
 80060ac:	4621      	mov	r1, r4
 80060ae:	f000 fa03 	bl	80064b8 <_Bfree>
 80060b2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80060b4:	2300      	movs	r3, #0
 80060b6:	6013      	str	r3, [r2, #0]
 80060b8:	2750      	movs	r7, #80	; 0x50
 80060ba:	e70c      	b.n	8005ed6 <__gethex+0x12a>
 80060bc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d1f2      	bne.n	80060a8 <__gethex+0x2fc>
 80060c2:	e7d8      	b.n	8006076 <__gethex+0x2ca>
 80060c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d1d5      	bne.n	8006076 <__gethex+0x2ca>
 80060ca:	e7ed      	b.n	80060a8 <__gethex+0x2fc>
 80060cc:	1e6f      	subs	r7, r5, #1
 80060ce:	f1ba 0f00 	cmp.w	sl, #0
 80060d2:	d131      	bne.n	8006138 <__gethex+0x38c>
 80060d4:	b127      	cbz	r7, 80060e0 <__gethex+0x334>
 80060d6:	4639      	mov	r1, r7
 80060d8:	4620      	mov	r0, r4
 80060da:	f000 fe4d 	bl	8006d78 <__any_on>
 80060de:	4682      	mov	sl, r0
 80060e0:	117b      	asrs	r3, r7, #5
 80060e2:	2101      	movs	r1, #1
 80060e4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80060e8:	f007 071f 	and.w	r7, r7, #31
 80060ec:	fa01 f707 	lsl.w	r7, r1, r7
 80060f0:	421f      	tst	r7, r3
 80060f2:	4629      	mov	r1, r5
 80060f4:	4620      	mov	r0, r4
 80060f6:	bf18      	it	ne
 80060f8:	f04a 0a02 	orrne.w	sl, sl, #2
 80060fc:	1b76      	subs	r6, r6, r5
 80060fe:	f7ff fded 	bl	8005cdc <rshift>
 8006102:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8006106:	2702      	movs	r7, #2
 8006108:	f1ba 0f00 	cmp.w	sl, #0
 800610c:	d048      	beq.n	80061a0 <__gethex+0x3f4>
 800610e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006112:	2b02      	cmp	r3, #2
 8006114:	d015      	beq.n	8006142 <__gethex+0x396>
 8006116:	2b03      	cmp	r3, #3
 8006118:	d017      	beq.n	800614a <__gethex+0x39e>
 800611a:	2b01      	cmp	r3, #1
 800611c:	d109      	bne.n	8006132 <__gethex+0x386>
 800611e:	f01a 0f02 	tst.w	sl, #2
 8006122:	d006      	beq.n	8006132 <__gethex+0x386>
 8006124:	f8d9 0000 	ldr.w	r0, [r9]
 8006128:	ea4a 0a00 	orr.w	sl, sl, r0
 800612c:	f01a 0f01 	tst.w	sl, #1
 8006130:	d10e      	bne.n	8006150 <__gethex+0x3a4>
 8006132:	f047 0710 	orr.w	r7, r7, #16
 8006136:	e033      	b.n	80061a0 <__gethex+0x3f4>
 8006138:	f04f 0a01 	mov.w	sl, #1
 800613c:	e7d0      	b.n	80060e0 <__gethex+0x334>
 800613e:	2701      	movs	r7, #1
 8006140:	e7e2      	b.n	8006108 <__gethex+0x35c>
 8006142:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006144:	f1c3 0301 	rsb	r3, r3, #1
 8006148:	9315      	str	r3, [sp, #84]	; 0x54
 800614a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800614c:	2b00      	cmp	r3, #0
 800614e:	d0f0      	beq.n	8006132 <__gethex+0x386>
 8006150:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8006154:	f104 0314 	add.w	r3, r4, #20
 8006158:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800615c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8006160:	f04f 0c00 	mov.w	ip, #0
 8006164:	4618      	mov	r0, r3
 8006166:	f853 2b04 	ldr.w	r2, [r3], #4
 800616a:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800616e:	d01c      	beq.n	80061aa <__gethex+0x3fe>
 8006170:	3201      	adds	r2, #1
 8006172:	6002      	str	r2, [r0, #0]
 8006174:	2f02      	cmp	r7, #2
 8006176:	f104 0314 	add.w	r3, r4, #20
 800617a:	d13f      	bne.n	80061fc <__gethex+0x450>
 800617c:	f8d8 2000 	ldr.w	r2, [r8]
 8006180:	3a01      	subs	r2, #1
 8006182:	42b2      	cmp	r2, r6
 8006184:	d10a      	bne.n	800619c <__gethex+0x3f0>
 8006186:	1171      	asrs	r1, r6, #5
 8006188:	2201      	movs	r2, #1
 800618a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800618e:	f006 061f 	and.w	r6, r6, #31
 8006192:	fa02 f606 	lsl.w	r6, r2, r6
 8006196:	421e      	tst	r6, r3
 8006198:	bf18      	it	ne
 800619a:	4617      	movne	r7, r2
 800619c:	f047 0720 	orr.w	r7, r7, #32
 80061a0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80061a2:	601c      	str	r4, [r3, #0]
 80061a4:	9b04      	ldr	r3, [sp, #16]
 80061a6:	601d      	str	r5, [r3, #0]
 80061a8:	e695      	b.n	8005ed6 <__gethex+0x12a>
 80061aa:	4299      	cmp	r1, r3
 80061ac:	f843 cc04 	str.w	ip, [r3, #-4]
 80061b0:	d8d8      	bhi.n	8006164 <__gethex+0x3b8>
 80061b2:	68a3      	ldr	r3, [r4, #8]
 80061b4:	459b      	cmp	fp, r3
 80061b6:	db19      	blt.n	80061ec <__gethex+0x440>
 80061b8:	6861      	ldr	r1, [r4, #4]
 80061ba:	ee18 0a10 	vmov	r0, s16
 80061be:	3101      	adds	r1, #1
 80061c0:	f000 f93a 	bl	8006438 <_Balloc>
 80061c4:	4681      	mov	r9, r0
 80061c6:	b918      	cbnz	r0, 80061d0 <__gethex+0x424>
 80061c8:	4b1a      	ldr	r3, [pc, #104]	; (8006234 <__gethex+0x488>)
 80061ca:	4602      	mov	r2, r0
 80061cc:	2184      	movs	r1, #132	; 0x84
 80061ce:	e6a8      	b.n	8005f22 <__gethex+0x176>
 80061d0:	6922      	ldr	r2, [r4, #16]
 80061d2:	3202      	adds	r2, #2
 80061d4:	f104 010c 	add.w	r1, r4, #12
 80061d8:	0092      	lsls	r2, r2, #2
 80061da:	300c      	adds	r0, #12
 80061dc:	f000 f91e 	bl	800641c <memcpy>
 80061e0:	4621      	mov	r1, r4
 80061e2:	ee18 0a10 	vmov	r0, s16
 80061e6:	f000 f967 	bl	80064b8 <_Bfree>
 80061ea:	464c      	mov	r4, r9
 80061ec:	6923      	ldr	r3, [r4, #16]
 80061ee:	1c5a      	adds	r2, r3, #1
 80061f0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80061f4:	6122      	str	r2, [r4, #16]
 80061f6:	2201      	movs	r2, #1
 80061f8:	615a      	str	r2, [r3, #20]
 80061fa:	e7bb      	b.n	8006174 <__gethex+0x3c8>
 80061fc:	6922      	ldr	r2, [r4, #16]
 80061fe:	455a      	cmp	r2, fp
 8006200:	dd0b      	ble.n	800621a <__gethex+0x46e>
 8006202:	2101      	movs	r1, #1
 8006204:	4620      	mov	r0, r4
 8006206:	f7ff fd69 	bl	8005cdc <rshift>
 800620a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800620e:	3501      	adds	r5, #1
 8006210:	42ab      	cmp	r3, r5
 8006212:	f6ff aed0 	blt.w	8005fb6 <__gethex+0x20a>
 8006216:	2701      	movs	r7, #1
 8006218:	e7c0      	b.n	800619c <__gethex+0x3f0>
 800621a:	f016 061f 	ands.w	r6, r6, #31
 800621e:	d0fa      	beq.n	8006216 <__gethex+0x46a>
 8006220:	4453      	add	r3, sl
 8006222:	f1c6 0620 	rsb	r6, r6, #32
 8006226:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800622a:	f000 f9f7 	bl	800661c <__hi0bits>
 800622e:	42b0      	cmp	r0, r6
 8006230:	dbe7      	blt.n	8006202 <__gethex+0x456>
 8006232:	e7f0      	b.n	8006216 <__gethex+0x46a>
 8006234:	08008c78 	.word	0x08008c78

08006238 <L_shift>:
 8006238:	f1c2 0208 	rsb	r2, r2, #8
 800623c:	0092      	lsls	r2, r2, #2
 800623e:	b570      	push	{r4, r5, r6, lr}
 8006240:	f1c2 0620 	rsb	r6, r2, #32
 8006244:	6843      	ldr	r3, [r0, #4]
 8006246:	6804      	ldr	r4, [r0, #0]
 8006248:	fa03 f506 	lsl.w	r5, r3, r6
 800624c:	432c      	orrs	r4, r5
 800624e:	40d3      	lsrs	r3, r2
 8006250:	6004      	str	r4, [r0, #0]
 8006252:	f840 3f04 	str.w	r3, [r0, #4]!
 8006256:	4288      	cmp	r0, r1
 8006258:	d3f4      	bcc.n	8006244 <L_shift+0xc>
 800625a:	bd70      	pop	{r4, r5, r6, pc}

0800625c <__match>:
 800625c:	b530      	push	{r4, r5, lr}
 800625e:	6803      	ldr	r3, [r0, #0]
 8006260:	3301      	adds	r3, #1
 8006262:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006266:	b914      	cbnz	r4, 800626e <__match+0x12>
 8006268:	6003      	str	r3, [r0, #0]
 800626a:	2001      	movs	r0, #1
 800626c:	bd30      	pop	{r4, r5, pc}
 800626e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006272:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8006276:	2d19      	cmp	r5, #25
 8006278:	bf98      	it	ls
 800627a:	3220      	addls	r2, #32
 800627c:	42a2      	cmp	r2, r4
 800627e:	d0f0      	beq.n	8006262 <__match+0x6>
 8006280:	2000      	movs	r0, #0
 8006282:	e7f3      	b.n	800626c <__match+0x10>

08006284 <__hexnan>:
 8006284:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006288:	680b      	ldr	r3, [r1, #0]
 800628a:	115e      	asrs	r6, r3, #5
 800628c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8006290:	f013 031f 	ands.w	r3, r3, #31
 8006294:	b087      	sub	sp, #28
 8006296:	bf18      	it	ne
 8006298:	3604      	addne	r6, #4
 800629a:	2500      	movs	r5, #0
 800629c:	1f37      	subs	r7, r6, #4
 800629e:	4690      	mov	r8, r2
 80062a0:	6802      	ldr	r2, [r0, #0]
 80062a2:	9301      	str	r3, [sp, #4]
 80062a4:	4682      	mov	sl, r0
 80062a6:	f846 5c04 	str.w	r5, [r6, #-4]
 80062aa:	46b9      	mov	r9, r7
 80062ac:	463c      	mov	r4, r7
 80062ae:	9502      	str	r5, [sp, #8]
 80062b0:	46ab      	mov	fp, r5
 80062b2:	7851      	ldrb	r1, [r2, #1]
 80062b4:	1c53      	adds	r3, r2, #1
 80062b6:	9303      	str	r3, [sp, #12]
 80062b8:	b341      	cbz	r1, 800630c <__hexnan+0x88>
 80062ba:	4608      	mov	r0, r1
 80062bc:	9205      	str	r2, [sp, #20]
 80062be:	9104      	str	r1, [sp, #16]
 80062c0:	f7ff fd5e 	bl	8005d80 <__hexdig_fun>
 80062c4:	2800      	cmp	r0, #0
 80062c6:	d14f      	bne.n	8006368 <__hexnan+0xe4>
 80062c8:	9904      	ldr	r1, [sp, #16]
 80062ca:	9a05      	ldr	r2, [sp, #20]
 80062cc:	2920      	cmp	r1, #32
 80062ce:	d818      	bhi.n	8006302 <__hexnan+0x7e>
 80062d0:	9b02      	ldr	r3, [sp, #8]
 80062d2:	459b      	cmp	fp, r3
 80062d4:	dd13      	ble.n	80062fe <__hexnan+0x7a>
 80062d6:	454c      	cmp	r4, r9
 80062d8:	d206      	bcs.n	80062e8 <__hexnan+0x64>
 80062da:	2d07      	cmp	r5, #7
 80062dc:	dc04      	bgt.n	80062e8 <__hexnan+0x64>
 80062de:	462a      	mov	r2, r5
 80062e0:	4649      	mov	r1, r9
 80062e2:	4620      	mov	r0, r4
 80062e4:	f7ff ffa8 	bl	8006238 <L_shift>
 80062e8:	4544      	cmp	r4, r8
 80062ea:	d950      	bls.n	800638e <__hexnan+0x10a>
 80062ec:	2300      	movs	r3, #0
 80062ee:	f1a4 0904 	sub.w	r9, r4, #4
 80062f2:	f844 3c04 	str.w	r3, [r4, #-4]
 80062f6:	f8cd b008 	str.w	fp, [sp, #8]
 80062fa:	464c      	mov	r4, r9
 80062fc:	461d      	mov	r5, r3
 80062fe:	9a03      	ldr	r2, [sp, #12]
 8006300:	e7d7      	b.n	80062b2 <__hexnan+0x2e>
 8006302:	2929      	cmp	r1, #41	; 0x29
 8006304:	d156      	bne.n	80063b4 <__hexnan+0x130>
 8006306:	3202      	adds	r2, #2
 8006308:	f8ca 2000 	str.w	r2, [sl]
 800630c:	f1bb 0f00 	cmp.w	fp, #0
 8006310:	d050      	beq.n	80063b4 <__hexnan+0x130>
 8006312:	454c      	cmp	r4, r9
 8006314:	d206      	bcs.n	8006324 <__hexnan+0xa0>
 8006316:	2d07      	cmp	r5, #7
 8006318:	dc04      	bgt.n	8006324 <__hexnan+0xa0>
 800631a:	462a      	mov	r2, r5
 800631c:	4649      	mov	r1, r9
 800631e:	4620      	mov	r0, r4
 8006320:	f7ff ff8a 	bl	8006238 <L_shift>
 8006324:	4544      	cmp	r4, r8
 8006326:	d934      	bls.n	8006392 <__hexnan+0x10e>
 8006328:	f1a8 0204 	sub.w	r2, r8, #4
 800632c:	4623      	mov	r3, r4
 800632e:	f853 1b04 	ldr.w	r1, [r3], #4
 8006332:	f842 1f04 	str.w	r1, [r2, #4]!
 8006336:	429f      	cmp	r7, r3
 8006338:	d2f9      	bcs.n	800632e <__hexnan+0xaa>
 800633a:	1b3b      	subs	r3, r7, r4
 800633c:	f023 0303 	bic.w	r3, r3, #3
 8006340:	3304      	adds	r3, #4
 8006342:	3401      	adds	r4, #1
 8006344:	3e03      	subs	r6, #3
 8006346:	42b4      	cmp	r4, r6
 8006348:	bf88      	it	hi
 800634a:	2304      	movhi	r3, #4
 800634c:	4443      	add	r3, r8
 800634e:	2200      	movs	r2, #0
 8006350:	f843 2b04 	str.w	r2, [r3], #4
 8006354:	429f      	cmp	r7, r3
 8006356:	d2fb      	bcs.n	8006350 <__hexnan+0xcc>
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	b91b      	cbnz	r3, 8006364 <__hexnan+0xe0>
 800635c:	4547      	cmp	r7, r8
 800635e:	d127      	bne.n	80063b0 <__hexnan+0x12c>
 8006360:	2301      	movs	r3, #1
 8006362:	603b      	str	r3, [r7, #0]
 8006364:	2005      	movs	r0, #5
 8006366:	e026      	b.n	80063b6 <__hexnan+0x132>
 8006368:	3501      	adds	r5, #1
 800636a:	2d08      	cmp	r5, #8
 800636c:	f10b 0b01 	add.w	fp, fp, #1
 8006370:	dd06      	ble.n	8006380 <__hexnan+0xfc>
 8006372:	4544      	cmp	r4, r8
 8006374:	d9c3      	bls.n	80062fe <__hexnan+0x7a>
 8006376:	2300      	movs	r3, #0
 8006378:	f844 3c04 	str.w	r3, [r4, #-4]
 800637c:	2501      	movs	r5, #1
 800637e:	3c04      	subs	r4, #4
 8006380:	6822      	ldr	r2, [r4, #0]
 8006382:	f000 000f 	and.w	r0, r0, #15
 8006386:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800638a:	6022      	str	r2, [r4, #0]
 800638c:	e7b7      	b.n	80062fe <__hexnan+0x7a>
 800638e:	2508      	movs	r5, #8
 8006390:	e7b5      	b.n	80062fe <__hexnan+0x7a>
 8006392:	9b01      	ldr	r3, [sp, #4]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d0df      	beq.n	8006358 <__hexnan+0xd4>
 8006398:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800639c:	f1c3 0320 	rsb	r3, r3, #32
 80063a0:	fa22 f303 	lsr.w	r3, r2, r3
 80063a4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80063a8:	401a      	ands	r2, r3
 80063aa:	f846 2c04 	str.w	r2, [r6, #-4]
 80063ae:	e7d3      	b.n	8006358 <__hexnan+0xd4>
 80063b0:	3f04      	subs	r7, #4
 80063b2:	e7d1      	b.n	8006358 <__hexnan+0xd4>
 80063b4:	2004      	movs	r0, #4
 80063b6:	b007      	add	sp, #28
 80063b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080063bc <_localeconv_r>:
 80063bc:	4800      	ldr	r0, [pc, #0]	; (80063c0 <_localeconv_r+0x4>)
 80063be:	4770      	bx	lr
 80063c0:	20000174 	.word	0x20000174

080063c4 <_lseek_r>:
 80063c4:	b538      	push	{r3, r4, r5, lr}
 80063c6:	4d07      	ldr	r5, [pc, #28]	; (80063e4 <_lseek_r+0x20>)
 80063c8:	4604      	mov	r4, r0
 80063ca:	4608      	mov	r0, r1
 80063cc:	4611      	mov	r1, r2
 80063ce:	2200      	movs	r2, #0
 80063d0:	602a      	str	r2, [r5, #0]
 80063d2:	461a      	mov	r2, r3
 80063d4:	f7fb fde5 	bl	8001fa2 <_lseek>
 80063d8:	1c43      	adds	r3, r0, #1
 80063da:	d102      	bne.n	80063e2 <_lseek_r+0x1e>
 80063dc:	682b      	ldr	r3, [r5, #0]
 80063de:	b103      	cbz	r3, 80063e2 <_lseek_r+0x1e>
 80063e0:	6023      	str	r3, [r4, #0]
 80063e2:	bd38      	pop	{r3, r4, r5, pc}
 80063e4:	200006f4 	.word	0x200006f4

080063e8 <malloc>:
 80063e8:	4b02      	ldr	r3, [pc, #8]	; (80063f4 <malloc+0xc>)
 80063ea:	4601      	mov	r1, r0
 80063ec:	6818      	ldr	r0, [r3, #0]
 80063ee:	f000 bd67 	b.w	8006ec0 <_malloc_r>
 80063f2:	bf00      	nop
 80063f4:	2000001c 	.word	0x2000001c

080063f8 <__ascii_mbtowc>:
 80063f8:	b082      	sub	sp, #8
 80063fa:	b901      	cbnz	r1, 80063fe <__ascii_mbtowc+0x6>
 80063fc:	a901      	add	r1, sp, #4
 80063fe:	b142      	cbz	r2, 8006412 <__ascii_mbtowc+0x1a>
 8006400:	b14b      	cbz	r3, 8006416 <__ascii_mbtowc+0x1e>
 8006402:	7813      	ldrb	r3, [r2, #0]
 8006404:	600b      	str	r3, [r1, #0]
 8006406:	7812      	ldrb	r2, [r2, #0]
 8006408:	1e10      	subs	r0, r2, #0
 800640a:	bf18      	it	ne
 800640c:	2001      	movne	r0, #1
 800640e:	b002      	add	sp, #8
 8006410:	4770      	bx	lr
 8006412:	4610      	mov	r0, r2
 8006414:	e7fb      	b.n	800640e <__ascii_mbtowc+0x16>
 8006416:	f06f 0001 	mvn.w	r0, #1
 800641a:	e7f8      	b.n	800640e <__ascii_mbtowc+0x16>

0800641c <memcpy>:
 800641c:	440a      	add	r2, r1
 800641e:	4291      	cmp	r1, r2
 8006420:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006424:	d100      	bne.n	8006428 <memcpy+0xc>
 8006426:	4770      	bx	lr
 8006428:	b510      	push	{r4, lr}
 800642a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800642e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006432:	4291      	cmp	r1, r2
 8006434:	d1f9      	bne.n	800642a <memcpy+0xe>
 8006436:	bd10      	pop	{r4, pc}

08006438 <_Balloc>:
 8006438:	b570      	push	{r4, r5, r6, lr}
 800643a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800643c:	4604      	mov	r4, r0
 800643e:	460d      	mov	r5, r1
 8006440:	b976      	cbnz	r6, 8006460 <_Balloc+0x28>
 8006442:	2010      	movs	r0, #16
 8006444:	f7ff ffd0 	bl	80063e8 <malloc>
 8006448:	4602      	mov	r2, r0
 800644a:	6260      	str	r0, [r4, #36]	; 0x24
 800644c:	b920      	cbnz	r0, 8006458 <_Balloc+0x20>
 800644e:	4b18      	ldr	r3, [pc, #96]	; (80064b0 <_Balloc+0x78>)
 8006450:	4818      	ldr	r0, [pc, #96]	; (80064b4 <_Balloc+0x7c>)
 8006452:	2166      	movs	r1, #102	; 0x66
 8006454:	f001 fb5c 	bl	8007b10 <__assert_func>
 8006458:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800645c:	6006      	str	r6, [r0, #0]
 800645e:	60c6      	str	r6, [r0, #12]
 8006460:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006462:	68f3      	ldr	r3, [r6, #12]
 8006464:	b183      	cbz	r3, 8006488 <_Balloc+0x50>
 8006466:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006468:	68db      	ldr	r3, [r3, #12]
 800646a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800646e:	b9b8      	cbnz	r0, 80064a0 <_Balloc+0x68>
 8006470:	2101      	movs	r1, #1
 8006472:	fa01 f605 	lsl.w	r6, r1, r5
 8006476:	1d72      	adds	r2, r6, #5
 8006478:	0092      	lsls	r2, r2, #2
 800647a:	4620      	mov	r0, r4
 800647c:	f000 fc9d 	bl	8006dba <_calloc_r>
 8006480:	b160      	cbz	r0, 800649c <_Balloc+0x64>
 8006482:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006486:	e00e      	b.n	80064a6 <_Balloc+0x6e>
 8006488:	2221      	movs	r2, #33	; 0x21
 800648a:	2104      	movs	r1, #4
 800648c:	4620      	mov	r0, r4
 800648e:	f000 fc94 	bl	8006dba <_calloc_r>
 8006492:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006494:	60f0      	str	r0, [r6, #12]
 8006496:	68db      	ldr	r3, [r3, #12]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d1e4      	bne.n	8006466 <_Balloc+0x2e>
 800649c:	2000      	movs	r0, #0
 800649e:	bd70      	pop	{r4, r5, r6, pc}
 80064a0:	6802      	ldr	r2, [r0, #0]
 80064a2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80064a6:	2300      	movs	r3, #0
 80064a8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80064ac:	e7f7      	b.n	800649e <_Balloc+0x66>
 80064ae:	bf00      	nop
 80064b0:	08008c06 	.word	0x08008c06
 80064b4:	08008d04 	.word	0x08008d04

080064b8 <_Bfree>:
 80064b8:	b570      	push	{r4, r5, r6, lr}
 80064ba:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80064bc:	4605      	mov	r5, r0
 80064be:	460c      	mov	r4, r1
 80064c0:	b976      	cbnz	r6, 80064e0 <_Bfree+0x28>
 80064c2:	2010      	movs	r0, #16
 80064c4:	f7ff ff90 	bl	80063e8 <malloc>
 80064c8:	4602      	mov	r2, r0
 80064ca:	6268      	str	r0, [r5, #36]	; 0x24
 80064cc:	b920      	cbnz	r0, 80064d8 <_Bfree+0x20>
 80064ce:	4b09      	ldr	r3, [pc, #36]	; (80064f4 <_Bfree+0x3c>)
 80064d0:	4809      	ldr	r0, [pc, #36]	; (80064f8 <_Bfree+0x40>)
 80064d2:	218a      	movs	r1, #138	; 0x8a
 80064d4:	f001 fb1c 	bl	8007b10 <__assert_func>
 80064d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80064dc:	6006      	str	r6, [r0, #0]
 80064de:	60c6      	str	r6, [r0, #12]
 80064e0:	b13c      	cbz	r4, 80064f2 <_Bfree+0x3a>
 80064e2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80064e4:	6862      	ldr	r2, [r4, #4]
 80064e6:	68db      	ldr	r3, [r3, #12]
 80064e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80064ec:	6021      	str	r1, [r4, #0]
 80064ee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80064f2:	bd70      	pop	{r4, r5, r6, pc}
 80064f4:	08008c06 	.word	0x08008c06
 80064f8:	08008d04 	.word	0x08008d04

080064fc <__multadd>:
 80064fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006500:	690d      	ldr	r5, [r1, #16]
 8006502:	4607      	mov	r7, r0
 8006504:	460c      	mov	r4, r1
 8006506:	461e      	mov	r6, r3
 8006508:	f101 0c14 	add.w	ip, r1, #20
 800650c:	2000      	movs	r0, #0
 800650e:	f8dc 3000 	ldr.w	r3, [ip]
 8006512:	b299      	uxth	r1, r3
 8006514:	fb02 6101 	mla	r1, r2, r1, r6
 8006518:	0c1e      	lsrs	r6, r3, #16
 800651a:	0c0b      	lsrs	r3, r1, #16
 800651c:	fb02 3306 	mla	r3, r2, r6, r3
 8006520:	b289      	uxth	r1, r1
 8006522:	3001      	adds	r0, #1
 8006524:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006528:	4285      	cmp	r5, r0
 800652a:	f84c 1b04 	str.w	r1, [ip], #4
 800652e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006532:	dcec      	bgt.n	800650e <__multadd+0x12>
 8006534:	b30e      	cbz	r6, 800657a <__multadd+0x7e>
 8006536:	68a3      	ldr	r3, [r4, #8]
 8006538:	42ab      	cmp	r3, r5
 800653a:	dc19      	bgt.n	8006570 <__multadd+0x74>
 800653c:	6861      	ldr	r1, [r4, #4]
 800653e:	4638      	mov	r0, r7
 8006540:	3101      	adds	r1, #1
 8006542:	f7ff ff79 	bl	8006438 <_Balloc>
 8006546:	4680      	mov	r8, r0
 8006548:	b928      	cbnz	r0, 8006556 <__multadd+0x5a>
 800654a:	4602      	mov	r2, r0
 800654c:	4b0c      	ldr	r3, [pc, #48]	; (8006580 <__multadd+0x84>)
 800654e:	480d      	ldr	r0, [pc, #52]	; (8006584 <__multadd+0x88>)
 8006550:	21b5      	movs	r1, #181	; 0xb5
 8006552:	f001 fadd 	bl	8007b10 <__assert_func>
 8006556:	6922      	ldr	r2, [r4, #16]
 8006558:	3202      	adds	r2, #2
 800655a:	f104 010c 	add.w	r1, r4, #12
 800655e:	0092      	lsls	r2, r2, #2
 8006560:	300c      	adds	r0, #12
 8006562:	f7ff ff5b 	bl	800641c <memcpy>
 8006566:	4621      	mov	r1, r4
 8006568:	4638      	mov	r0, r7
 800656a:	f7ff ffa5 	bl	80064b8 <_Bfree>
 800656e:	4644      	mov	r4, r8
 8006570:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006574:	3501      	adds	r5, #1
 8006576:	615e      	str	r6, [r3, #20]
 8006578:	6125      	str	r5, [r4, #16]
 800657a:	4620      	mov	r0, r4
 800657c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006580:	08008c78 	.word	0x08008c78
 8006584:	08008d04 	.word	0x08008d04

08006588 <__s2b>:
 8006588:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800658c:	460c      	mov	r4, r1
 800658e:	4615      	mov	r5, r2
 8006590:	461f      	mov	r7, r3
 8006592:	2209      	movs	r2, #9
 8006594:	3308      	adds	r3, #8
 8006596:	4606      	mov	r6, r0
 8006598:	fb93 f3f2 	sdiv	r3, r3, r2
 800659c:	2100      	movs	r1, #0
 800659e:	2201      	movs	r2, #1
 80065a0:	429a      	cmp	r2, r3
 80065a2:	db09      	blt.n	80065b8 <__s2b+0x30>
 80065a4:	4630      	mov	r0, r6
 80065a6:	f7ff ff47 	bl	8006438 <_Balloc>
 80065aa:	b940      	cbnz	r0, 80065be <__s2b+0x36>
 80065ac:	4602      	mov	r2, r0
 80065ae:	4b19      	ldr	r3, [pc, #100]	; (8006614 <__s2b+0x8c>)
 80065b0:	4819      	ldr	r0, [pc, #100]	; (8006618 <__s2b+0x90>)
 80065b2:	21ce      	movs	r1, #206	; 0xce
 80065b4:	f001 faac 	bl	8007b10 <__assert_func>
 80065b8:	0052      	lsls	r2, r2, #1
 80065ba:	3101      	adds	r1, #1
 80065bc:	e7f0      	b.n	80065a0 <__s2b+0x18>
 80065be:	9b08      	ldr	r3, [sp, #32]
 80065c0:	6143      	str	r3, [r0, #20]
 80065c2:	2d09      	cmp	r5, #9
 80065c4:	f04f 0301 	mov.w	r3, #1
 80065c8:	6103      	str	r3, [r0, #16]
 80065ca:	dd16      	ble.n	80065fa <__s2b+0x72>
 80065cc:	f104 0909 	add.w	r9, r4, #9
 80065d0:	46c8      	mov	r8, r9
 80065d2:	442c      	add	r4, r5
 80065d4:	f818 3b01 	ldrb.w	r3, [r8], #1
 80065d8:	4601      	mov	r1, r0
 80065da:	3b30      	subs	r3, #48	; 0x30
 80065dc:	220a      	movs	r2, #10
 80065de:	4630      	mov	r0, r6
 80065e0:	f7ff ff8c 	bl	80064fc <__multadd>
 80065e4:	45a0      	cmp	r8, r4
 80065e6:	d1f5      	bne.n	80065d4 <__s2b+0x4c>
 80065e8:	f1a5 0408 	sub.w	r4, r5, #8
 80065ec:	444c      	add	r4, r9
 80065ee:	1b2d      	subs	r5, r5, r4
 80065f0:	1963      	adds	r3, r4, r5
 80065f2:	42bb      	cmp	r3, r7
 80065f4:	db04      	blt.n	8006600 <__s2b+0x78>
 80065f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80065fa:	340a      	adds	r4, #10
 80065fc:	2509      	movs	r5, #9
 80065fe:	e7f6      	b.n	80065ee <__s2b+0x66>
 8006600:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006604:	4601      	mov	r1, r0
 8006606:	3b30      	subs	r3, #48	; 0x30
 8006608:	220a      	movs	r2, #10
 800660a:	4630      	mov	r0, r6
 800660c:	f7ff ff76 	bl	80064fc <__multadd>
 8006610:	e7ee      	b.n	80065f0 <__s2b+0x68>
 8006612:	bf00      	nop
 8006614:	08008c78 	.word	0x08008c78
 8006618:	08008d04 	.word	0x08008d04

0800661c <__hi0bits>:
 800661c:	0c03      	lsrs	r3, r0, #16
 800661e:	041b      	lsls	r3, r3, #16
 8006620:	b9d3      	cbnz	r3, 8006658 <__hi0bits+0x3c>
 8006622:	0400      	lsls	r0, r0, #16
 8006624:	2310      	movs	r3, #16
 8006626:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800662a:	bf04      	itt	eq
 800662c:	0200      	lsleq	r0, r0, #8
 800662e:	3308      	addeq	r3, #8
 8006630:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006634:	bf04      	itt	eq
 8006636:	0100      	lsleq	r0, r0, #4
 8006638:	3304      	addeq	r3, #4
 800663a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800663e:	bf04      	itt	eq
 8006640:	0080      	lsleq	r0, r0, #2
 8006642:	3302      	addeq	r3, #2
 8006644:	2800      	cmp	r0, #0
 8006646:	db05      	blt.n	8006654 <__hi0bits+0x38>
 8006648:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800664c:	f103 0301 	add.w	r3, r3, #1
 8006650:	bf08      	it	eq
 8006652:	2320      	moveq	r3, #32
 8006654:	4618      	mov	r0, r3
 8006656:	4770      	bx	lr
 8006658:	2300      	movs	r3, #0
 800665a:	e7e4      	b.n	8006626 <__hi0bits+0xa>

0800665c <__lo0bits>:
 800665c:	6803      	ldr	r3, [r0, #0]
 800665e:	f013 0207 	ands.w	r2, r3, #7
 8006662:	4601      	mov	r1, r0
 8006664:	d00b      	beq.n	800667e <__lo0bits+0x22>
 8006666:	07da      	lsls	r2, r3, #31
 8006668:	d423      	bmi.n	80066b2 <__lo0bits+0x56>
 800666a:	0798      	lsls	r0, r3, #30
 800666c:	bf49      	itett	mi
 800666e:	085b      	lsrmi	r3, r3, #1
 8006670:	089b      	lsrpl	r3, r3, #2
 8006672:	2001      	movmi	r0, #1
 8006674:	600b      	strmi	r3, [r1, #0]
 8006676:	bf5c      	itt	pl
 8006678:	600b      	strpl	r3, [r1, #0]
 800667a:	2002      	movpl	r0, #2
 800667c:	4770      	bx	lr
 800667e:	b298      	uxth	r0, r3
 8006680:	b9a8      	cbnz	r0, 80066ae <__lo0bits+0x52>
 8006682:	0c1b      	lsrs	r3, r3, #16
 8006684:	2010      	movs	r0, #16
 8006686:	b2da      	uxtb	r2, r3
 8006688:	b90a      	cbnz	r2, 800668e <__lo0bits+0x32>
 800668a:	3008      	adds	r0, #8
 800668c:	0a1b      	lsrs	r3, r3, #8
 800668e:	071a      	lsls	r2, r3, #28
 8006690:	bf04      	itt	eq
 8006692:	091b      	lsreq	r3, r3, #4
 8006694:	3004      	addeq	r0, #4
 8006696:	079a      	lsls	r2, r3, #30
 8006698:	bf04      	itt	eq
 800669a:	089b      	lsreq	r3, r3, #2
 800669c:	3002      	addeq	r0, #2
 800669e:	07da      	lsls	r2, r3, #31
 80066a0:	d403      	bmi.n	80066aa <__lo0bits+0x4e>
 80066a2:	085b      	lsrs	r3, r3, #1
 80066a4:	f100 0001 	add.w	r0, r0, #1
 80066a8:	d005      	beq.n	80066b6 <__lo0bits+0x5a>
 80066aa:	600b      	str	r3, [r1, #0]
 80066ac:	4770      	bx	lr
 80066ae:	4610      	mov	r0, r2
 80066b0:	e7e9      	b.n	8006686 <__lo0bits+0x2a>
 80066b2:	2000      	movs	r0, #0
 80066b4:	4770      	bx	lr
 80066b6:	2020      	movs	r0, #32
 80066b8:	4770      	bx	lr
	...

080066bc <__i2b>:
 80066bc:	b510      	push	{r4, lr}
 80066be:	460c      	mov	r4, r1
 80066c0:	2101      	movs	r1, #1
 80066c2:	f7ff feb9 	bl	8006438 <_Balloc>
 80066c6:	4602      	mov	r2, r0
 80066c8:	b928      	cbnz	r0, 80066d6 <__i2b+0x1a>
 80066ca:	4b05      	ldr	r3, [pc, #20]	; (80066e0 <__i2b+0x24>)
 80066cc:	4805      	ldr	r0, [pc, #20]	; (80066e4 <__i2b+0x28>)
 80066ce:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80066d2:	f001 fa1d 	bl	8007b10 <__assert_func>
 80066d6:	2301      	movs	r3, #1
 80066d8:	6144      	str	r4, [r0, #20]
 80066da:	6103      	str	r3, [r0, #16]
 80066dc:	bd10      	pop	{r4, pc}
 80066de:	bf00      	nop
 80066e0:	08008c78 	.word	0x08008c78
 80066e4:	08008d04 	.word	0x08008d04

080066e8 <__multiply>:
 80066e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066ec:	4691      	mov	r9, r2
 80066ee:	690a      	ldr	r2, [r1, #16]
 80066f0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80066f4:	429a      	cmp	r2, r3
 80066f6:	bfb8      	it	lt
 80066f8:	460b      	movlt	r3, r1
 80066fa:	460c      	mov	r4, r1
 80066fc:	bfbc      	itt	lt
 80066fe:	464c      	movlt	r4, r9
 8006700:	4699      	movlt	r9, r3
 8006702:	6927      	ldr	r7, [r4, #16]
 8006704:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006708:	68a3      	ldr	r3, [r4, #8]
 800670a:	6861      	ldr	r1, [r4, #4]
 800670c:	eb07 060a 	add.w	r6, r7, sl
 8006710:	42b3      	cmp	r3, r6
 8006712:	b085      	sub	sp, #20
 8006714:	bfb8      	it	lt
 8006716:	3101      	addlt	r1, #1
 8006718:	f7ff fe8e 	bl	8006438 <_Balloc>
 800671c:	b930      	cbnz	r0, 800672c <__multiply+0x44>
 800671e:	4602      	mov	r2, r0
 8006720:	4b44      	ldr	r3, [pc, #272]	; (8006834 <__multiply+0x14c>)
 8006722:	4845      	ldr	r0, [pc, #276]	; (8006838 <__multiply+0x150>)
 8006724:	f240 115d 	movw	r1, #349	; 0x15d
 8006728:	f001 f9f2 	bl	8007b10 <__assert_func>
 800672c:	f100 0514 	add.w	r5, r0, #20
 8006730:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006734:	462b      	mov	r3, r5
 8006736:	2200      	movs	r2, #0
 8006738:	4543      	cmp	r3, r8
 800673a:	d321      	bcc.n	8006780 <__multiply+0x98>
 800673c:	f104 0314 	add.w	r3, r4, #20
 8006740:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006744:	f109 0314 	add.w	r3, r9, #20
 8006748:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800674c:	9202      	str	r2, [sp, #8]
 800674e:	1b3a      	subs	r2, r7, r4
 8006750:	3a15      	subs	r2, #21
 8006752:	f022 0203 	bic.w	r2, r2, #3
 8006756:	3204      	adds	r2, #4
 8006758:	f104 0115 	add.w	r1, r4, #21
 800675c:	428f      	cmp	r7, r1
 800675e:	bf38      	it	cc
 8006760:	2204      	movcc	r2, #4
 8006762:	9201      	str	r2, [sp, #4]
 8006764:	9a02      	ldr	r2, [sp, #8]
 8006766:	9303      	str	r3, [sp, #12]
 8006768:	429a      	cmp	r2, r3
 800676a:	d80c      	bhi.n	8006786 <__multiply+0x9e>
 800676c:	2e00      	cmp	r6, #0
 800676e:	dd03      	ble.n	8006778 <__multiply+0x90>
 8006770:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006774:	2b00      	cmp	r3, #0
 8006776:	d05a      	beq.n	800682e <__multiply+0x146>
 8006778:	6106      	str	r6, [r0, #16]
 800677a:	b005      	add	sp, #20
 800677c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006780:	f843 2b04 	str.w	r2, [r3], #4
 8006784:	e7d8      	b.n	8006738 <__multiply+0x50>
 8006786:	f8b3 a000 	ldrh.w	sl, [r3]
 800678a:	f1ba 0f00 	cmp.w	sl, #0
 800678e:	d024      	beq.n	80067da <__multiply+0xf2>
 8006790:	f104 0e14 	add.w	lr, r4, #20
 8006794:	46a9      	mov	r9, r5
 8006796:	f04f 0c00 	mov.w	ip, #0
 800679a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800679e:	f8d9 1000 	ldr.w	r1, [r9]
 80067a2:	fa1f fb82 	uxth.w	fp, r2
 80067a6:	b289      	uxth	r1, r1
 80067a8:	fb0a 110b 	mla	r1, sl, fp, r1
 80067ac:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80067b0:	f8d9 2000 	ldr.w	r2, [r9]
 80067b4:	4461      	add	r1, ip
 80067b6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80067ba:	fb0a c20b 	mla	r2, sl, fp, ip
 80067be:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80067c2:	b289      	uxth	r1, r1
 80067c4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80067c8:	4577      	cmp	r7, lr
 80067ca:	f849 1b04 	str.w	r1, [r9], #4
 80067ce:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80067d2:	d8e2      	bhi.n	800679a <__multiply+0xb2>
 80067d4:	9a01      	ldr	r2, [sp, #4]
 80067d6:	f845 c002 	str.w	ip, [r5, r2]
 80067da:	9a03      	ldr	r2, [sp, #12]
 80067dc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80067e0:	3304      	adds	r3, #4
 80067e2:	f1b9 0f00 	cmp.w	r9, #0
 80067e6:	d020      	beq.n	800682a <__multiply+0x142>
 80067e8:	6829      	ldr	r1, [r5, #0]
 80067ea:	f104 0c14 	add.w	ip, r4, #20
 80067ee:	46ae      	mov	lr, r5
 80067f0:	f04f 0a00 	mov.w	sl, #0
 80067f4:	f8bc b000 	ldrh.w	fp, [ip]
 80067f8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80067fc:	fb09 220b 	mla	r2, r9, fp, r2
 8006800:	4492      	add	sl, r2
 8006802:	b289      	uxth	r1, r1
 8006804:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8006808:	f84e 1b04 	str.w	r1, [lr], #4
 800680c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006810:	f8be 1000 	ldrh.w	r1, [lr]
 8006814:	0c12      	lsrs	r2, r2, #16
 8006816:	fb09 1102 	mla	r1, r9, r2, r1
 800681a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800681e:	4567      	cmp	r7, ip
 8006820:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006824:	d8e6      	bhi.n	80067f4 <__multiply+0x10c>
 8006826:	9a01      	ldr	r2, [sp, #4]
 8006828:	50a9      	str	r1, [r5, r2]
 800682a:	3504      	adds	r5, #4
 800682c:	e79a      	b.n	8006764 <__multiply+0x7c>
 800682e:	3e01      	subs	r6, #1
 8006830:	e79c      	b.n	800676c <__multiply+0x84>
 8006832:	bf00      	nop
 8006834:	08008c78 	.word	0x08008c78
 8006838:	08008d04 	.word	0x08008d04

0800683c <__pow5mult>:
 800683c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006840:	4615      	mov	r5, r2
 8006842:	f012 0203 	ands.w	r2, r2, #3
 8006846:	4606      	mov	r6, r0
 8006848:	460f      	mov	r7, r1
 800684a:	d007      	beq.n	800685c <__pow5mult+0x20>
 800684c:	4c25      	ldr	r4, [pc, #148]	; (80068e4 <__pow5mult+0xa8>)
 800684e:	3a01      	subs	r2, #1
 8006850:	2300      	movs	r3, #0
 8006852:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006856:	f7ff fe51 	bl	80064fc <__multadd>
 800685a:	4607      	mov	r7, r0
 800685c:	10ad      	asrs	r5, r5, #2
 800685e:	d03d      	beq.n	80068dc <__pow5mult+0xa0>
 8006860:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006862:	b97c      	cbnz	r4, 8006884 <__pow5mult+0x48>
 8006864:	2010      	movs	r0, #16
 8006866:	f7ff fdbf 	bl	80063e8 <malloc>
 800686a:	4602      	mov	r2, r0
 800686c:	6270      	str	r0, [r6, #36]	; 0x24
 800686e:	b928      	cbnz	r0, 800687c <__pow5mult+0x40>
 8006870:	4b1d      	ldr	r3, [pc, #116]	; (80068e8 <__pow5mult+0xac>)
 8006872:	481e      	ldr	r0, [pc, #120]	; (80068ec <__pow5mult+0xb0>)
 8006874:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006878:	f001 f94a 	bl	8007b10 <__assert_func>
 800687c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006880:	6004      	str	r4, [r0, #0]
 8006882:	60c4      	str	r4, [r0, #12]
 8006884:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006888:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800688c:	b94c      	cbnz	r4, 80068a2 <__pow5mult+0x66>
 800688e:	f240 2171 	movw	r1, #625	; 0x271
 8006892:	4630      	mov	r0, r6
 8006894:	f7ff ff12 	bl	80066bc <__i2b>
 8006898:	2300      	movs	r3, #0
 800689a:	f8c8 0008 	str.w	r0, [r8, #8]
 800689e:	4604      	mov	r4, r0
 80068a0:	6003      	str	r3, [r0, #0]
 80068a2:	f04f 0900 	mov.w	r9, #0
 80068a6:	07eb      	lsls	r3, r5, #31
 80068a8:	d50a      	bpl.n	80068c0 <__pow5mult+0x84>
 80068aa:	4639      	mov	r1, r7
 80068ac:	4622      	mov	r2, r4
 80068ae:	4630      	mov	r0, r6
 80068b0:	f7ff ff1a 	bl	80066e8 <__multiply>
 80068b4:	4639      	mov	r1, r7
 80068b6:	4680      	mov	r8, r0
 80068b8:	4630      	mov	r0, r6
 80068ba:	f7ff fdfd 	bl	80064b8 <_Bfree>
 80068be:	4647      	mov	r7, r8
 80068c0:	106d      	asrs	r5, r5, #1
 80068c2:	d00b      	beq.n	80068dc <__pow5mult+0xa0>
 80068c4:	6820      	ldr	r0, [r4, #0]
 80068c6:	b938      	cbnz	r0, 80068d8 <__pow5mult+0x9c>
 80068c8:	4622      	mov	r2, r4
 80068ca:	4621      	mov	r1, r4
 80068cc:	4630      	mov	r0, r6
 80068ce:	f7ff ff0b 	bl	80066e8 <__multiply>
 80068d2:	6020      	str	r0, [r4, #0]
 80068d4:	f8c0 9000 	str.w	r9, [r0]
 80068d8:	4604      	mov	r4, r0
 80068da:	e7e4      	b.n	80068a6 <__pow5mult+0x6a>
 80068dc:	4638      	mov	r0, r7
 80068de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80068e2:	bf00      	nop
 80068e4:	08008e50 	.word	0x08008e50
 80068e8:	08008c06 	.word	0x08008c06
 80068ec:	08008d04 	.word	0x08008d04

080068f0 <__lshift>:
 80068f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80068f4:	460c      	mov	r4, r1
 80068f6:	6849      	ldr	r1, [r1, #4]
 80068f8:	6923      	ldr	r3, [r4, #16]
 80068fa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80068fe:	68a3      	ldr	r3, [r4, #8]
 8006900:	4607      	mov	r7, r0
 8006902:	4691      	mov	r9, r2
 8006904:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006908:	f108 0601 	add.w	r6, r8, #1
 800690c:	42b3      	cmp	r3, r6
 800690e:	db0b      	blt.n	8006928 <__lshift+0x38>
 8006910:	4638      	mov	r0, r7
 8006912:	f7ff fd91 	bl	8006438 <_Balloc>
 8006916:	4605      	mov	r5, r0
 8006918:	b948      	cbnz	r0, 800692e <__lshift+0x3e>
 800691a:	4602      	mov	r2, r0
 800691c:	4b2a      	ldr	r3, [pc, #168]	; (80069c8 <__lshift+0xd8>)
 800691e:	482b      	ldr	r0, [pc, #172]	; (80069cc <__lshift+0xdc>)
 8006920:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006924:	f001 f8f4 	bl	8007b10 <__assert_func>
 8006928:	3101      	adds	r1, #1
 800692a:	005b      	lsls	r3, r3, #1
 800692c:	e7ee      	b.n	800690c <__lshift+0x1c>
 800692e:	2300      	movs	r3, #0
 8006930:	f100 0114 	add.w	r1, r0, #20
 8006934:	f100 0210 	add.w	r2, r0, #16
 8006938:	4618      	mov	r0, r3
 800693a:	4553      	cmp	r3, sl
 800693c:	db37      	blt.n	80069ae <__lshift+0xbe>
 800693e:	6920      	ldr	r0, [r4, #16]
 8006940:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006944:	f104 0314 	add.w	r3, r4, #20
 8006948:	f019 091f 	ands.w	r9, r9, #31
 800694c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006950:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006954:	d02f      	beq.n	80069b6 <__lshift+0xc6>
 8006956:	f1c9 0e20 	rsb	lr, r9, #32
 800695a:	468a      	mov	sl, r1
 800695c:	f04f 0c00 	mov.w	ip, #0
 8006960:	681a      	ldr	r2, [r3, #0]
 8006962:	fa02 f209 	lsl.w	r2, r2, r9
 8006966:	ea42 020c 	orr.w	r2, r2, ip
 800696a:	f84a 2b04 	str.w	r2, [sl], #4
 800696e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006972:	4298      	cmp	r0, r3
 8006974:	fa22 fc0e 	lsr.w	ip, r2, lr
 8006978:	d8f2      	bhi.n	8006960 <__lshift+0x70>
 800697a:	1b03      	subs	r3, r0, r4
 800697c:	3b15      	subs	r3, #21
 800697e:	f023 0303 	bic.w	r3, r3, #3
 8006982:	3304      	adds	r3, #4
 8006984:	f104 0215 	add.w	r2, r4, #21
 8006988:	4290      	cmp	r0, r2
 800698a:	bf38      	it	cc
 800698c:	2304      	movcc	r3, #4
 800698e:	f841 c003 	str.w	ip, [r1, r3]
 8006992:	f1bc 0f00 	cmp.w	ip, #0
 8006996:	d001      	beq.n	800699c <__lshift+0xac>
 8006998:	f108 0602 	add.w	r6, r8, #2
 800699c:	3e01      	subs	r6, #1
 800699e:	4638      	mov	r0, r7
 80069a0:	612e      	str	r6, [r5, #16]
 80069a2:	4621      	mov	r1, r4
 80069a4:	f7ff fd88 	bl	80064b8 <_Bfree>
 80069a8:	4628      	mov	r0, r5
 80069aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069ae:	f842 0f04 	str.w	r0, [r2, #4]!
 80069b2:	3301      	adds	r3, #1
 80069b4:	e7c1      	b.n	800693a <__lshift+0x4a>
 80069b6:	3904      	subs	r1, #4
 80069b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80069bc:	f841 2f04 	str.w	r2, [r1, #4]!
 80069c0:	4298      	cmp	r0, r3
 80069c2:	d8f9      	bhi.n	80069b8 <__lshift+0xc8>
 80069c4:	e7ea      	b.n	800699c <__lshift+0xac>
 80069c6:	bf00      	nop
 80069c8:	08008c78 	.word	0x08008c78
 80069cc:	08008d04 	.word	0x08008d04

080069d0 <__mcmp>:
 80069d0:	b530      	push	{r4, r5, lr}
 80069d2:	6902      	ldr	r2, [r0, #16]
 80069d4:	690c      	ldr	r4, [r1, #16]
 80069d6:	1b12      	subs	r2, r2, r4
 80069d8:	d10e      	bne.n	80069f8 <__mcmp+0x28>
 80069da:	f100 0314 	add.w	r3, r0, #20
 80069de:	3114      	adds	r1, #20
 80069e0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80069e4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80069e8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80069ec:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80069f0:	42a5      	cmp	r5, r4
 80069f2:	d003      	beq.n	80069fc <__mcmp+0x2c>
 80069f4:	d305      	bcc.n	8006a02 <__mcmp+0x32>
 80069f6:	2201      	movs	r2, #1
 80069f8:	4610      	mov	r0, r2
 80069fa:	bd30      	pop	{r4, r5, pc}
 80069fc:	4283      	cmp	r3, r0
 80069fe:	d3f3      	bcc.n	80069e8 <__mcmp+0x18>
 8006a00:	e7fa      	b.n	80069f8 <__mcmp+0x28>
 8006a02:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006a06:	e7f7      	b.n	80069f8 <__mcmp+0x28>

08006a08 <__mdiff>:
 8006a08:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a0c:	460c      	mov	r4, r1
 8006a0e:	4606      	mov	r6, r0
 8006a10:	4611      	mov	r1, r2
 8006a12:	4620      	mov	r0, r4
 8006a14:	4690      	mov	r8, r2
 8006a16:	f7ff ffdb 	bl	80069d0 <__mcmp>
 8006a1a:	1e05      	subs	r5, r0, #0
 8006a1c:	d110      	bne.n	8006a40 <__mdiff+0x38>
 8006a1e:	4629      	mov	r1, r5
 8006a20:	4630      	mov	r0, r6
 8006a22:	f7ff fd09 	bl	8006438 <_Balloc>
 8006a26:	b930      	cbnz	r0, 8006a36 <__mdiff+0x2e>
 8006a28:	4b3a      	ldr	r3, [pc, #232]	; (8006b14 <__mdiff+0x10c>)
 8006a2a:	4602      	mov	r2, r0
 8006a2c:	f240 2132 	movw	r1, #562	; 0x232
 8006a30:	4839      	ldr	r0, [pc, #228]	; (8006b18 <__mdiff+0x110>)
 8006a32:	f001 f86d 	bl	8007b10 <__assert_func>
 8006a36:	2301      	movs	r3, #1
 8006a38:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006a3c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a40:	bfa4      	itt	ge
 8006a42:	4643      	movge	r3, r8
 8006a44:	46a0      	movge	r8, r4
 8006a46:	4630      	mov	r0, r6
 8006a48:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006a4c:	bfa6      	itte	ge
 8006a4e:	461c      	movge	r4, r3
 8006a50:	2500      	movge	r5, #0
 8006a52:	2501      	movlt	r5, #1
 8006a54:	f7ff fcf0 	bl	8006438 <_Balloc>
 8006a58:	b920      	cbnz	r0, 8006a64 <__mdiff+0x5c>
 8006a5a:	4b2e      	ldr	r3, [pc, #184]	; (8006b14 <__mdiff+0x10c>)
 8006a5c:	4602      	mov	r2, r0
 8006a5e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006a62:	e7e5      	b.n	8006a30 <__mdiff+0x28>
 8006a64:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006a68:	6926      	ldr	r6, [r4, #16]
 8006a6a:	60c5      	str	r5, [r0, #12]
 8006a6c:	f104 0914 	add.w	r9, r4, #20
 8006a70:	f108 0514 	add.w	r5, r8, #20
 8006a74:	f100 0e14 	add.w	lr, r0, #20
 8006a78:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006a7c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006a80:	f108 0210 	add.w	r2, r8, #16
 8006a84:	46f2      	mov	sl, lr
 8006a86:	2100      	movs	r1, #0
 8006a88:	f859 3b04 	ldr.w	r3, [r9], #4
 8006a8c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006a90:	fa1f f883 	uxth.w	r8, r3
 8006a94:	fa11 f18b 	uxtah	r1, r1, fp
 8006a98:	0c1b      	lsrs	r3, r3, #16
 8006a9a:	eba1 0808 	sub.w	r8, r1, r8
 8006a9e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006aa2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006aa6:	fa1f f888 	uxth.w	r8, r8
 8006aaa:	1419      	asrs	r1, r3, #16
 8006aac:	454e      	cmp	r6, r9
 8006aae:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006ab2:	f84a 3b04 	str.w	r3, [sl], #4
 8006ab6:	d8e7      	bhi.n	8006a88 <__mdiff+0x80>
 8006ab8:	1b33      	subs	r3, r6, r4
 8006aba:	3b15      	subs	r3, #21
 8006abc:	f023 0303 	bic.w	r3, r3, #3
 8006ac0:	3304      	adds	r3, #4
 8006ac2:	3415      	adds	r4, #21
 8006ac4:	42a6      	cmp	r6, r4
 8006ac6:	bf38      	it	cc
 8006ac8:	2304      	movcc	r3, #4
 8006aca:	441d      	add	r5, r3
 8006acc:	4473      	add	r3, lr
 8006ace:	469e      	mov	lr, r3
 8006ad0:	462e      	mov	r6, r5
 8006ad2:	4566      	cmp	r6, ip
 8006ad4:	d30e      	bcc.n	8006af4 <__mdiff+0xec>
 8006ad6:	f10c 0203 	add.w	r2, ip, #3
 8006ada:	1b52      	subs	r2, r2, r5
 8006adc:	f022 0203 	bic.w	r2, r2, #3
 8006ae0:	3d03      	subs	r5, #3
 8006ae2:	45ac      	cmp	ip, r5
 8006ae4:	bf38      	it	cc
 8006ae6:	2200      	movcc	r2, #0
 8006ae8:	441a      	add	r2, r3
 8006aea:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8006aee:	b17b      	cbz	r3, 8006b10 <__mdiff+0x108>
 8006af0:	6107      	str	r7, [r0, #16]
 8006af2:	e7a3      	b.n	8006a3c <__mdiff+0x34>
 8006af4:	f856 8b04 	ldr.w	r8, [r6], #4
 8006af8:	fa11 f288 	uxtah	r2, r1, r8
 8006afc:	1414      	asrs	r4, r2, #16
 8006afe:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006b02:	b292      	uxth	r2, r2
 8006b04:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8006b08:	f84e 2b04 	str.w	r2, [lr], #4
 8006b0c:	1421      	asrs	r1, r4, #16
 8006b0e:	e7e0      	b.n	8006ad2 <__mdiff+0xca>
 8006b10:	3f01      	subs	r7, #1
 8006b12:	e7ea      	b.n	8006aea <__mdiff+0xe2>
 8006b14:	08008c78 	.word	0x08008c78
 8006b18:	08008d04 	.word	0x08008d04

08006b1c <__ulp>:
 8006b1c:	b082      	sub	sp, #8
 8006b1e:	ed8d 0b00 	vstr	d0, [sp]
 8006b22:	9b01      	ldr	r3, [sp, #4]
 8006b24:	4912      	ldr	r1, [pc, #72]	; (8006b70 <__ulp+0x54>)
 8006b26:	4019      	ands	r1, r3
 8006b28:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8006b2c:	2900      	cmp	r1, #0
 8006b2e:	dd05      	ble.n	8006b3c <__ulp+0x20>
 8006b30:	2200      	movs	r2, #0
 8006b32:	460b      	mov	r3, r1
 8006b34:	ec43 2b10 	vmov	d0, r2, r3
 8006b38:	b002      	add	sp, #8
 8006b3a:	4770      	bx	lr
 8006b3c:	4249      	negs	r1, r1
 8006b3e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8006b42:	ea4f 5021 	mov.w	r0, r1, asr #20
 8006b46:	f04f 0200 	mov.w	r2, #0
 8006b4a:	f04f 0300 	mov.w	r3, #0
 8006b4e:	da04      	bge.n	8006b5a <__ulp+0x3e>
 8006b50:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8006b54:	fa41 f300 	asr.w	r3, r1, r0
 8006b58:	e7ec      	b.n	8006b34 <__ulp+0x18>
 8006b5a:	f1a0 0114 	sub.w	r1, r0, #20
 8006b5e:	291e      	cmp	r1, #30
 8006b60:	bfda      	itte	le
 8006b62:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8006b66:	fa20 f101 	lsrle.w	r1, r0, r1
 8006b6a:	2101      	movgt	r1, #1
 8006b6c:	460a      	mov	r2, r1
 8006b6e:	e7e1      	b.n	8006b34 <__ulp+0x18>
 8006b70:	7ff00000 	.word	0x7ff00000

08006b74 <__b2d>:
 8006b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b76:	6905      	ldr	r5, [r0, #16]
 8006b78:	f100 0714 	add.w	r7, r0, #20
 8006b7c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8006b80:	1f2e      	subs	r6, r5, #4
 8006b82:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8006b86:	4620      	mov	r0, r4
 8006b88:	f7ff fd48 	bl	800661c <__hi0bits>
 8006b8c:	f1c0 0320 	rsb	r3, r0, #32
 8006b90:	280a      	cmp	r0, #10
 8006b92:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8006c10 <__b2d+0x9c>
 8006b96:	600b      	str	r3, [r1, #0]
 8006b98:	dc14      	bgt.n	8006bc4 <__b2d+0x50>
 8006b9a:	f1c0 0e0b 	rsb	lr, r0, #11
 8006b9e:	fa24 f10e 	lsr.w	r1, r4, lr
 8006ba2:	42b7      	cmp	r7, r6
 8006ba4:	ea41 030c 	orr.w	r3, r1, ip
 8006ba8:	bf34      	ite	cc
 8006baa:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8006bae:	2100      	movcs	r1, #0
 8006bb0:	3015      	adds	r0, #21
 8006bb2:	fa04 f000 	lsl.w	r0, r4, r0
 8006bb6:	fa21 f10e 	lsr.w	r1, r1, lr
 8006bba:	ea40 0201 	orr.w	r2, r0, r1
 8006bbe:	ec43 2b10 	vmov	d0, r2, r3
 8006bc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006bc4:	42b7      	cmp	r7, r6
 8006bc6:	bf3a      	itte	cc
 8006bc8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8006bcc:	f1a5 0608 	subcc.w	r6, r5, #8
 8006bd0:	2100      	movcs	r1, #0
 8006bd2:	380b      	subs	r0, #11
 8006bd4:	d017      	beq.n	8006c06 <__b2d+0x92>
 8006bd6:	f1c0 0c20 	rsb	ip, r0, #32
 8006bda:	fa04 f500 	lsl.w	r5, r4, r0
 8006bde:	42be      	cmp	r6, r7
 8006be0:	fa21 f40c 	lsr.w	r4, r1, ip
 8006be4:	ea45 0504 	orr.w	r5, r5, r4
 8006be8:	bf8c      	ite	hi
 8006bea:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8006bee:	2400      	movls	r4, #0
 8006bf0:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8006bf4:	fa01 f000 	lsl.w	r0, r1, r0
 8006bf8:	fa24 f40c 	lsr.w	r4, r4, ip
 8006bfc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006c00:	ea40 0204 	orr.w	r2, r0, r4
 8006c04:	e7db      	b.n	8006bbe <__b2d+0x4a>
 8006c06:	ea44 030c 	orr.w	r3, r4, ip
 8006c0a:	460a      	mov	r2, r1
 8006c0c:	e7d7      	b.n	8006bbe <__b2d+0x4a>
 8006c0e:	bf00      	nop
 8006c10:	3ff00000 	.word	0x3ff00000

08006c14 <__d2b>:
 8006c14:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006c18:	4689      	mov	r9, r1
 8006c1a:	2101      	movs	r1, #1
 8006c1c:	ec57 6b10 	vmov	r6, r7, d0
 8006c20:	4690      	mov	r8, r2
 8006c22:	f7ff fc09 	bl	8006438 <_Balloc>
 8006c26:	4604      	mov	r4, r0
 8006c28:	b930      	cbnz	r0, 8006c38 <__d2b+0x24>
 8006c2a:	4602      	mov	r2, r0
 8006c2c:	4b25      	ldr	r3, [pc, #148]	; (8006cc4 <__d2b+0xb0>)
 8006c2e:	4826      	ldr	r0, [pc, #152]	; (8006cc8 <__d2b+0xb4>)
 8006c30:	f240 310a 	movw	r1, #778	; 0x30a
 8006c34:	f000 ff6c 	bl	8007b10 <__assert_func>
 8006c38:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8006c3c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006c40:	bb35      	cbnz	r5, 8006c90 <__d2b+0x7c>
 8006c42:	2e00      	cmp	r6, #0
 8006c44:	9301      	str	r3, [sp, #4]
 8006c46:	d028      	beq.n	8006c9a <__d2b+0x86>
 8006c48:	4668      	mov	r0, sp
 8006c4a:	9600      	str	r6, [sp, #0]
 8006c4c:	f7ff fd06 	bl	800665c <__lo0bits>
 8006c50:	9900      	ldr	r1, [sp, #0]
 8006c52:	b300      	cbz	r0, 8006c96 <__d2b+0x82>
 8006c54:	9a01      	ldr	r2, [sp, #4]
 8006c56:	f1c0 0320 	rsb	r3, r0, #32
 8006c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8006c5e:	430b      	orrs	r3, r1
 8006c60:	40c2      	lsrs	r2, r0
 8006c62:	6163      	str	r3, [r4, #20]
 8006c64:	9201      	str	r2, [sp, #4]
 8006c66:	9b01      	ldr	r3, [sp, #4]
 8006c68:	61a3      	str	r3, [r4, #24]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	bf14      	ite	ne
 8006c6e:	2202      	movne	r2, #2
 8006c70:	2201      	moveq	r2, #1
 8006c72:	6122      	str	r2, [r4, #16]
 8006c74:	b1d5      	cbz	r5, 8006cac <__d2b+0x98>
 8006c76:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006c7a:	4405      	add	r5, r0
 8006c7c:	f8c9 5000 	str.w	r5, [r9]
 8006c80:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006c84:	f8c8 0000 	str.w	r0, [r8]
 8006c88:	4620      	mov	r0, r4
 8006c8a:	b003      	add	sp, #12
 8006c8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006c90:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006c94:	e7d5      	b.n	8006c42 <__d2b+0x2e>
 8006c96:	6161      	str	r1, [r4, #20]
 8006c98:	e7e5      	b.n	8006c66 <__d2b+0x52>
 8006c9a:	a801      	add	r0, sp, #4
 8006c9c:	f7ff fcde 	bl	800665c <__lo0bits>
 8006ca0:	9b01      	ldr	r3, [sp, #4]
 8006ca2:	6163      	str	r3, [r4, #20]
 8006ca4:	2201      	movs	r2, #1
 8006ca6:	6122      	str	r2, [r4, #16]
 8006ca8:	3020      	adds	r0, #32
 8006caa:	e7e3      	b.n	8006c74 <__d2b+0x60>
 8006cac:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006cb0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006cb4:	f8c9 0000 	str.w	r0, [r9]
 8006cb8:	6918      	ldr	r0, [r3, #16]
 8006cba:	f7ff fcaf 	bl	800661c <__hi0bits>
 8006cbe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006cc2:	e7df      	b.n	8006c84 <__d2b+0x70>
 8006cc4:	08008c78 	.word	0x08008c78
 8006cc8:	08008d04 	.word	0x08008d04

08006ccc <__ratio>:
 8006ccc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cd0:	4688      	mov	r8, r1
 8006cd2:	4669      	mov	r1, sp
 8006cd4:	4681      	mov	r9, r0
 8006cd6:	f7ff ff4d 	bl	8006b74 <__b2d>
 8006cda:	a901      	add	r1, sp, #4
 8006cdc:	4640      	mov	r0, r8
 8006cde:	ec55 4b10 	vmov	r4, r5, d0
 8006ce2:	f7ff ff47 	bl	8006b74 <__b2d>
 8006ce6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006cea:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8006cee:	eba3 0c02 	sub.w	ip, r3, r2
 8006cf2:	e9dd 3200 	ldrd	r3, r2, [sp]
 8006cf6:	1a9b      	subs	r3, r3, r2
 8006cf8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8006cfc:	ec51 0b10 	vmov	r0, r1, d0
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	bfd6      	itet	le
 8006d04:	460a      	movle	r2, r1
 8006d06:	462a      	movgt	r2, r5
 8006d08:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8006d0c:	468b      	mov	fp, r1
 8006d0e:	462f      	mov	r7, r5
 8006d10:	bfd4      	ite	le
 8006d12:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8006d16:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8006d1a:	4620      	mov	r0, r4
 8006d1c:	ee10 2a10 	vmov	r2, s0
 8006d20:	465b      	mov	r3, fp
 8006d22:	4639      	mov	r1, r7
 8006d24:	f7f9 fdaa 	bl	800087c <__aeabi_ddiv>
 8006d28:	ec41 0b10 	vmov	d0, r0, r1
 8006d2c:	b003      	add	sp, #12
 8006d2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006d32 <__copybits>:
 8006d32:	3901      	subs	r1, #1
 8006d34:	b570      	push	{r4, r5, r6, lr}
 8006d36:	1149      	asrs	r1, r1, #5
 8006d38:	6914      	ldr	r4, [r2, #16]
 8006d3a:	3101      	adds	r1, #1
 8006d3c:	f102 0314 	add.w	r3, r2, #20
 8006d40:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006d44:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006d48:	1f05      	subs	r5, r0, #4
 8006d4a:	42a3      	cmp	r3, r4
 8006d4c:	d30c      	bcc.n	8006d68 <__copybits+0x36>
 8006d4e:	1aa3      	subs	r3, r4, r2
 8006d50:	3b11      	subs	r3, #17
 8006d52:	f023 0303 	bic.w	r3, r3, #3
 8006d56:	3211      	adds	r2, #17
 8006d58:	42a2      	cmp	r2, r4
 8006d5a:	bf88      	it	hi
 8006d5c:	2300      	movhi	r3, #0
 8006d5e:	4418      	add	r0, r3
 8006d60:	2300      	movs	r3, #0
 8006d62:	4288      	cmp	r0, r1
 8006d64:	d305      	bcc.n	8006d72 <__copybits+0x40>
 8006d66:	bd70      	pop	{r4, r5, r6, pc}
 8006d68:	f853 6b04 	ldr.w	r6, [r3], #4
 8006d6c:	f845 6f04 	str.w	r6, [r5, #4]!
 8006d70:	e7eb      	b.n	8006d4a <__copybits+0x18>
 8006d72:	f840 3b04 	str.w	r3, [r0], #4
 8006d76:	e7f4      	b.n	8006d62 <__copybits+0x30>

08006d78 <__any_on>:
 8006d78:	f100 0214 	add.w	r2, r0, #20
 8006d7c:	6900      	ldr	r0, [r0, #16]
 8006d7e:	114b      	asrs	r3, r1, #5
 8006d80:	4298      	cmp	r0, r3
 8006d82:	b510      	push	{r4, lr}
 8006d84:	db11      	blt.n	8006daa <__any_on+0x32>
 8006d86:	dd0a      	ble.n	8006d9e <__any_on+0x26>
 8006d88:	f011 011f 	ands.w	r1, r1, #31
 8006d8c:	d007      	beq.n	8006d9e <__any_on+0x26>
 8006d8e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8006d92:	fa24 f001 	lsr.w	r0, r4, r1
 8006d96:	fa00 f101 	lsl.w	r1, r0, r1
 8006d9a:	428c      	cmp	r4, r1
 8006d9c:	d10b      	bne.n	8006db6 <__any_on+0x3e>
 8006d9e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d803      	bhi.n	8006dae <__any_on+0x36>
 8006da6:	2000      	movs	r0, #0
 8006da8:	bd10      	pop	{r4, pc}
 8006daa:	4603      	mov	r3, r0
 8006dac:	e7f7      	b.n	8006d9e <__any_on+0x26>
 8006dae:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006db2:	2900      	cmp	r1, #0
 8006db4:	d0f5      	beq.n	8006da2 <__any_on+0x2a>
 8006db6:	2001      	movs	r0, #1
 8006db8:	e7f6      	b.n	8006da8 <__any_on+0x30>

08006dba <_calloc_r>:
 8006dba:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006dbc:	fba1 2402 	umull	r2, r4, r1, r2
 8006dc0:	b94c      	cbnz	r4, 8006dd6 <_calloc_r+0x1c>
 8006dc2:	4611      	mov	r1, r2
 8006dc4:	9201      	str	r2, [sp, #4]
 8006dc6:	f000 f87b 	bl	8006ec0 <_malloc_r>
 8006dca:	9a01      	ldr	r2, [sp, #4]
 8006dcc:	4605      	mov	r5, r0
 8006dce:	b930      	cbnz	r0, 8006dde <_calloc_r+0x24>
 8006dd0:	4628      	mov	r0, r5
 8006dd2:	b003      	add	sp, #12
 8006dd4:	bd30      	pop	{r4, r5, pc}
 8006dd6:	220c      	movs	r2, #12
 8006dd8:	6002      	str	r2, [r0, #0]
 8006dda:	2500      	movs	r5, #0
 8006ddc:	e7f8      	b.n	8006dd0 <_calloc_r+0x16>
 8006dde:	4621      	mov	r1, r4
 8006de0:	f7fc fb06 	bl	80033f0 <memset>
 8006de4:	e7f4      	b.n	8006dd0 <_calloc_r+0x16>
	...

08006de8 <_free_r>:
 8006de8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006dea:	2900      	cmp	r1, #0
 8006dec:	d044      	beq.n	8006e78 <_free_r+0x90>
 8006dee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006df2:	9001      	str	r0, [sp, #4]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	f1a1 0404 	sub.w	r4, r1, #4
 8006dfa:	bfb8      	it	lt
 8006dfc:	18e4      	addlt	r4, r4, r3
 8006dfe:	f001 f88b 	bl	8007f18 <__malloc_lock>
 8006e02:	4a1e      	ldr	r2, [pc, #120]	; (8006e7c <_free_r+0x94>)
 8006e04:	9801      	ldr	r0, [sp, #4]
 8006e06:	6813      	ldr	r3, [r2, #0]
 8006e08:	b933      	cbnz	r3, 8006e18 <_free_r+0x30>
 8006e0a:	6063      	str	r3, [r4, #4]
 8006e0c:	6014      	str	r4, [r2, #0]
 8006e0e:	b003      	add	sp, #12
 8006e10:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006e14:	f001 b886 	b.w	8007f24 <__malloc_unlock>
 8006e18:	42a3      	cmp	r3, r4
 8006e1a:	d908      	bls.n	8006e2e <_free_r+0x46>
 8006e1c:	6825      	ldr	r5, [r4, #0]
 8006e1e:	1961      	adds	r1, r4, r5
 8006e20:	428b      	cmp	r3, r1
 8006e22:	bf01      	itttt	eq
 8006e24:	6819      	ldreq	r1, [r3, #0]
 8006e26:	685b      	ldreq	r3, [r3, #4]
 8006e28:	1949      	addeq	r1, r1, r5
 8006e2a:	6021      	streq	r1, [r4, #0]
 8006e2c:	e7ed      	b.n	8006e0a <_free_r+0x22>
 8006e2e:	461a      	mov	r2, r3
 8006e30:	685b      	ldr	r3, [r3, #4]
 8006e32:	b10b      	cbz	r3, 8006e38 <_free_r+0x50>
 8006e34:	42a3      	cmp	r3, r4
 8006e36:	d9fa      	bls.n	8006e2e <_free_r+0x46>
 8006e38:	6811      	ldr	r1, [r2, #0]
 8006e3a:	1855      	adds	r5, r2, r1
 8006e3c:	42a5      	cmp	r5, r4
 8006e3e:	d10b      	bne.n	8006e58 <_free_r+0x70>
 8006e40:	6824      	ldr	r4, [r4, #0]
 8006e42:	4421      	add	r1, r4
 8006e44:	1854      	adds	r4, r2, r1
 8006e46:	42a3      	cmp	r3, r4
 8006e48:	6011      	str	r1, [r2, #0]
 8006e4a:	d1e0      	bne.n	8006e0e <_free_r+0x26>
 8006e4c:	681c      	ldr	r4, [r3, #0]
 8006e4e:	685b      	ldr	r3, [r3, #4]
 8006e50:	6053      	str	r3, [r2, #4]
 8006e52:	4421      	add	r1, r4
 8006e54:	6011      	str	r1, [r2, #0]
 8006e56:	e7da      	b.n	8006e0e <_free_r+0x26>
 8006e58:	d902      	bls.n	8006e60 <_free_r+0x78>
 8006e5a:	230c      	movs	r3, #12
 8006e5c:	6003      	str	r3, [r0, #0]
 8006e5e:	e7d6      	b.n	8006e0e <_free_r+0x26>
 8006e60:	6825      	ldr	r5, [r4, #0]
 8006e62:	1961      	adds	r1, r4, r5
 8006e64:	428b      	cmp	r3, r1
 8006e66:	bf04      	itt	eq
 8006e68:	6819      	ldreq	r1, [r3, #0]
 8006e6a:	685b      	ldreq	r3, [r3, #4]
 8006e6c:	6063      	str	r3, [r4, #4]
 8006e6e:	bf04      	itt	eq
 8006e70:	1949      	addeq	r1, r1, r5
 8006e72:	6021      	streq	r1, [r4, #0]
 8006e74:	6054      	str	r4, [r2, #4]
 8006e76:	e7ca      	b.n	8006e0e <_free_r+0x26>
 8006e78:	b003      	add	sp, #12
 8006e7a:	bd30      	pop	{r4, r5, pc}
 8006e7c:	200006ec 	.word	0x200006ec

08006e80 <sbrk_aligned>:
 8006e80:	b570      	push	{r4, r5, r6, lr}
 8006e82:	4e0e      	ldr	r6, [pc, #56]	; (8006ebc <sbrk_aligned+0x3c>)
 8006e84:	460c      	mov	r4, r1
 8006e86:	6831      	ldr	r1, [r6, #0]
 8006e88:	4605      	mov	r5, r0
 8006e8a:	b911      	cbnz	r1, 8006e92 <sbrk_aligned+0x12>
 8006e8c:	f000 fd28 	bl	80078e0 <_sbrk_r>
 8006e90:	6030      	str	r0, [r6, #0]
 8006e92:	4621      	mov	r1, r4
 8006e94:	4628      	mov	r0, r5
 8006e96:	f000 fd23 	bl	80078e0 <_sbrk_r>
 8006e9a:	1c43      	adds	r3, r0, #1
 8006e9c:	d00a      	beq.n	8006eb4 <sbrk_aligned+0x34>
 8006e9e:	1cc4      	adds	r4, r0, #3
 8006ea0:	f024 0403 	bic.w	r4, r4, #3
 8006ea4:	42a0      	cmp	r0, r4
 8006ea6:	d007      	beq.n	8006eb8 <sbrk_aligned+0x38>
 8006ea8:	1a21      	subs	r1, r4, r0
 8006eaa:	4628      	mov	r0, r5
 8006eac:	f000 fd18 	bl	80078e0 <_sbrk_r>
 8006eb0:	3001      	adds	r0, #1
 8006eb2:	d101      	bne.n	8006eb8 <sbrk_aligned+0x38>
 8006eb4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006eb8:	4620      	mov	r0, r4
 8006eba:	bd70      	pop	{r4, r5, r6, pc}
 8006ebc:	200006f0 	.word	0x200006f0

08006ec0 <_malloc_r>:
 8006ec0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ec4:	1ccd      	adds	r5, r1, #3
 8006ec6:	f025 0503 	bic.w	r5, r5, #3
 8006eca:	3508      	adds	r5, #8
 8006ecc:	2d0c      	cmp	r5, #12
 8006ece:	bf38      	it	cc
 8006ed0:	250c      	movcc	r5, #12
 8006ed2:	2d00      	cmp	r5, #0
 8006ed4:	4607      	mov	r7, r0
 8006ed6:	db01      	blt.n	8006edc <_malloc_r+0x1c>
 8006ed8:	42a9      	cmp	r1, r5
 8006eda:	d905      	bls.n	8006ee8 <_malloc_r+0x28>
 8006edc:	230c      	movs	r3, #12
 8006ede:	603b      	str	r3, [r7, #0]
 8006ee0:	2600      	movs	r6, #0
 8006ee2:	4630      	mov	r0, r6
 8006ee4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ee8:	4e2e      	ldr	r6, [pc, #184]	; (8006fa4 <_malloc_r+0xe4>)
 8006eea:	f001 f815 	bl	8007f18 <__malloc_lock>
 8006eee:	6833      	ldr	r3, [r6, #0]
 8006ef0:	461c      	mov	r4, r3
 8006ef2:	bb34      	cbnz	r4, 8006f42 <_malloc_r+0x82>
 8006ef4:	4629      	mov	r1, r5
 8006ef6:	4638      	mov	r0, r7
 8006ef8:	f7ff ffc2 	bl	8006e80 <sbrk_aligned>
 8006efc:	1c43      	adds	r3, r0, #1
 8006efe:	4604      	mov	r4, r0
 8006f00:	d14d      	bne.n	8006f9e <_malloc_r+0xde>
 8006f02:	6834      	ldr	r4, [r6, #0]
 8006f04:	4626      	mov	r6, r4
 8006f06:	2e00      	cmp	r6, #0
 8006f08:	d140      	bne.n	8006f8c <_malloc_r+0xcc>
 8006f0a:	6823      	ldr	r3, [r4, #0]
 8006f0c:	4631      	mov	r1, r6
 8006f0e:	4638      	mov	r0, r7
 8006f10:	eb04 0803 	add.w	r8, r4, r3
 8006f14:	f000 fce4 	bl	80078e0 <_sbrk_r>
 8006f18:	4580      	cmp	r8, r0
 8006f1a:	d13a      	bne.n	8006f92 <_malloc_r+0xd2>
 8006f1c:	6821      	ldr	r1, [r4, #0]
 8006f1e:	3503      	adds	r5, #3
 8006f20:	1a6d      	subs	r5, r5, r1
 8006f22:	f025 0503 	bic.w	r5, r5, #3
 8006f26:	3508      	adds	r5, #8
 8006f28:	2d0c      	cmp	r5, #12
 8006f2a:	bf38      	it	cc
 8006f2c:	250c      	movcc	r5, #12
 8006f2e:	4629      	mov	r1, r5
 8006f30:	4638      	mov	r0, r7
 8006f32:	f7ff ffa5 	bl	8006e80 <sbrk_aligned>
 8006f36:	3001      	adds	r0, #1
 8006f38:	d02b      	beq.n	8006f92 <_malloc_r+0xd2>
 8006f3a:	6823      	ldr	r3, [r4, #0]
 8006f3c:	442b      	add	r3, r5
 8006f3e:	6023      	str	r3, [r4, #0]
 8006f40:	e00e      	b.n	8006f60 <_malloc_r+0xa0>
 8006f42:	6822      	ldr	r2, [r4, #0]
 8006f44:	1b52      	subs	r2, r2, r5
 8006f46:	d41e      	bmi.n	8006f86 <_malloc_r+0xc6>
 8006f48:	2a0b      	cmp	r2, #11
 8006f4a:	d916      	bls.n	8006f7a <_malloc_r+0xba>
 8006f4c:	1961      	adds	r1, r4, r5
 8006f4e:	42a3      	cmp	r3, r4
 8006f50:	6025      	str	r5, [r4, #0]
 8006f52:	bf18      	it	ne
 8006f54:	6059      	strne	r1, [r3, #4]
 8006f56:	6863      	ldr	r3, [r4, #4]
 8006f58:	bf08      	it	eq
 8006f5a:	6031      	streq	r1, [r6, #0]
 8006f5c:	5162      	str	r2, [r4, r5]
 8006f5e:	604b      	str	r3, [r1, #4]
 8006f60:	4638      	mov	r0, r7
 8006f62:	f104 060b 	add.w	r6, r4, #11
 8006f66:	f000 ffdd 	bl	8007f24 <__malloc_unlock>
 8006f6a:	f026 0607 	bic.w	r6, r6, #7
 8006f6e:	1d23      	adds	r3, r4, #4
 8006f70:	1af2      	subs	r2, r6, r3
 8006f72:	d0b6      	beq.n	8006ee2 <_malloc_r+0x22>
 8006f74:	1b9b      	subs	r3, r3, r6
 8006f76:	50a3      	str	r3, [r4, r2]
 8006f78:	e7b3      	b.n	8006ee2 <_malloc_r+0x22>
 8006f7a:	6862      	ldr	r2, [r4, #4]
 8006f7c:	42a3      	cmp	r3, r4
 8006f7e:	bf0c      	ite	eq
 8006f80:	6032      	streq	r2, [r6, #0]
 8006f82:	605a      	strne	r2, [r3, #4]
 8006f84:	e7ec      	b.n	8006f60 <_malloc_r+0xa0>
 8006f86:	4623      	mov	r3, r4
 8006f88:	6864      	ldr	r4, [r4, #4]
 8006f8a:	e7b2      	b.n	8006ef2 <_malloc_r+0x32>
 8006f8c:	4634      	mov	r4, r6
 8006f8e:	6876      	ldr	r6, [r6, #4]
 8006f90:	e7b9      	b.n	8006f06 <_malloc_r+0x46>
 8006f92:	230c      	movs	r3, #12
 8006f94:	603b      	str	r3, [r7, #0]
 8006f96:	4638      	mov	r0, r7
 8006f98:	f000 ffc4 	bl	8007f24 <__malloc_unlock>
 8006f9c:	e7a1      	b.n	8006ee2 <_malloc_r+0x22>
 8006f9e:	6025      	str	r5, [r4, #0]
 8006fa0:	e7de      	b.n	8006f60 <_malloc_r+0xa0>
 8006fa2:	bf00      	nop
 8006fa4:	200006ec 	.word	0x200006ec

08006fa8 <__ssputs_r>:
 8006fa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006fac:	688e      	ldr	r6, [r1, #8]
 8006fae:	429e      	cmp	r6, r3
 8006fb0:	4682      	mov	sl, r0
 8006fb2:	460c      	mov	r4, r1
 8006fb4:	4690      	mov	r8, r2
 8006fb6:	461f      	mov	r7, r3
 8006fb8:	d838      	bhi.n	800702c <__ssputs_r+0x84>
 8006fba:	898a      	ldrh	r2, [r1, #12]
 8006fbc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006fc0:	d032      	beq.n	8007028 <__ssputs_r+0x80>
 8006fc2:	6825      	ldr	r5, [r4, #0]
 8006fc4:	6909      	ldr	r1, [r1, #16]
 8006fc6:	eba5 0901 	sub.w	r9, r5, r1
 8006fca:	6965      	ldr	r5, [r4, #20]
 8006fcc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006fd0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006fd4:	3301      	adds	r3, #1
 8006fd6:	444b      	add	r3, r9
 8006fd8:	106d      	asrs	r5, r5, #1
 8006fda:	429d      	cmp	r5, r3
 8006fdc:	bf38      	it	cc
 8006fde:	461d      	movcc	r5, r3
 8006fe0:	0553      	lsls	r3, r2, #21
 8006fe2:	d531      	bpl.n	8007048 <__ssputs_r+0xa0>
 8006fe4:	4629      	mov	r1, r5
 8006fe6:	f7ff ff6b 	bl	8006ec0 <_malloc_r>
 8006fea:	4606      	mov	r6, r0
 8006fec:	b950      	cbnz	r0, 8007004 <__ssputs_r+0x5c>
 8006fee:	230c      	movs	r3, #12
 8006ff0:	f8ca 3000 	str.w	r3, [sl]
 8006ff4:	89a3      	ldrh	r3, [r4, #12]
 8006ff6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ffa:	81a3      	strh	r3, [r4, #12]
 8006ffc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007000:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007004:	6921      	ldr	r1, [r4, #16]
 8007006:	464a      	mov	r2, r9
 8007008:	f7ff fa08 	bl	800641c <memcpy>
 800700c:	89a3      	ldrh	r3, [r4, #12]
 800700e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007012:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007016:	81a3      	strh	r3, [r4, #12]
 8007018:	6126      	str	r6, [r4, #16]
 800701a:	6165      	str	r5, [r4, #20]
 800701c:	444e      	add	r6, r9
 800701e:	eba5 0509 	sub.w	r5, r5, r9
 8007022:	6026      	str	r6, [r4, #0]
 8007024:	60a5      	str	r5, [r4, #8]
 8007026:	463e      	mov	r6, r7
 8007028:	42be      	cmp	r6, r7
 800702a:	d900      	bls.n	800702e <__ssputs_r+0x86>
 800702c:	463e      	mov	r6, r7
 800702e:	6820      	ldr	r0, [r4, #0]
 8007030:	4632      	mov	r2, r6
 8007032:	4641      	mov	r1, r8
 8007034:	f000 ff56 	bl	8007ee4 <memmove>
 8007038:	68a3      	ldr	r3, [r4, #8]
 800703a:	1b9b      	subs	r3, r3, r6
 800703c:	60a3      	str	r3, [r4, #8]
 800703e:	6823      	ldr	r3, [r4, #0]
 8007040:	4433      	add	r3, r6
 8007042:	6023      	str	r3, [r4, #0]
 8007044:	2000      	movs	r0, #0
 8007046:	e7db      	b.n	8007000 <__ssputs_r+0x58>
 8007048:	462a      	mov	r2, r5
 800704a:	f000 ff71 	bl	8007f30 <_realloc_r>
 800704e:	4606      	mov	r6, r0
 8007050:	2800      	cmp	r0, #0
 8007052:	d1e1      	bne.n	8007018 <__ssputs_r+0x70>
 8007054:	6921      	ldr	r1, [r4, #16]
 8007056:	4650      	mov	r0, sl
 8007058:	f7ff fec6 	bl	8006de8 <_free_r>
 800705c:	e7c7      	b.n	8006fee <__ssputs_r+0x46>
	...

08007060 <_svfiprintf_r>:
 8007060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007064:	4698      	mov	r8, r3
 8007066:	898b      	ldrh	r3, [r1, #12]
 8007068:	061b      	lsls	r3, r3, #24
 800706a:	b09d      	sub	sp, #116	; 0x74
 800706c:	4607      	mov	r7, r0
 800706e:	460d      	mov	r5, r1
 8007070:	4614      	mov	r4, r2
 8007072:	d50e      	bpl.n	8007092 <_svfiprintf_r+0x32>
 8007074:	690b      	ldr	r3, [r1, #16]
 8007076:	b963      	cbnz	r3, 8007092 <_svfiprintf_r+0x32>
 8007078:	2140      	movs	r1, #64	; 0x40
 800707a:	f7ff ff21 	bl	8006ec0 <_malloc_r>
 800707e:	6028      	str	r0, [r5, #0]
 8007080:	6128      	str	r0, [r5, #16]
 8007082:	b920      	cbnz	r0, 800708e <_svfiprintf_r+0x2e>
 8007084:	230c      	movs	r3, #12
 8007086:	603b      	str	r3, [r7, #0]
 8007088:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800708c:	e0d1      	b.n	8007232 <_svfiprintf_r+0x1d2>
 800708e:	2340      	movs	r3, #64	; 0x40
 8007090:	616b      	str	r3, [r5, #20]
 8007092:	2300      	movs	r3, #0
 8007094:	9309      	str	r3, [sp, #36]	; 0x24
 8007096:	2320      	movs	r3, #32
 8007098:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800709c:	f8cd 800c 	str.w	r8, [sp, #12]
 80070a0:	2330      	movs	r3, #48	; 0x30
 80070a2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800724c <_svfiprintf_r+0x1ec>
 80070a6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80070aa:	f04f 0901 	mov.w	r9, #1
 80070ae:	4623      	mov	r3, r4
 80070b0:	469a      	mov	sl, r3
 80070b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80070b6:	b10a      	cbz	r2, 80070bc <_svfiprintf_r+0x5c>
 80070b8:	2a25      	cmp	r2, #37	; 0x25
 80070ba:	d1f9      	bne.n	80070b0 <_svfiprintf_r+0x50>
 80070bc:	ebba 0b04 	subs.w	fp, sl, r4
 80070c0:	d00b      	beq.n	80070da <_svfiprintf_r+0x7a>
 80070c2:	465b      	mov	r3, fp
 80070c4:	4622      	mov	r2, r4
 80070c6:	4629      	mov	r1, r5
 80070c8:	4638      	mov	r0, r7
 80070ca:	f7ff ff6d 	bl	8006fa8 <__ssputs_r>
 80070ce:	3001      	adds	r0, #1
 80070d0:	f000 80aa 	beq.w	8007228 <_svfiprintf_r+0x1c8>
 80070d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80070d6:	445a      	add	r2, fp
 80070d8:	9209      	str	r2, [sp, #36]	; 0x24
 80070da:	f89a 3000 	ldrb.w	r3, [sl]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	f000 80a2 	beq.w	8007228 <_svfiprintf_r+0x1c8>
 80070e4:	2300      	movs	r3, #0
 80070e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80070ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80070ee:	f10a 0a01 	add.w	sl, sl, #1
 80070f2:	9304      	str	r3, [sp, #16]
 80070f4:	9307      	str	r3, [sp, #28]
 80070f6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80070fa:	931a      	str	r3, [sp, #104]	; 0x68
 80070fc:	4654      	mov	r4, sl
 80070fe:	2205      	movs	r2, #5
 8007100:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007104:	4851      	ldr	r0, [pc, #324]	; (800724c <_svfiprintf_r+0x1ec>)
 8007106:	f7f9 f883 	bl	8000210 <memchr>
 800710a:	9a04      	ldr	r2, [sp, #16]
 800710c:	b9d8      	cbnz	r0, 8007146 <_svfiprintf_r+0xe6>
 800710e:	06d0      	lsls	r0, r2, #27
 8007110:	bf44      	itt	mi
 8007112:	2320      	movmi	r3, #32
 8007114:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007118:	0711      	lsls	r1, r2, #28
 800711a:	bf44      	itt	mi
 800711c:	232b      	movmi	r3, #43	; 0x2b
 800711e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007122:	f89a 3000 	ldrb.w	r3, [sl]
 8007126:	2b2a      	cmp	r3, #42	; 0x2a
 8007128:	d015      	beq.n	8007156 <_svfiprintf_r+0xf6>
 800712a:	9a07      	ldr	r2, [sp, #28]
 800712c:	4654      	mov	r4, sl
 800712e:	2000      	movs	r0, #0
 8007130:	f04f 0c0a 	mov.w	ip, #10
 8007134:	4621      	mov	r1, r4
 8007136:	f811 3b01 	ldrb.w	r3, [r1], #1
 800713a:	3b30      	subs	r3, #48	; 0x30
 800713c:	2b09      	cmp	r3, #9
 800713e:	d94e      	bls.n	80071de <_svfiprintf_r+0x17e>
 8007140:	b1b0      	cbz	r0, 8007170 <_svfiprintf_r+0x110>
 8007142:	9207      	str	r2, [sp, #28]
 8007144:	e014      	b.n	8007170 <_svfiprintf_r+0x110>
 8007146:	eba0 0308 	sub.w	r3, r0, r8
 800714a:	fa09 f303 	lsl.w	r3, r9, r3
 800714e:	4313      	orrs	r3, r2
 8007150:	9304      	str	r3, [sp, #16]
 8007152:	46a2      	mov	sl, r4
 8007154:	e7d2      	b.n	80070fc <_svfiprintf_r+0x9c>
 8007156:	9b03      	ldr	r3, [sp, #12]
 8007158:	1d19      	adds	r1, r3, #4
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	9103      	str	r1, [sp, #12]
 800715e:	2b00      	cmp	r3, #0
 8007160:	bfbb      	ittet	lt
 8007162:	425b      	neglt	r3, r3
 8007164:	f042 0202 	orrlt.w	r2, r2, #2
 8007168:	9307      	strge	r3, [sp, #28]
 800716a:	9307      	strlt	r3, [sp, #28]
 800716c:	bfb8      	it	lt
 800716e:	9204      	strlt	r2, [sp, #16]
 8007170:	7823      	ldrb	r3, [r4, #0]
 8007172:	2b2e      	cmp	r3, #46	; 0x2e
 8007174:	d10c      	bne.n	8007190 <_svfiprintf_r+0x130>
 8007176:	7863      	ldrb	r3, [r4, #1]
 8007178:	2b2a      	cmp	r3, #42	; 0x2a
 800717a:	d135      	bne.n	80071e8 <_svfiprintf_r+0x188>
 800717c:	9b03      	ldr	r3, [sp, #12]
 800717e:	1d1a      	adds	r2, r3, #4
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	9203      	str	r2, [sp, #12]
 8007184:	2b00      	cmp	r3, #0
 8007186:	bfb8      	it	lt
 8007188:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800718c:	3402      	adds	r4, #2
 800718e:	9305      	str	r3, [sp, #20]
 8007190:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800725c <_svfiprintf_r+0x1fc>
 8007194:	7821      	ldrb	r1, [r4, #0]
 8007196:	2203      	movs	r2, #3
 8007198:	4650      	mov	r0, sl
 800719a:	f7f9 f839 	bl	8000210 <memchr>
 800719e:	b140      	cbz	r0, 80071b2 <_svfiprintf_r+0x152>
 80071a0:	2340      	movs	r3, #64	; 0x40
 80071a2:	eba0 000a 	sub.w	r0, r0, sl
 80071a6:	fa03 f000 	lsl.w	r0, r3, r0
 80071aa:	9b04      	ldr	r3, [sp, #16]
 80071ac:	4303      	orrs	r3, r0
 80071ae:	3401      	adds	r4, #1
 80071b0:	9304      	str	r3, [sp, #16]
 80071b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071b6:	4826      	ldr	r0, [pc, #152]	; (8007250 <_svfiprintf_r+0x1f0>)
 80071b8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80071bc:	2206      	movs	r2, #6
 80071be:	f7f9 f827 	bl	8000210 <memchr>
 80071c2:	2800      	cmp	r0, #0
 80071c4:	d038      	beq.n	8007238 <_svfiprintf_r+0x1d8>
 80071c6:	4b23      	ldr	r3, [pc, #140]	; (8007254 <_svfiprintf_r+0x1f4>)
 80071c8:	bb1b      	cbnz	r3, 8007212 <_svfiprintf_r+0x1b2>
 80071ca:	9b03      	ldr	r3, [sp, #12]
 80071cc:	3307      	adds	r3, #7
 80071ce:	f023 0307 	bic.w	r3, r3, #7
 80071d2:	3308      	adds	r3, #8
 80071d4:	9303      	str	r3, [sp, #12]
 80071d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071d8:	4433      	add	r3, r6
 80071da:	9309      	str	r3, [sp, #36]	; 0x24
 80071dc:	e767      	b.n	80070ae <_svfiprintf_r+0x4e>
 80071de:	fb0c 3202 	mla	r2, ip, r2, r3
 80071e2:	460c      	mov	r4, r1
 80071e4:	2001      	movs	r0, #1
 80071e6:	e7a5      	b.n	8007134 <_svfiprintf_r+0xd4>
 80071e8:	2300      	movs	r3, #0
 80071ea:	3401      	adds	r4, #1
 80071ec:	9305      	str	r3, [sp, #20]
 80071ee:	4619      	mov	r1, r3
 80071f0:	f04f 0c0a 	mov.w	ip, #10
 80071f4:	4620      	mov	r0, r4
 80071f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80071fa:	3a30      	subs	r2, #48	; 0x30
 80071fc:	2a09      	cmp	r2, #9
 80071fe:	d903      	bls.n	8007208 <_svfiprintf_r+0x1a8>
 8007200:	2b00      	cmp	r3, #0
 8007202:	d0c5      	beq.n	8007190 <_svfiprintf_r+0x130>
 8007204:	9105      	str	r1, [sp, #20]
 8007206:	e7c3      	b.n	8007190 <_svfiprintf_r+0x130>
 8007208:	fb0c 2101 	mla	r1, ip, r1, r2
 800720c:	4604      	mov	r4, r0
 800720e:	2301      	movs	r3, #1
 8007210:	e7f0      	b.n	80071f4 <_svfiprintf_r+0x194>
 8007212:	ab03      	add	r3, sp, #12
 8007214:	9300      	str	r3, [sp, #0]
 8007216:	462a      	mov	r2, r5
 8007218:	4b0f      	ldr	r3, [pc, #60]	; (8007258 <_svfiprintf_r+0x1f8>)
 800721a:	a904      	add	r1, sp, #16
 800721c:	4638      	mov	r0, r7
 800721e:	f7fc f98f 	bl	8003540 <_printf_float>
 8007222:	1c42      	adds	r2, r0, #1
 8007224:	4606      	mov	r6, r0
 8007226:	d1d6      	bne.n	80071d6 <_svfiprintf_r+0x176>
 8007228:	89ab      	ldrh	r3, [r5, #12]
 800722a:	065b      	lsls	r3, r3, #25
 800722c:	f53f af2c 	bmi.w	8007088 <_svfiprintf_r+0x28>
 8007230:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007232:	b01d      	add	sp, #116	; 0x74
 8007234:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007238:	ab03      	add	r3, sp, #12
 800723a:	9300      	str	r3, [sp, #0]
 800723c:	462a      	mov	r2, r5
 800723e:	4b06      	ldr	r3, [pc, #24]	; (8007258 <_svfiprintf_r+0x1f8>)
 8007240:	a904      	add	r1, sp, #16
 8007242:	4638      	mov	r0, r7
 8007244:	f7fc fc20 	bl	8003a88 <_printf_i>
 8007248:	e7eb      	b.n	8007222 <_svfiprintf_r+0x1c2>
 800724a:	bf00      	nop
 800724c:	08008e5c 	.word	0x08008e5c
 8007250:	08008e66 	.word	0x08008e66
 8007254:	08003541 	.word	0x08003541
 8007258:	08006fa9 	.word	0x08006fa9
 800725c:	08008e62 	.word	0x08008e62

08007260 <_sungetc_r>:
 8007260:	b538      	push	{r3, r4, r5, lr}
 8007262:	1c4b      	adds	r3, r1, #1
 8007264:	4614      	mov	r4, r2
 8007266:	d103      	bne.n	8007270 <_sungetc_r+0x10>
 8007268:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800726c:	4628      	mov	r0, r5
 800726e:	bd38      	pop	{r3, r4, r5, pc}
 8007270:	8993      	ldrh	r3, [r2, #12]
 8007272:	f023 0320 	bic.w	r3, r3, #32
 8007276:	8193      	strh	r3, [r2, #12]
 8007278:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800727a:	6852      	ldr	r2, [r2, #4]
 800727c:	b2cd      	uxtb	r5, r1
 800727e:	b18b      	cbz	r3, 80072a4 <_sungetc_r+0x44>
 8007280:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007282:	4293      	cmp	r3, r2
 8007284:	dd08      	ble.n	8007298 <_sungetc_r+0x38>
 8007286:	6823      	ldr	r3, [r4, #0]
 8007288:	1e5a      	subs	r2, r3, #1
 800728a:	6022      	str	r2, [r4, #0]
 800728c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8007290:	6863      	ldr	r3, [r4, #4]
 8007292:	3301      	adds	r3, #1
 8007294:	6063      	str	r3, [r4, #4]
 8007296:	e7e9      	b.n	800726c <_sungetc_r+0xc>
 8007298:	4621      	mov	r1, r4
 800729a:	f000 fbf1 	bl	8007a80 <__submore>
 800729e:	2800      	cmp	r0, #0
 80072a0:	d0f1      	beq.n	8007286 <_sungetc_r+0x26>
 80072a2:	e7e1      	b.n	8007268 <_sungetc_r+0x8>
 80072a4:	6921      	ldr	r1, [r4, #16]
 80072a6:	6823      	ldr	r3, [r4, #0]
 80072a8:	b151      	cbz	r1, 80072c0 <_sungetc_r+0x60>
 80072aa:	4299      	cmp	r1, r3
 80072ac:	d208      	bcs.n	80072c0 <_sungetc_r+0x60>
 80072ae:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80072b2:	42a9      	cmp	r1, r5
 80072b4:	d104      	bne.n	80072c0 <_sungetc_r+0x60>
 80072b6:	3b01      	subs	r3, #1
 80072b8:	3201      	adds	r2, #1
 80072ba:	6023      	str	r3, [r4, #0]
 80072bc:	6062      	str	r2, [r4, #4]
 80072be:	e7d5      	b.n	800726c <_sungetc_r+0xc>
 80072c0:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80072c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80072c8:	6363      	str	r3, [r4, #52]	; 0x34
 80072ca:	2303      	movs	r3, #3
 80072cc:	63a3      	str	r3, [r4, #56]	; 0x38
 80072ce:	4623      	mov	r3, r4
 80072d0:	f803 5f46 	strb.w	r5, [r3, #70]!
 80072d4:	6023      	str	r3, [r4, #0]
 80072d6:	2301      	movs	r3, #1
 80072d8:	e7dc      	b.n	8007294 <_sungetc_r+0x34>

080072da <__ssrefill_r>:
 80072da:	b510      	push	{r4, lr}
 80072dc:	460c      	mov	r4, r1
 80072de:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80072e0:	b169      	cbz	r1, 80072fe <__ssrefill_r+0x24>
 80072e2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80072e6:	4299      	cmp	r1, r3
 80072e8:	d001      	beq.n	80072ee <__ssrefill_r+0x14>
 80072ea:	f7ff fd7d 	bl	8006de8 <_free_r>
 80072ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80072f0:	6063      	str	r3, [r4, #4]
 80072f2:	2000      	movs	r0, #0
 80072f4:	6360      	str	r0, [r4, #52]	; 0x34
 80072f6:	b113      	cbz	r3, 80072fe <__ssrefill_r+0x24>
 80072f8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80072fa:	6023      	str	r3, [r4, #0]
 80072fc:	bd10      	pop	{r4, pc}
 80072fe:	6923      	ldr	r3, [r4, #16]
 8007300:	6023      	str	r3, [r4, #0]
 8007302:	2300      	movs	r3, #0
 8007304:	6063      	str	r3, [r4, #4]
 8007306:	89a3      	ldrh	r3, [r4, #12]
 8007308:	f043 0320 	orr.w	r3, r3, #32
 800730c:	81a3      	strh	r3, [r4, #12]
 800730e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007312:	e7f3      	b.n	80072fc <__ssrefill_r+0x22>

08007314 <__ssvfiscanf_r>:
 8007314:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007318:	460c      	mov	r4, r1
 800731a:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800731e:	2100      	movs	r1, #0
 8007320:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8007324:	49a6      	ldr	r1, [pc, #664]	; (80075c0 <__ssvfiscanf_r+0x2ac>)
 8007326:	91a0      	str	r1, [sp, #640]	; 0x280
 8007328:	f10d 0804 	add.w	r8, sp, #4
 800732c:	49a5      	ldr	r1, [pc, #660]	; (80075c4 <__ssvfiscanf_r+0x2b0>)
 800732e:	4fa6      	ldr	r7, [pc, #664]	; (80075c8 <__ssvfiscanf_r+0x2b4>)
 8007330:	f8df 9298 	ldr.w	r9, [pc, #664]	; 80075cc <__ssvfiscanf_r+0x2b8>
 8007334:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8007338:	4606      	mov	r6, r0
 800733a:	91a1      	str	r1, [sp, #644]	; 0x284
 800733c:	9300      	str	r3, [sp, #0]
 800733e:	7813      	ldrb	r3, [r2, #0]
 8007340:	2b00      	cmp	r3, #0
 8007342:	f000 815a 	beq.w	80075fa <__ssvfiscanf_r+0x2e6>
 8007346:	5dd9      	ldrb	r1, [r3, r7]
 8007348:	f011 0108 	ands.w	r1, r1, #8
 800734c:	f102 0501 	add.w	r5, r2, #1
 8007350:	d019      	beq.n	8007386 <__ssvfiscanf_r+0x72>
 8007352:	6863      	ldr	r3, [r4, #4]
 8007354:	2b00      	cmp	r3, #0
 8007356:	dd0f      	ble.n	8007378 <__ssvfiscanf_r+0x64>
 8007358:	6823      	ldr	r3, [r4, #0]
 800735a:	781a      	ldrb	r2, [r3, #0]
 800735c:	5cba      	ldrb	r2, [r7, r2]
 800735e:	0712      	lsls	r2, r2, #28
 8007360:	d401      	bmi.n	8007366 <__ssvfiscanf_r+0x52>
 8007362:	462a      	mov	r2, r5
 8007364:	e7eb      	b.n	800733e <__ssvfiscanf_r+0x2a>
 8007366:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8007368:	3201      	adds	r2, #1
 800736a:	9245      	str	r2, [sp, #276]	; 0x114
 800736c:	6862      	ldr	r2, [r4, #4]
 800736e:	3301      	adds	r3, #1
 8007370:	3a01      	subs	r2, #1
 8007372:	6062      	str	r2, [r4, #4]
 8007374:	6023      	str	r3, [r4, #0]
 8007376:	e7ec      	b.n	8007352 <__ssvfiscanf_r+0x3e>
 8007378:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800737a:	4621      	mov	r1, r4
 800737c:	4630      	mov	r0, r6
 800737e:	4798      	blx	r3
 8007380:	2800      	cmp	r0, #0
 8007382:	d0e9      	beq.n	8007358 <__ssvfiscanf_r+0x44>
 8007384:	e7ed      	b.n	8007362 <__ssvfiscanf_r+0x4e>
 8007386:	2b25      	cmp	r3, #37	; 0x25
 8007388:	d012      	beq.n	80073b0 <__ssvfiscanf_r+0x9c>
 800738a:	469a      	mov	sl, r3
 800738c:	6863      	ldr	r3, [r4, #4]
 800738e:	2b00      	cmp	r3, #0
 8007390:	f340 8091 	ble.w	80074b6 <__ssvfiscanf_r+0x1a2>
 8007394:	6822      	ldr	r2, [r4, #0]
 8007396:	7813      	ldrb	r3, [r2, #0]
 8007398:	4553      	cmp	r3, sl
 800739a:	f040 812e 	bne.w	80075fa <__ssvfiscanf_r+0x2e6>
 800739e:	6863      	ldr	r3, [r4, #4]
 80073a0:	3b01      	subs	r3, #1
 80073a2:	6063      	str	r3, [r4, #4]
 80073a4:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80073a6:	3201      	adds	r2, #1
 80073a8:	3301      	adds	r3, #1
 80073aa:	6022      	str	r2, [r4, #0]
 80073ac:	9345      	str	r3, [sp, #276]	; 0x114
 80073ae:	e7d8      	b.n	8007362 <__ssvfiscanf_r+0x4e>
 80073b0:	9141      	str	r1, [sp, #260]	; 0x104
 80073b2:	9143      	str	r1, [sp, #268]	; 0x10c
 80073b4:	7853      	ldrb	r3, [r2, #1]
 80073b6:	2b2a      	cmp	r3, #42	; 0x2a
 80073b8:	bf02      	ittt	eq
 80073ba:	2310      	moveq	r3, #16
 80073bc:	1c95      	addeq	r5, r2, #2
 80073be:	9341      	streq	r3, [sp, #260]	; 0x104
 80073c0:	220a      	movs	r2, #10
 80073c2:	46aa      	mov	sl, r5
 80073c4:	f81a 1b01 	ldrb.w	r1, [sl], #1
 80073c8:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80073cc:	2b09      	cmp	r3, #9
 80073ce:	d91d      	bls.n	800740c <__ssvfiscanf_r+0xf8>
 80073d0:	487e      	ldr	r0, [pc, #504]	; (80075cc <__ssvfiscanf_r+0x2b8>)
 80073d2:	2203      	movs	r2, #3
 80073d4:	f7f8 ff1c 	bl	8000210 <memchr>
 80073d8:	b140      	cbz	r0, 80073ec <__ssvfiscanf_r+0xd8>
 80073da:	2301      	movs	r3, #1
 80073dc:	eba0 0009 	sub.w	r0, r0, r9
 80073e0:	fa03 f000 	lsl.w	r0, r3, r0
 80073e4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80073e6:	4318      	orrs	r0, r3
 80073e8:	9041      	str	r0, [sp, #260]	; 0x104
 80073ea:	4655      	mov	r5, sl
 80073ec:	f815 3b01 	ldrb.w	r3, [r5], #1
 80073f0:	2b78      	cmp	r3, #120	; 0x78
 80073f2:	d806      	bhi.n	8007402 <__ssvfiscanf_r+0xee>
 80073f4:	2b57      	cmp	r3, #87	; 0x57
 80073f6:	d810      	bhi.n	800741a <__ssvfiscanf_r+0x106>
 80073f8:	2b25      	cmp	r3, #37	; 0x25
 80073fa:	d0c6      	beq.n	800738a <__ssvfiscanf_r+0x76>
 80073fc:	d856      	bhi.n	80074ac <__ssvfiscanf_r+0x198>
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d064      	beq.n	80074cc <__ssvfiscanf_r+0x1b8>
 8007402:	2303      	movs	r3, #3
 8007404:	9347      	str	r3, [sp, #284]	; 0x11c
 8007406:	230a      	movs	r3, #10
 8007408:	9342      	str	r3, [sp, #264]	; 0x108
 800740a:	e071      	b.n	80074f0 <__ssvfiscanf_r+0x1dc>
 800740c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800740e:	fb02 1103 	mla	r1, r2, r3, r1
 8007412:	3930      	subs	r1, #48	; 0x30
 8007414:	9143      	str	r1, [sp, #268]	; 0x10c
 8007416:	4655      	mov	r5, sl
 8007418:	e7d3      	b.n	80073c2 <__ssvfiscanf_r+0xae>
 800741a:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800741e:	2a20      	cmp	r2, #32
 8007420:	d8ef      	bhi.n	8007402 <__ssvfiscanf_r+0xee>
 8007422:	a101      	add	r1, pc, #4	; (adr r1, 8007428 <__ssvfiscanf_r+0x114>)
 8007424:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007428:	080074db 	.word	0x080074db
 800742c:	08007403 	.word	0x08007403
 8007430:	08007403 	.word	0x08007403
 8007434:	08007539 	.word	0x08007539
 8007438:	08007403 	.word	0x08007403
 800743c:	08007403 	.word	0x08007403
 8007440:	08007403 	.word	0x08007403
 8007444:	08007403 	.word	0x08007403
 8007448:	08007403 	.word	0x08007403
 800744c:	08007403 	.word	0x08007403
 8007450:	08007403 	.word	0x08007403
 8007454:	0800754f 	.word	0x0800754f
 8007458:	08007525 	.word	0x08007525
 800745c:	080074b3 	.word	0x080074b3
 8007460:	080074b3 	.word	0x080074b3
 8007464:	080074b3 	.word	0x080074b3
 8007468:	08007403 	.word	0x08007403
 800746c:	08007529 	.word	0x08007529
 8007470:	08007403 	.word	0x08007403
 8007474:	08007403 	.word	0x08007403
 8007478:	08007403 	.word	0x08007403
 800747c:	08007403 	.word	0x08007403
 8007480:	0800755f 	.word	0x0800755f
 8007484:	08007531 	.word	0x08007531
 8007488:	080074d3 	.word	0x080074d3
 800748c:	08007403 	.word	0x08007403
 8007490:	08007403 	.word	0x08007403
 8007494:	0800755b 	.word	0x0800755b
 8007498:	08007403 	.word	0x08007403
 800749c:	08007525 	.word	0x08007525
 80074a0:	08007403 	.word	0x08007403
 80074a4:	08007403 	.word	0x08007403
 80074a8:	080074db 	.word	0x080074db
 80074ac:	3b45      	subs	r3, #69	; 0x45
 80074ae:	2b02      	cmp	r3, #2
 80074b0:	d8a7      	bhi.n	8007402 <__ssvfiscanf_r+0xee>
 80074b2:	2305      	movs	r3, #5
 80074b4:	e01b      	b.n	80074ee <__ssvfiscanf_r+0x1da>
 80074b6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80074b8:	4621      	mov	r1, r4
 80074ba:	4630      	mov	r0, r6
 80074bc:	4798      	blx	r3
 80074be:	2800      	cmp	r0, #0
 80074c0:	f43f af68 	beq.w	8007394 <__ssvfiscanf_r+0x80>
 80074c4:	9844      	ldr	r0, [sp, #272]	; 0x110
 80074c6:	2800      	cmp	r0, #0
 80074c8:	f040 808d 	bne.w	80075e6 <__ssvfiscanf_r+0x2d2>
 80074cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80074d0:	e08f      	b.n	80075f2 <__ssvfiscanf_r+0x2de>
 80074d2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80074d4:	f042 0220 	orr.w	r2, r2, #32
 80074d8:	9241      	str	r2, [sp, #260]	; 0x104
 80074da:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80074dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80074e0:	9241      	str	r2, [sp, #260]	; 0x104
 80074e2:	2210      	movs	r2, #16
 80074e4:	2b6f      	cmp	r3, #111	; 0x6f
 80074e6:	9242      	str	r2, [sp, #264]	; 0x108
 80074e8:	bf34      	ite	cc
 80074ea:	2303      	movcc	r3, #3
 80074ec:	2304      	movcs	r3, #4
 80074ee:	9347      	str	r3, [sp, #284]	; 0x11c
 80074f0:	6863      	ldr	r3, [r4, #4]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	dd42      	ble.n	800757c <__ssvfiscanf_r+0x268>
 80074f6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80074f8:	0659      	lsls	r1, r3, #25
 80074fa:	d404      	bmi.n	8007506 <__ssvfiscanf_r+0x1f2>
 80074fc:	6823      	ldr	r3, [r4, #0]
 80074fe:	781a      	ldrb	r2, [r3, #0]
 8007500:	5cba      	ldrb	r2, [r7, r2]
 8007502:	0712      	lsls	r2, r2, #28
 8007504:	d441      	bmi.n	800758a <__ssvfiscanf_r+0x276>
 8007506:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8007508:	2b02      	cmp	r3, #2
 800750a:	dc50      	bgt.n	80075ae <__ssvfiscanf_r+0x29a>
 800750c:	466b      	mov	r3, sp
 800750e:	4622      	mov	r2, r4
 8007510:	a941      	add	r1, sp, #260	; 0x104
 8007512:	4630      	mov	r0, r6
 8007514:	f000 f876 	bl	8007604 <_scanf_chars>
 8007518:	2801      	cmp	r0, #1
 800751a:	d06e      	beq.n	80075fa <__ssvfiscanf_r+0x2e6>
 800751c:	2802      	cmp	r0, #2
 800751e:	f47f af20 	bne.w	8007362 <__ssvfiscanf_r+0x4e>
 8007522:	e7cf      	b.n	80074c4 <__ssvfiscanf_r+0x1b0>
 8007524:	220a      	movs	r2, #10
 8007526:	e7dd      	b.n	80074e4 <__ssvfiscanf_r+0x1d0>
 8007528:	2300      	movs	r3, #0
 800752a:	9342      	str	r3, [sp, #264]	; 0x108
 800752c:	2303      	movs	r3, #3
 800752e:	e7de      	b.n	80074ee <__ssvfiscanf_r+0x1da>
 8007530:	2308      	movs	r3, #8
 8007532:	9342      	str	r3, [sp, #264]	; 0x108
 8007534:	2304      	movs	r3, #4
 8007536:	e7da      	b.n	80074ee <__ssvfiscanf_r+0x1da>
 8007538:	4629      	mov	r1, r5
 800753a:	4640      	mov	r0, r8
 800753c:	f000 f9e0 	bl	8007900 <__sccl>
 8007540:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8007542:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007546:	9341      	str	r3, [sp, #260]	; 0x104
 8007548:	4605      	mov	r5, r0
 800754a:	2301      	movs	r3, #1
 800754c:	e7cf      	b.n	80074ee <__ssvfiscanf_r+0x1da>
 800754e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8007550:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007554:	9341      	str	r3, [sp, #260]	; 0x104
 8007556:	2300      	movs	r3, #0
 8007558:	e7c9      	b.n	80074ee <__ssvfiscanf_r+0x1da>
 800755a:	2302      	movs	r3, #2
 800755c:	e7c7      	b.n	80074ee <__ssvfiscanf_r+0x1da>
 800755e:	9841      	ldr	r0, [sp, #260]	; 0x104
 8007560:	06c3      	lsls	r3, r0, #27
 8007562:	f53f aefe 	bmi.w	8007362 <__ssvfiscanf_r+0x4e>
 8007566:	9b00      	ldr	r3, [sp, #0]
 8007568:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800756a:	1d19      	adds	r1, r3, #4
 800756c:	9100      	str	r1, [sp, #0]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f010 0f01 	tst.w	r0, #1
 8007574:	bf14      	ite	ne
 8007576:	801a      	strhne	r2, [r3, #0]
 8007578:	601a      	streq	r2, [r3, #0]
 800757a:	e6f2      	b.n	8007362 <__ssvfiscanf_r+0x4e>
 800757c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800757e:	4621      	mov	r1, r4
 8007580:	4630      	mov	r0, r6
 8007582:	4798      	blx	r3
 8007584:	2800      	cmp	r0, #0
 8007586:	d0b6      	beq.n	80074f6 <__ssvfiscanf_r+0x1e2>
 8007588:	e79c      	b.n	80074c4 <__ssvfiscanf_r+0x1b0>
 800758a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800758c:	3201      	adds	r2, #1
 800758e:	9245      	str	r2, [sp, #276]	; 0x114
 8007590:	6862      	ldr	r2, [r4, #4]
 8007592:	3a01      	subs	r2, #1
 8007594:	2a00      	cmp	r2, #0
 8007596:	6062      	str	r2, [r4, #4]
 8007598:	dd02      	ble.n	80075a0 <__ssvfiscanf_r+0x28c>
 800759a:	3301      	adds	r3, #1
 800759c:	6023      	str	r3, [r4, #0]
 800759e:	e7ad      	b.n	80074fc <__ssvfiscanf_r+0x1e8>
 80075a0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80075a2:	4621      	mov	r1, r4
 80075a4:	4630      	mov	r0, r6
 80075a6:	4798      	blx	r3
 80075a8:	2800      	cmp	r0, #0
 80075aa:	d0a7      	beq.n	80074fc <__ssvfiscanf_r+0x1e8>
 80075ac:	e78a      	b.n	80074c4 <__ssvfiscanf_r+0x1b0>
 80075ae:	2b04      	cmp	r3, #4
 80075b0:	dc0e      	bgt.n	80075d0 <__ssvfiscanf_r+0x2bc>
 80075b2:	466b      	mov	r3, sp
 80075b4:	4622      	mov	r2, r4
 80075b6:	a941      	add	r1, sp, #260	; 0x104
 80075b8:	4630      	mov	r0, r6
 80075ba:	f000 f87d 	bl	80076b8 <_scanf_i>
 80075be:	e7ab      	b.n	8007518 <__ssvfiscanf_r+0x204>
 80075c0:	08007261 	.word	0x08007261
 80075c4:	080072db 	.word	0x080072db
 80075c8:	08008af9 	.word	0x08008af9
 80075cc:	08008e62 	.word	0x08008e62
 80075d0:	4b0b      	ldr	r3, [pc, #44]	; (8007600 <__ssvfiscanf_r+0x2ec>)
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	f43f aec5 	beq.w	8007362 <__ssvfiscanf_r+0x4e>
 80075d8:	466b      	mov	r3, sp
 80075da:	4622      	mov	r2, r4
 80075dc:	a941      	add	r1, sp, #260	; 0x104
 80075de:	4630      	mov	r0, r6
 80075e0:	f7fc fb78 	bl	8003cd4 <_scanf_float>
 80075e4:	e798      	b.n	8007518 <__ssvfiscanf_r+0x204>
 80075e6:	89a3      	ldrh	r3, [r4, #12]
 80075e8:	f013 0f40 	tst.w	r3, #64	; 0x40
 80075ec:	bf18      	it	ne
 80075ee:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80075f2:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 80075f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075fa:	9844      	ldr	r0, [sp, #272]	; 0x110
 80075fc:	e7f9      	b.n	80075f2 <__ssvfiscanf_r+0x2de>
 80075fe:	bf00      	nop
 8007600:	08003cd5 	.word	0x08003cd5

08007604 <_scanf_chars>:
 8007604:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007608:	4615      	mov	r5, r2
 800760a:	688a      	ldr	r2, [r1, #8]
 800760c:	4680      	mov	r8, r0
 800760e:	460c      	mov	r4, r1
 8007610:	b932      	cbnz	r2, 8007620 <_scanf_chars+0x1c>
 8007612:	698a      	ldr	r2, [r1, #24]
 8007614:	2a00      	cmp	r2, #0
 8007616:	bf0c      	ite	eq
 8007618:	2201      	moveq	r2, #1
 800761a:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 800761e:	608a      	str	r2, [r1, #8]
 8007620:	6822      	ldr	r2, [r4, #0]
 8007622:	f8df 9090 	ldr.w	r9, [pc, #144]	; 80076b4 <_scanf_chars+0xb0>
 8007626:	06d1      	lsls	r1, r2, #27
 8007628:	bf5f      	itttt	pl
 800762a:	681a      	ldrpl	r2, [r3, #0]
 800762c:	1d11      	addpl	r1, r2, #4
 800762e:	6019      	strpl	r1, [r3, #0]
 8007630:	6816      	ldrpl	r6, [r2, #0]
 8007632:	2700      	movs	r7, #0
 8007634:	69a0      	ldr	r0, [r4, #24]
 8007636:	b188      	cbz	r0, 800765c <_scanf_chars+0x58>
 8007638:	2801      	cmp	r0, #1
 800763a:	d107      	bne.n	800764c <_scanf_chars+0x48>
 800763c:	682a      	ldr	r2, [r5, #0]
 800763e:	7811      	ldrb	r1, [r2, #0]
 8007640:	6962      	ldr	r2, [r4, #20]
 8007642:	5c52      	ldrb	r2, [r2, r1]
 8007644:	b952      	cbnz	r2, 800765c <_scanf_chars+0x58>
 8007646:	2f00      	cmp	r7, #0
 8007648:	d031      	beq.n	80076ae <_scanf_chars+0xaa>
 800764a:	e022      	b.n	8007692 <_scanf_chars+0x8e>
 800764c:	2802      	cmp	r0, #2
 800764e:	d120      	bne.n	8007692 <_scanf_chars+0x8e>
 8007650:	682b      	ldr	r3, [r5, #0]
 8007652:	781b      	ldrb	r3, [r3, #0]
 8007654:	f813 3009 	ldrb.w	r3, [r3, r9]
 8007658:	071b      	lsls	r3, r3, #28
 800765a:	d41a      	bmi.n	8007692 <_scanf_chars+0x8e>
 800765c:	6823      	ldr	r3, [r4, #0]
 800765e:	06da      	lsls	r2, r3, #27
 8007660:	bf5e      	ittt	pl
 8007662:	682b      	ldrpl	r3, [r5, #0]
 8007664:	781b      	ldrbpl	r3, [r3, #0]
 8007666:	f806 3b01 	strbpl.w	r3, [r6], #1
 800766a:	682a      	ldr	r2, [r5, #0]
 800766c:	686b      	ldr	r3, [r5, #4]
 800766e:	3201      	adds	r2, #1
 8007670:	602a      	str	r2, [r5, #0]
 8007672:	68a2      	ldr	r2, [r4, #8]
 8007674:	3b01      	subs	r3, #1
 8007676:	3a01      	subs	r2, #1
 8007678:	606b      	str	r3, [r5, #4]
 800767a:	3701      	adds	r7, #1
 800767c:	60a2      	str	r2, [r4, #8]
 800767e:	b142      	cbz	r2, 8007692 <_scanf_chars+0x8e>
 8007680:	2b00      	cmp	r3, #0
 8007682:	dcd7      	bgt.n	8007634 <_scanf_chars+0x30>
 8007684:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007688:	4629      	mov	r1, r5
 800768a:	4640      	mov	r0, r8
 800768c:	4798      	blx	r3
 800768e:	2800      	cmp	r0, #0
 8007690:	d0d0      	beq.n	8007634 <_scanf_chars+0x30>
 8007692:	6823      	ldr	r3, [r4, #0]
 8007694:	f013 0310 	ands.w	r3, r3, #16
 8007698:	d105      	bne.n	80076a6 <_scanf_chars+0xa2>
 800769a:	68e2      	ldr	r2, [r4, #12]
 800769c:	3201      	adds	r2, #1
 800769e:	60e2      	str	r2, [r4, #12]
 80076a0:	69a2      	ldr	r2, [r4, #24]
 80076a2:	b102      	cbz	r2, 80076a6 <_scanf_chars+0xa2>
 80076a4:	7033      	strb	r3, [r6, #0]
 80076a6:	6923      	ldr	r3, [r4, #16]
 80076a8:	443b      	add	r3, r7
 80076aa:	6123      	str	r3, [r4, #16]
 80076ac:	2000      	movs	r0, #0
 80076ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80076b2:	bf00      	nop
 80076b4:	08008af9 	.word	0x08008af9

080076b8 <_scanf_i>:
 80076b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076bc:	4698      	mov	r8, r3
 80076be:	4b76      	ldr	r3, [pc, #472]	; (8007898 <_scanf_i+0x1e0>)
 80076c0:	460c      	mov	r4, r1
 80076c2:	4682      	mov	sl, r0
 80076c4:	4616      	mov	r6, r2
 80076c6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80076ca:	b087      	sub	sp, #28
 80076cc:	ab03      	add	r3, sp, #12
 80076ce:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80076d2:	4b72      	ldr	r3, [pc, #456]	; (800789c <_scanf_i+0x1e4>)
 80076d4:	69a1      	ldr	r1, [r4, #24]
 80076d6:	4a72      	ldr	r2, [pc, #456]	; (80078a0 <_scanf_i+0x1e8>)
 80076d8:	2903      	cmp	r1, #3
 80076da:	bf18      	it	ne
 80076dc:	461a      	movne	r2, r3
 80076de:	68a3      	ldr	r3, [r4, #8]
 80076e0:	9201      	str	r2, [sp, #4]
 80076e2:	1e5a      	subs	r2, r3, #1
 80076e4:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80076e8:	bf88      	it	hi
 80076ea:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80076ee:	4627      	mov	r7, r4
 80076f0:	bf82      	ittt	hi
 80076f2:	eb03 0905 	addhi.w	r9, r3, r5
 80076f6:	f240 135d 	movwhi	r3, #349	; 0x15d
 80076fa:	60a3      	strhi	r3, [r4, #8]
 80076fc:	f857 3b1c 	ldr.w	r3, [r7], #28
 8007700:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8007704:	bf98      	it	ls
 8007706:	f04f 0900 	movls.w	r9, #0
 800770a:	6023      	str	r3, [r4, #0]
 800770c:	463d      	mov	r5, r7
 800770e:	f04f 0b00 	mov.w	fp, #0
 8007712:	6831      	ldr	r1, [r6, #0]
 8007714:	ab03      	add	r3, sp, #12
 8007716:	7809      	ldrb	r1, [r1, #0]
 8007718:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800771c:	2202      	movs	r2, #2
 800771e:	f7f8 fd77 	bl	8000210 <memchr>
 8007722:	b328      	cbz	r0, 8007770 <_scanf_i+0xb8>
 8007724:	f1bb 0f01 	cmp.w	fp, #1
 8007728:	d159      	bne.n	80077de <_scanf_i+0x126>
 800772a:	6862      	ldr	r2, [r4, #4]
 800772c:	b92a      	cbnz	r2, 800773a <_scanf_i+0x82>
 800772e:	6822      	ldr	r2, [r4, #0]
 8007730:	2308      	movs	r3, #8
 8007732:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007736:	6063      	str	r3, [r4, #4]
 8007738:	6022      	str	r2, [r4, #0]
 800773a:	6822      	ldr	r2, [r4, #0]
 800773c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8007740:	6022      	str	r2, [r4, #0]
 8007742:	68a2      	ldr	r2, [r4, #8]
 8007744:	1e51      	subs	r1, r2, #1
 8007746:	60a1      	str	r1, [r4, #8]
 8007748:	b192      	cbz	r2, 8007770 <_scanf_i+0xb8>
 800774a:	6832      	ldr	r2, [r6, #0]
 800774c:	1c51      	adds	r1, r2, #1
 800774e:	6031      	str	r1, [r6, #0]
 8007750:	7812      	ldrb	r2, [r2, #0]
 8007752:	f805 2b01 	strb.w	r2, [r5], #1
 8007756:	6872      	ldr	r2, [r6, #4]
 8007758:	3a01      	subs	r2, #1
 800775a:	2a00      	cmp	r2, #0
 800775c:	6072      	str	r2, [r6, #4]
 800775e:	dc07      	bgt.n	8007770 <_scanf_i+0xb8>
 8007760:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8007764:	4631      	mov	r1, r6
 8007766:	4650      	mov	r0, sl
 8007768:	4790      	blx	r2
 800776a:	2800      	cmp	r0, #0
 800776c:	f040 8085 	bne.w	800787a <_scanf_i+0x1c2>
 8007770:	f10b 0b01 	add.w	fp, fp, #1
 8007774:	f1bb 0f03 	cmp.w	fp, #3
 8007778:	d1cb      	bne.n	8007712 <_scanf_i+0x5a>
 800777a:	6863      	ldr	r3, [r4, #4]
 800777c:	b90b      	cbnz	r3, 8007782 <_scanf_i+0xca>
 800777e:	230a      	movs	r3, #10
 8007780:	6063      	str	r3, [r4, #4]
 8007782:	6863      	ldr	r3, [r4, #4]
 8007784:	4947      	ldr	r1, [pc, #284]	; (80078a4 <_scanf_i+0x1ec>)
 8007786:	6960      	ldr	r0, [r4, #20]
 8007788:	1ac9      	subs	r1, r1, r3
 800778a:	f000 f8b9 	bl	8007900 <__sccl>
 800778e:	f04f 0b00 	mov.w	fp, #0
 8007792:	68a3      	ldr	r3, [r4, #8]
 8007794:	6822      	ldr	r2, [r4, #0]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d03d      	beq.n	8007816 <_scanf_i+0x15e>
 800779a:	6831      	ldr	r1, [r6, #0]
 800779c:	6960      	ldr	r0, [r4, #20]
 800779e:	f891 c000 	ldrb.w	ip, [r1]
 80077a2:	f810 000c 	ldrb.w	r0, [r0, ip]
 80077a6:	2800      	cmp	r0, #0
 80077a8:	d035      	beq.n	8007816 <_scanf_i+0x15e>
 80077aa:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80077ae:	d124      	bne.n	80077fa <_scanf_i+0x142>
 80077b0:	0510      	lsls	r0, r2, #20
 80077b2:	d522      	bpl.n	80077fa <_scanf_i+0x142>
 80077b4:	f10b 0b01 	add.w	fp, fp, #1
 80077b8:	f1b9 0f00 	cmp.w	r9, #0
 80077bc:	d003      	beq.n	80077c6 <_scanf_i+0x10e>
 80077be:	3301      	adds	r3, #1
 80077c0:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 80077c4:	60a3      	str	r3, [r4, #8]
 80077c6:	6873      	ldr	r3, [r6, #4]
 80077c8:	3b01      	subs	r3, #1
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	6073      	str	r3, [r6, #4]
 80077ce:	dd1b      	ble.n	8007808 <_scanf_i+0x150>
 80077d0:	6833      	ldr	r3, [r6, #0]
 80077d2:	3301      	adds	r3, #1
 80077d4:	6033      	str	r3, [r6, #0]
 80077d6:	68a3      	ldr	r3, [r4, #8]
 80077d8:	3b01      	subs	r3, #1
 80077da:	60a3      	str	r3, [r4, #8]
 80077dc:	e7d9      	b.n	8007792 <_scanf_i+0xda>
 80077de:	f1bb 0f02 	cmp.w	fp, #2
 80077e2:	d1ae      	bne.n	8007742 <_scanf_i+0x8a>
 80077e4:	6822      	ldr	r2, [r4, #0]
 80077e6:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80077ea:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80077ee:	d1bf      	bne.n	8007770 <_scanf_i+0xb8>
 80077f0:	2310      	movs	r3, #16
 80077f2:	6063      	str	r3, [r4, #4]
 80077f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80077f8:	e7a2      	b.n	8007740 <_scanf_i+0x88>
 80077fa:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80077fe:	6022      	str	r2, [r4, #0]
 8007800:	780b      	ldrb	r3, [r1, #0]
 8007802:	f805 3b01 	strb.w	r3, [r5], #1
 8007806:	e7de      	b.n	80077c6 <_scanf_i+0x10e>
 8007808:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800780c:	4631      	mov	r1, r6
 800780e:	4650      	mov	r0, sl
 8007810:	4798      	blx	r3
 8007812:	2800      	cmp	r0, #0
 8007814:	d0df      	beq.n	80077d6 <_scanf_i+0x11e>
 8007816:	6823      	ldr	r3, [r4, #0]
 8007818:	05db      	lsls	r3, r3, #23
 800781a:	d50d      	bpl.n	8007838 <_scanf_i+0x180>
 800781c:	42bd      	cmp	r5, r7
 800781e:	d909      	bls.n	8007834 <_scanf_i+0x17c>
 8007820:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8007824:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007828:	4632      	mov	r2, r6
 800782a:	4650      	mov	r0, sl
 800782c:	4798      	blx	r3
 800782e:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 8007832:	464d      	mov	r5, r9
 8007834:	42bd      	cmp	r5, r7
 8007836:	d02d      	beq.n	8007894 <_scanf_i+0x1dc>
 8007838:	6822      	ldr	r2, [r4, #0]
 800783a:	f012 0210 	ands.w	r2, r2, #16
 800783e:	d113      	bne.n	8007868 <_scanf_i+0x1b0>
 8007840:	702a      	strb	r2, [r5, #0]
 8007842:	6863      	ldr	r3, [r4, #4]
 8007844:	9e01      	ldr	r6, [sp, #4]
 8007846:	4639      	mov	r1, r7
 8007848:	4650      	mov	r0, sl
 800784a:	47b0      	blx	r6
 800784c:	6821      	ldr	r1, [r4, #0]
 800784e:	f8d8 3000 	ldr.w	r3, [r8]
 8007852:	f011 0f20 	tst.w	r1, #32
 8007856:	d013      	beq.n	8007880 <_scanf_i+0x1c8>
 8007858:	1d1a      	adds	r2, r3, #4
 800785a:	f8c8 2000 	str.w	r2, [r8]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	6018      	str	r0, [r3, #0]
 8007862:	68e3      	ldr	r3, [r4, #12]
 8007864:	3301      	adds	r3, #1
 8007866:	60e3      	str	r3, [r4, #12]
 8007868:	1bed      	subs	r5, r5, r7
 800786a:	44ab      	add	fp, r5
 800786c:	6925      	ldr	r5, [r4, #16]
 800786e:	445d      	add	r5, fp
 8007870:	6125      	str	r5, [r4, #16]
 8007872:	2000      	movs	r0, #0
 8007874:	b007      	add	sp, #28
 8007876:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800787a:	f04f 0b00 	mov.w	fp, #0
 800787e:	e7ca      	b.n	8007816 <_scanf_i+0x15e>
 8007880:	1d1a      	adds	r2, r3, #4
 8007882:	f8c8 2000 	str.w	r2, [r8]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f011 0f01 	tst.w	r1, #1
 800788c:	bf14      	ite	ne
 800788e:	8018      	strhne	r0, [r3, #0]
 8007890:	6018      	streq	r0, [r3, #0]
 8007892:	e7e6      	b.n	8007862 <_scanf_i+0x1aa>
 8007894:	2001      	movs	r0, #1
 8007896:	e7ed      	b.n	8007874 <_scanf_i+0x1bc>
 8007898:	08008a60 	.word	0x08008a60
 800789c:	08007a7d 	.word	0x08007a7d
 80078a0:	08004f9d 	.word	0x08004f9d
 80078a4:	08008e86 	.word	0x08008e86

080078a8 <_read_r>:
 80078a8:	b538      	push	{r3, r4, r5, lr}
 80078aa:	4d07      	ldr	r5, [pc, #28]	; (80078c8 <_read_r+0x20>)
 80078ac:	4604      	mov	r4, r0
 80078ae:	4608      	mov	r0, r1
 80078b0:	4611      	mov	r1, r2
 80078b2:	2200      	movs	r2, #0
 80078b4:	602a      	str	r2, [r5, #0]
 80078b6:	461a      	mov	r2, r3
 80078b8:	f7fa fb13 	bl	8001ee2 <_read>
 80078bc:	1c43      	adds	r3, r0, #1
 80078be:	d102      	bne.n	80078c6 <_read_r+0x1e>
 80078c0:	682b      	ldr	r3, [r5, #0]
 80078c2:	b103      	cbz	r3, 80078c6 <_read_r+0x1e>
 80078c4:	6023      	str	r3, [r4, #0]
 80078c6:	bd38      	pop	{r3, r4, r5, pc}
 80078c8:	200006f4 	.word	0x200006f4
 80078cc:	00000000 	.word	0x00000000

080078d0 <nan>:
 80078d0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80078d8 <nan+0x8>
 80078d4:	4770      	bx	lr
 80078d6:	bf00      	nop
 80078d8:	00000000 	.word	0x00000000
 80078dc:	7ff80000 	.word	0x7ff80000

080078e0 <_sbrk_r>:
 80078e0:	b538      	push	{r3, r4, r5, lr}
 80078e2:	4d06      	ldr	r5, [pc, #24]	; (80078fc <_sbrk_r+0x1c>)
 80078e4:	2300      	movs	r3, #0
 80078e6:	4604      	mov	r4, r0
 80078e8:	4608      	mov	r0, r1
 80078ea:	602b      	str	r3, [r5, #0]
 80078ec:	f7fa fb66 	bl	8001fbc <_sbrk>
 80078f0:	1c43      	adds	r3, r0, #1
 80078f2:	d102      	bne.n	80078fa <_sbrk_r+0x1a>
 80078f4:	682b      	ldr	r3, [r5, #0]
 80078f6:	b103      	cbz	r3, 80078fa <_sbrk_r+0x1a>
 80078f8:	6023      	str	r3, [r4, #0]
 80078fa:	bd38      	pop	{r3, r4, r5, pc}
 80078fc:	200006f4 	.word	0x200006f4

08007900 <__sccl>:
 8007900:	b570      	push	{r4, r5, r6, lr}
 8007902:	780b      	ldrb	r3, [r1, #0]
 8007904:	4604      	mov	r4, r0
 8007906:	2b5e      	cmp	r3, #94	; 0x5e
 8007908:	bf0b      	itete	eq
 800790a:	784b      	ldrbeq	r3, [r1, #1]
 800790c:	1c48      	addne	r0, r1, #1
 800790e:	1c88      	addeq	r0, r1, #2
 8007910:	2200      	movne	r2, #0
 8007912:	bf08      	it	eq
 8007914:	2201      	moveq	r2, #1
 8007916:	1e61      	subs	r1, r4, #1
 8007918:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800791c:	f801 2f01 	strb.w	r2, [r1, #1]!
 8007920:	42a9      	cmp	r1, r5
 8007922:	d1fb      	bne.n	800791c <__sccl+0x1c>
 8007924:	b90b      	cbnz	r3, 800792a <__sccl+0x2a>
 8007926:	3801      	subs	r0, #1
 8007928:	bd70      	pop	{r4, r5, r6, pc}
 800792a:	f082 0201 	eor.w	r2, r2, #1
 800792e:	54e2      	strb	r2, [r4, r3]
 8007930:	4605      	mov	r5, r0
 8007932:	4628      	mov	r0, r5
 8007934:	f810 1b01 	ldrb.w	r1, [r0], #1
 8007938:	292d      	cmp	r1, #45	; 0x2d
 800793a:	d006      	beq.n	800794a <__sccl+0x4a>
 800793c:	295d      	cmp	r1, #93	; 0x5d
 800793e:	d0f3      	beq.n	8007928 <__sccl+0x28>
 8007940:	b909      	cbnz	r1, 8007946 <__sccl+0x46>
 8007942:	4628      	mov	r0, r5
 8007944:	e7f0      	b.n	8007928 <__sccl+0x28>
 8007946:	460b      	mov	r3, r1
 8007948:	e7f1      	b.n	800792e <__sccl+0x2e>
 800794a:	786e      	ldrb	r6, [r5, #1]
 800794c:	2e5d      	cmp	r6, #93	; 0x5d
 800794e:	d0fa      	beq.n	8007946 <__sccl+0x46>
 8007950:	42b3      	cmp	r3, r6
 8007952:	dcf8      	bgt.n	8007946 <__sccl+0x46>
 8007954:	3502      	adds	r5, #2
 8007956:	4619      	mov	r1, r3
 8007958:	3101      	adds	r1, #1
 800795a:	428e      	cmp	r6, r1
 800795c:	5462      	strb	r2, [r4, r1]
 800795e:	dcfb      	bgt.n	8007958 <__sccl+0x58>
 8007960:	1af1      	subs	r1, r6, r3
 8007962:	3901      	subs	r1, #1
 8007964:	1c58      	adds	r0, r3, #1
 8007966:	42b3      	cmp	r3, r6
 8007968:	bfa8      	it	ge
 800796a:	2100      	movge	r1, #0
 800796c:	1843      	adds	r3, r0, r1
 800796e:	e7e0      	b.n	8007932 <__sccl+0x32>

08007970 <strncmp>:
 8007970:	b510      	push	{r4, lr}
 8007972:	b17a      	cbz	r2, 8007994 <strncmp+0x24>
 8007974:	4603      	mov	r3, r0
 8007976:	3901      	subs	r1, #1
 8007978:	1884      	adds	r4, r0, r2
 800797a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800797e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8007982:	4290      	cmp	r0, r2
 8007984:	d101      	bne.n	800798a <strncmp+0x1a>
 8007986:	42a3      	cmp	r3, r4
 8007988:	d101      	bne.n	800798e <strncmp+0x1e>
 800798a:	1a80      	subs	r0, r0, r2
 800798c:	bd10      	pop	{r4, pc}
 800798e:	2800      	cmp	r0, #0
 8007990:	d1f3      	bne.n	800797a <strncmp+0xa>
 8007992:	e7fa      	b.n	800798a <strncmp+0x1a>
 8007994:	4610      	mov	r0, r2
 8007996:	e7f9      	b.n	800798c <strncmp+0x1c>

08007998 <_strtoul_l.constprop.0>:
 8007998:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800799c:	4f36      	ldr	r7, [pc, #216]	; (8007a78 <_strtoul_l.constprop.0+0xe0>)
 800799e:	4686      	mov	lr, r0
 80079a0:	460d      	mov	r5, r1
 80079a2:	4628      	mov	r0, r5
 80079a4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80079a8:	5de6      	ldrb	r6, [r4, r7]
 80079aa:	f016 0608 	ands.w	r6, r6, #8
 80079ae:	d1f8      	bne.n	80079a2 <_strtoul_l.constprop.0+0xa>
 80079b0:	2c2d      	cmp	r4, #45	; 0x2d
 80079b2:	d12f      	bne.n	8007a14 <_strtoul_l.constprop.0+0x7c>
 80079b4:	782c      	ldrb	r4, [r5, #0]
 80079b6:	2601      	movs	r6, #1
 80079b8:	1c85      	adds	r5, r0, #2
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d057      	beq.n	8007a6e <_strtoul_l.constprop.0+0xd6>
 80079be:	2b10      	cmp	r3, #16
 80079c0:	d109      	bne.n	80079d6 <_strtoul_l.constprop.0+0x3e>
 80079c2:	2c30      	cmp	r4, #48	; 0x30
 80079c4:	d107      	bne.n	80079d6 <_strtoul_l.constprop.0+0x3e>
 80079c6:	7828      	ldrb	r0, [r5, #0]
 80079c8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80079cc:	2858      	cmp	r0, #88	; 0x58
 80079ce:	d149      	bne.n	8007a64 <_strtoul_l.constprop.0+0xcc>
 80079d0:	786c      	ldrb	r4, [r5, #1]
 80079d2:	2310      	movs	r3, #16
 80079d4:	3502      	adds	r5, #2
 80079d6:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80079da:	2700      	movs	r7, #0
 80079dc:	fbb8 f8f3 	udiv	r8, r8, r3
 80079e0:	fb03 f908 	mul.w	r9, r3, r8
 80079e4:	ea6f 0909 	mvn.w	r9, r9
 80079e8:	4638      	mov	r0, r7
 80079ea:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80079ee:	f1bc 0f09 	cmp.w	ip, #9
 80079f2:	d814      	bhi.n	8007a1e <_strtoul_l.constprop.0+0x86>
 80079f4:	4664      	mov	r4, ip
 80079f6:	42a3      	cmp	r3, r4
 80079f8:	dd22      	ble.n	8007a40 <_strtoul_l.constprop.0+0xa8>
 80079fa:	2f00      	cmp	r7, #0
 80079fc:	db1d      	blt.n	8007a3a <_strtoul_l.constprop.0+0xa2>
 80079fe:	4580      	cmp	r8, r0
 8007a00:	d31b      	bcc.n	8007a3a <_strtoul_l.constprop.0+0xa2>
 8007a02:	d101      	bne.n	8007a08 <_strtoul_l.constprop.0+0x70>
 8007a04:	45a1      	cmp	r9, r4
 8007a06:	db18      	blt.n	8007a3a <_strtoul_l.constprop.0+0xa2>
 8007a08:	fb00 4003 	mla	r0, r0, r3, r4
 8007a0c:	2701      	movs	r7, #1
 8007a0e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007a12:	e7ea      	b.n	80079ea <_strtoul_l.constprop.0+0x52>
 8007a14:	2c2b      	cmp	r4, #43	; 0x2b
 8007a16:	bf04      	itt	eq
 8007a18:	782c      	ldrbeq	r4, [r5, #0]
 8007a1a:	1c85      	addeq	r5, r0, #2
 8007a1c:	e7cd      	b.n	80079ba <_strtoul_l.constprop.0+0x22>
 8007a1e:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8007a22:	f1bc 0f19 	cmp.w	ip, #25
 8007a26:	d801      	bhi.n	8007a2c <_strtoul_l.constprop.0+0x94>
 8007a28:	3c37      	subs	r4, #55	; 0x37
 8007a2a:	e7e4      	b.n	80079f6 <_strtoul_l.constprop.0+0x5e>
 8007a2c:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8007a30:	f1bc 0f19 	cmp.w	ip, #25
 8007a34:	d804      	bhi.n	8007a40 <_strtoul_l.constprop.0+0xa8>
 8007a36:	3c57      	subs	r4, #87	; 0x57
 8007a38:	e7dd      	b.n	80079f6 <_strtoul_l.constprop.0+0x5e>
 8007a3a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8007a3e:	e7e6      	b.n	8007a0e <_strtoul_l.constprop.0+0x76>
 8007a40:	2f00      	cmp	r7, #0
 8007a42:	da07      	bge.n	8007a54 <_strtoul_l.constprop.0+0xbc>
 8007a44:	2322      	movs	r3, #34	; 0x22
 8007a46:	f8ce 3000 	str.w	r3, [lr]
 8007a4a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007a4e:	b932      	cbnz	r2, 8007a5e <_strtoul_l.constprop.0+0xc6>
 8007a50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007a54:	b106      	cbz	r6, 8007a58 <_strtoul_l.constprop.0+0xc0>
 8007a56:	4240      	negs	r0, r0
 8007a58:	2a00      	cmp	r2, #0
 8007a5a:	d0f9      	beq.n	8007a50 <_strtoul_l.constprop.0+0xb8>
 8007a5c:	b107      	cbz	r7, 8007a60 <_strtoul_l.constprop.0+0xc8>
 8007a5e:	1e69      	subs	r1, r5, #1
 8007a60:	6011      	str	r1, [r2, #0]
 8007a62:	e7f5      	b.n	8007a50 <_strtoul_l.constprop.0+0xb8>
 8007a64:	2430      	movs	r4, #48	; 0x30
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d1b5      	bne.n	80079d6 <_strtoul_l.constprop.0+0x3e>
 8007a6a:	2308      	movs	r3, #8
 8007a6c:	e7b3      	b.n	80079d6 <_strtoul_l.constprop.0+0x3e>
 8007a6e:	2c30      	cmp	r4, #48	; 0x30
 8007a70:	d0a9      	beq.n	80079c6 <_strtoul_l.constprop.0+0x2e>
 8007a72:	230a      	movs	r3, #10
 8007a74:	e7af      	b.n	80079d6 <_strtoul_l.constprop.0+0x3e>
 8007a76:	bf00      	nop
 8007a78:	08008af9 	.word	0x08008af9

08007a7c <_strtoul_r>:
 8007a7c:	f7ff bf8c 	b.w	8007998 <_strtoul_l.constprop.0>

08007a80 <__submore>:
 8007a80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a84:	460c      	mov	r4, r1
 8007a86:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8007a88:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007a8c:	4299      	cmp	r1, r3
 8007a8e:	d11d      	bne.n	8007acc <__submore+0x4c>
 8007a90:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007a94:	f7ff fa14 	bl	8006ec0 <_malloc_r>
 8007a98:	b918      	cbnz	r0, 8007aa2 <__submore+0x22>
 8007a9a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007a9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007aa2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007aa6:	63a3      	str	r3, [r4, #56]	; 0x38
 8007aa8:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8007aac:	6360      	str	r0, [r4, #52]	; 0x34
 8007aae:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8007ab2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8007ab6:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8007aba:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8007abe:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8007ac2:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8007ac6:	6020      	str	r0, [r4, #0]
 8007ac8:	2000      	movs	r0, #0
 8007aca:	e7e8      	b.n	8007a9e <__submore+0x1e>
 8007acc:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8007ace:	0077      	lsls	r7, r6, #1
 8007ad0:	463a      	mov	r2, r7
 8007ad2:	f000 fa2d 	bl	8007f30 <_realloc_r>
 8007ad6:	4605      	mov	r5, r0
 8007ad8:	2800      	cmp	r0, #0
 8007ada:	d0de      	beq.n	8007a9a <__submore+0x1a>
 8007adc:	eb00 0806 	add.w	r8, r0, r6
 8007ae0:	4601      	mov	r1, r0
 8007ae2:	4632      	mov	r2, r6
 8007ae4:	4640      	mov	r0, r8
 8007ae6:	f7fe fc99 	bl	800641c <memcpy>
 8007aea:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8007aee:	f8c4 8000 	str.w	r8, [r4]
 8007af2:	e7e9      	b.n	8007ac8 <__submore+0x48>

08007af4 <__ascii_wctomb>:
 8007af4:	b149      	cbz	r1, 8007b0a <__ascii_wctomb+0x16>
 8007af6:	2aff      	cmp	r2, #255	; 0xff
 8007af8:	bf85      	ittet	hi
 8007afa:	238a      	movhi	r3, #138	; 0x8a
 8007afc:	6003      	strhi	r3, [r0, #0]
 8007afe:	700a      	strbls	r2, [r1, #0]
 8007b00:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8007b04:	bf98      	it	ls
 8007b06:	2001      	movls	r0, #1
 8007b08:	4770      	bx	lr
 8007b0a:	4608      	mov	r0, r1
 8007b0c:	4770      	bx	lr
	...

08007b10 <__assert_func>:
 8007b10:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007b12:	4614      	mov	r4, r2
 8007b14:	461a      	mov	r2, r3
 8007b16:	4b09      	ldr	r3, [pc, #36]	; (8007b3c <__assert_func+0x2c>)
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	4605      	mov	r5, r0
 8007b1c:	68d8      	ldr	r0, [r3, #12]
 8007b1e:	b14c      	cbz	r4, 8007b34 <__assert_func+0x24>
 8007b20:	4b07      	ldr	r3, [pc, #28]	; (8007b40 <__assert_func+0x30>)
 8007b22:	9100      	str	r1, [sp, #0]
 8007b24:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007b28:	4906      	ldr	r1, [pc, #24]	; (8007b44 <__assert_func+0x34>)
 8007b2a:	462b      	mov	r3, r5
 8007b2c:	f000 f9a6 	bl	8007e7c <fiprintf>
 8007b30:	f000 fc46 	bl	80083c0 <abort>
 8007b34:	4b04      	ldr	r3, [pc, #16]	; (8007b48 <__assert_func+0x38>)
 8007b36:	461c      	mov	r4, r3
 8007b38:	e7f3      	b.n	8007b22 <__assert_func+0x12>
 8007b3a:	bf00      	nop
 8007b3c:	2000001c 	.word	0x2000001c
 8007b40:	08008e88 	.word	0x08008e88
 8007b44:	08008e95 	.word	0x08008e95
 8007b48:	08008ec3 	.word	0x08008ec3

08007b4c <__sflush_r>:
 8007b4c:	898a      	ldrh	r2, [r1, #12]
 8007b4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b52:	4605      	mov	r5, r0
 8007b54:	0710      	lsls	r0, r2, #28
 8007b56:	460c      	mov	r4, r1
 8007b58:	d458      	bmi.n	8007c0c <__sflush_r+0xc0>
 8007b5a:	684b      	ldr	r3, [r1, #4]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	dc05      	bgt.n	8007b6c <__sflush_r+0x20>
 8007b60:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	dc02      	bgt.n	8007b6c <__sflush_r+0x20>
 8007b66:	2000      	movs	r0, #0
 8007b68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b6c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007b6e:	2e00      	cmp	r6, #0
 8007b70:	d0f9      	beq.n	8007b66 <__sflush_r+0x1a>
 8007b72:	2300      	movs	r3, #0
 8007b74:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007b78:	682f      	ldr	r7, [r5, #0]
 8007b7a:	602b      	str	r3, [r5, #0]
 8007b7c:	d032      	beq.n	8007be4 <__sflush_r+0x98>
 8007b7e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007b80:	89a3      	ldrh	r3, [r4, #12]
 8007b82:	075a      	lsls	r2, r3, #29
 8007b84:	d505      	bpl.n	8007b92 <__sflush_r+0x46>
 8007b86:	6863      	ldr	r3, [r4, #4]
 8007b88:	1ac0      	subs	r0, r0, r3
 8007b8a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007b8c:	b10b      	cbz	r3, 8007b92 <__sflush_r+0x46>
 8007b8e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007b90:	1ac0      	subs	r0, r0, r3
 8007b92:	2300      	movs	r3, #0
 8007b94:	4602      	mov	r2, r0
 8007b96:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007b98:	6a21      	ldr	r1, [r4, #32]
 8007b9a:	4628      	mov	r0, r5
 8007b9c:	47b0      	blx	r6
 8007b9e:	1c43      	adds	r3, r0, #1
 8007ba0:	89a3      	ldrh	r3, [r4, #12]
 8007ba2:	d106      	bne.n	8007bb2 <__sflush_r+0x66>
 8007ba4:	6829      	ldr	r1, [r5, #0]
 8007ba6:	291d      	cmp	r1, #29
 8007ba8:	d82c      	bhi.n	8007c04 <__sflush_r+0xb8>
 8007baa:	4a2a      	ldr	r2, [pc, #168]	; (8007c54 <__sflush_r+0x108>)
 8007bac:	40ca      	lsrs	r2, r1
 8007bae:	07d6      	lsls	r6, r2, #31
 8007bb0:	d528      	bpl.n	8007c04 <__sflush_r+0xb8>
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	6062      	str	r2, [r4, #4]
 8007bb6:	04d9      	lsls	r1, r3, #19
 8007bb8:	6922      	ldr	r2, [r4, #16]
 8007bba:	6022      	str	r2, [r4, #0]
 8007bbc:	d504      	bpl.n	8007bc8 <__sflush_r+0x7c>
 8007bbe:	1c42      	adds	r2, r0, #1
 8007bc0:	d101      	bne.n	8007bc6 <__sflush_r+0x7a>
 8007bc2:	682b      	ldr	r3, [r5, #0]
 8007bc4:	b903      	cbnz	r3, 8007bc8 <__sflush_r+0x7c>
 8007bc6:	6560      	str	r0, [r4, #84]	; 0x54
 8007bc8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007bca:	602f      	str	r7, [r5, #0]
 8007bcc:	2900      	cmp	r1, #0
 8007bce:	d0ca      	beq.n	8007b66 <__sflush_r+0x1a>
 8007bd0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007bd4:	4299      	cmp	r1, r3
 8007bd6:	d002      	beq.n	8007bde <__sflush_r+0x92>
 8007bd8:	4628      	mov	r0, r5
 8007bda:	f7ff f905 	bl	8006de8 <_free_r>
 8007bde:	2000      	movs	r0, #0
 8007be0:	6360      	str	r0, [r4, #52]	; 0x34
 8007be2:	e7c1      	b.n	8007b68 <__sflush_r+0x1c>
 8007be4:	6a21      	ldr	r1, [r4, #32]
 8007be6:	2301      	movs	r3, #1
 8007be8:	4628      	mov	r0, r5
 8007bea:	47b0      	blx	r6
 8007bec:	1c41      	adds	r1, r0, #1
 8007bee:	d1c7      	bne.n	8007b80 <__sflush_r+0x34>
 8007bf0:	682b      	ldr	r3, [r5, #0]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d0c4      	beq.n	8007b80 <__sflush_r+0x34>
 8007bf6:	2b1d      	cmp	r3, #29
 8007bf8:	d001      	beq.n	8007bfe <__sflush_r+0xb2>
 8007bfa:	2b16      	cmp	r3, #22
 8007bfc:	d101      	bne.n	8007c02 <__sflush_r+0xb6>
 8007bfe:	602f      	str	r7, [r5, #0]
 8007c00:	e7b1      	b.n	8007b66 <__sflush_r+0x1a>
 8007c02:	89a3      	ldrh	r3, [r4, #12]
 8007c04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c08:	81a3      	strh	r3, [r4, #12]
 8007c0a:	e7ad      	b.n	8007b68 <__sflush_r+0x1c>
 8007c0c:	690f      	ldr	r7, [r1, #16]
 8007c0e:	2f00      	cmp	r7, #0
 8007c10:	d0a9      	beq.n	8007b66 <__sflush_r+0x1a>
 8007c12:	0793      	lsls	r3, r2, #30
 8007c14:	680e      	ldr	r6, [r1, #0]
 8007c16:	bf08      	it	eq
 8007c18:	694b      	ldreq	r3, [r1, #20]
 8007c1a:	600f      	str	r7, [r1, #0]
 8007c1c:	bf18      	it	ne
 8007c1e:	2300      	movne	r3, #0
 8007c20:	eba6 0807 	sub.w	r8, r6, r7
 8007c24:	608b      	str	r3, [r1, #8]
 8007c26:	f1b8 0f00 	cmp.w	r8, #0
 8007c2a:	dd9c      	ble.n	8007b66 <__sflush_r+0x1a>
 8007c2c:	6a21      	ldr	r1, [r4, #32]
 8007c2e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007c30:	4643      	mov	r3, r8
 8007c32:	463a      	mov	r2, r7
 8007c34:	4628      	mov	r0, r5
 8007c36:	47b0      	blx	r6
 8007c38:	2800      	cmp	r0, #0
 8007c3a:	dc06      	bgt.n	8007c4a <__sflush_r+0xfe>
 8007c3c:	89a3      	ldrh	r3, [r4, #12]
 8007c3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c42:	81a3      	strh	r3, [r4, #12]
 8007c44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007c48:	e78e      	b.n	8007b68 <__sflush_r+0x1c>
 8007c4a:	4407      	add	r7, r0
 8007c4c:	eba8 0800 	sub.w	r8, r8, r0
 8007c50:	e7e9      	b.n	8007c26 <__sflush_r+0xda>
 8007c52:	bf00      	nop
 8007c54:	20400001 	.word	0x20400001

08007c58 <_fflush_r>:
 8007c58:	b538      	push	{r3, r4, r5, lr}
 8007c5a:	690b      	ldr	r3, [r1, #16]
 8007c5c:	4605      	mov	r5, r0
 8007c5e:	460c      	mov	r4, r1
 8007c60:	b913      	cbnz	r3, 8007c68 <_fflush_r+0x10>
 8007c62:	2500      	movs	r5, #0
 8007c64:	4628      	mov	r0, r5
 8007c66:	bd38      	pop	{r3, r4, r5, pc}
 8007c68:	b118      	cbz	r0, 8007c72 <_fflush_r+0x1a>
 8007c6a:	6983      	ldr	r3, [r0, #24]
 8007c6c:	b90b      	cbnz	r3, 8007c72 <_fflush_r+0x1a>
 8007c6e:	f000 f887 	bl	8007d80 <__sinit>
 8007c72:	4b14      	ldr	r3, [pc, #80]	; (8007cc4 <_fflush_r+0x6c>)
 8007c74:	429c      	cmp	r4, r3
 8007c76:	d11b      	bne.n	8007cb0 <_fflush_r+0x58>
 8007c78:	686c      	ldr	r4, [r5, #4]
 8007c7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d0ef      	beq.n	8007c62 <_fflush_r+0xa>
 8007c82:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007c84:	07d0      	lsls	r0, r2, #31
 8007c86:	d404      	bmi.n	8007c92 <_fflush_r+0x3a>
 8007c88:	0599      	lsls	r1, r3, #22
 8007c8a:	d402      	bmi.n	8007c92 <_fflush_r+0x3a>
 8007c8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007c8e:	f000 f927 	bl	8007ee0 <__retarget_lock_acquire_recursive>
 8007c92:	4628      	mov	r0, r5
 8007c94:	4621      	mov	r1, r4
 8007c96:	f7ff ff59 	bl	8007b4c <__sflush_r>
 8007c9a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007c9c:	07da      	lsls	r2, r3, #31
 8007c9e:	4605      	mov	r5, r0
 8007ca0:	d4e0      	bmi.n	8007c64 <_fflush_r+0xc>
 8007ca2:	89a3      	ldrh	r3, [r4, #12]
 8007ca4:	059b      	lsls	r3, r3, #22
 8007ca6:	d4dd      	bmi.n	8007c64 <_fflush_r+0xc>
 8007ca8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007caa:	f000 f91a 	bl	8007ee2 <__retarget_lock_release_recursive>
 8007cae:	e7d9      	b.n	8007c64 <_fflush_r+0xc>
 8007cb0:	4b05      	ldr	r3, [pc, #20]	; (8007cc8 <_fflush_r+0x70>)
 8007cb2:	429c      	cmp	r4, r3
 8007cb4:	d101      	bne.n	8007cba <_fflush_r+0x62>
 8007cb6:	68ac      	ldr	r4, [r5, #8]
 8007cb8:	e7df      	b.n	8007c7a <_fflush_r+0x22>
 8007cba:	4b04      	ldr	r3, [pc, #16]	; (8007ccc <_fflush_r+0x74>)
 8007cbc:	429c      	cmp	r4, r3
 8007cbe:	bf08      	it	eq
 8007cc0:	68ec      	ldreq	r4, [r5, #12]
 8007cc2:	e7da      	b.n	8007c7a <_fflush_r+0x22>
 8007cc4:	08008ee4 	.word	0x08008ee4
 8007cc8:	08008f04 	.word	0x08008f04
 8007ccc:	08008ec4 	.word	0x08008ec4

08007cd0 <std>:
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	b510      	push	{r4, lr}
 8007cd4:	4604      	mov	r4, r0
 8007cd6:	e9c0 3300 	strd	r3, r3, [r0]
 8007cda:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007cde:	6083      	str	r3, [r0, #8]
 8007ce0:	8181      	strh	r1, [r0, #12]
 8007ce2:	6643      	str	r3, [r0, #100]	; 0x64
 8007ce4:	81c2      	strh	r2, [r0, #14]
 8007ce6:	6183      	str	r3, [r0, #24]
 8007ce8:	4619      	mov	r1, r3
 8007cea:	2208      	movs	r2, #8
 8007cec:	305c      	adds	r0, #92	; 0x5c
 8007cee:	f7fb fb7f 	bl	80033f0 <memset>
 8007cf2:	4b05      	ldr	r3, [pc, #20]	; (8007d08 <std+0x38>)
 8007cf4:	6263      	str	r3, [r4, #36]	; 0x24
 8007cf6:	4b05      	ldr	r3, [pc, #20]	; (8007d0c <std+0x3c>)
 8007cf8:	62a3      	str	r3, [r4, #40]	; 0x28
 8007cfa:	4b05      	ldr	r3, [pc, #20]	; (8007d10 <std+0x40>)
 8007cfc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007cfe:	4b05      	ldr	r3, [pc, #20]	; (8007d14 <std+0x44>)
 8007d00:	6224      	str	r4, [r4, #32]
 8007d02:	6323      	str	r3, [r4, #48]	; 0x30
 8007d04:	bd10      	pop	{r4, pc}
 8007d06:	bf00      	nop
 8007d08:	08004199 	.word	0x08004199
 8007d0c:	080041bf 	.word	0x080041bf
 8007d10:	080041f7 	.word	0x080041f7
 8007d14:	0800421b 	.word	0x0800421b

08007d18 <_cleanup_r>:
 8007d18:	4901      	ldr	r1, [pc, #4]	; (8007d20 <_cleanup_r+0x8>)
 8007d1a:	f000 b8c1 	b.w	8007ea0 <_fwalk_reent>
 8007d1e:	bf00      	nop
 8007d20:	08007c59 	.word	0x08007c59

08007d24 <__sfmoreglue>:
 8007d24:	b570      	push	{r4, r5, r6, lr}
 8007d26:	2268      	movs	r2, #104	; 0x68
 8007d28:	1e4d      	subs	r5, r1, #1
 8007d2a:	4355      	muls	r5, r2
 8007d2c:	460e      	mov	r6, r1
 8007d2e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007d32:	f7ff f8c5 	bl	8006ec0 <_malloc_r>
 8007d36:	4604      	mov	r4, r0
 8007d38:	b140      	cbz	r0, 8007d4c <__sfmoreglue+0x28>
 8007d3a:	2100      	movs	r1, #0
 8007d3c:	e9c0 1600 	strd	r1, r6, [r0]
 8007d40:	300c      	adds	r0, #12
 8007d42:	60a0      	str	r0, [r4, #8]
 8007d44:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007d48:	f7fb fb52 	bl	80033f0 <memset>
 8007d4c:	4620      	mov	r0, r4
 8007d4e:	bd70      	pop	{r4, r5, r6, pc}

08007d50 <__sfp_lock_acquire>:
 8007d50:	4801      	ldr	r0, [pc, #4]	; (8007d58 <__sfp_lock_acquire+0x8>)
 8007d52:	f000 b8c5 	b.w	8007ee0 <__retarget_lock_acquire_recursive>
 8007d56:	bf00      	nop
 8007d58:	200006f9 	.word	0x200006f9

08007d5c <__sfp_lock_release>:
 8007d5c:	4801      	ldr	r0, [pc, #4]	; (8007d64 <__sfp_lock_release+0x8>)
 8007d5e:	f000 b8c0 	b.w	8007ee2 <__retarget_lock_release_recursive>
 8007d62:	bf00      	nop
 8007d64:	200006f9 	.word	0x200006f9

08007d68 <__sinit_lock_acquire>:
 8007d68:	4801      	ldr	r0, [pc, #4]	; (8007d70 <__sinit_lock_acquire+0x8>)
 8007d6a:	f000 b8b9 	b.w	8007ee0 <__retarget_lock_acquire_recursive>
 8007d6e:	bf00      	nop
 8007d70:	200006fa 	.word	0x200006fa

08007d74 <__sinit_lock_release>:
 8007d74:	4801      	ldr	r0, [pc, #4]	; (8007d7c <__sinit_lock_release+0x8>)
 8007d76:	f000 b8b4 	b.w	8007ee2 <__retarget_lock_release_recursive>
 8007d7a:	bf00      	nop
 8007d7c:	200006fa 	.word	0x200006fa

08007d80 <__sinit>:
 8007d80:	b510      	push	{r4, lr}
 8007d82:	4604      	mov	r4, r0
 8007d84:	f7ff fff0 	bl	8007d68 <__sinit_lock_acquire>
 8007d88:	69a3      	ldr	r3, [r4, #24]
 8007d8a:	b11b      	cbz	r3, 8007d94 <__sinit+0x14>
 8007d8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d90:	f7ff bff0 	b.w	8007d74 <__sinit_lock_release>
 8007d94:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007d98:	6523      	str	r3, [r4, #80]	; 0x50
 8007d9a:	4b13      	ldr	r3, [pc, #76]	; (8007de8 <__sinit+0x68>)
 8007d9c:	4a13      	ldr	r2, [pc, #76]	; (8007dec <__sinit+0x6c>)
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	62a2      	str	r2, [r4, #40]	; 0x28
 8007da2:	42a3      	cmp	r3, r4
 8007da4:	bf04      	itt	eq
 8007da6:	2301      	moveq	r3, #1
 8007da8:	61a3      	streq	r3, [r4, #24]
 8007daa:	4620      	mov	r0, r4
 8007dac:	f000 f820 	bl	8007df0 <__sfp>
 8007db0:	6060      	str	r0, [r4, #4]
 8007db2:	4620      	mov	r0, r4
 8007db4:	f000 f81c 	bl	8007df0 <__sfp>
 8007db8:	60a0      	str	r0, [r4, #8]
 8007dba:	4620      	mov	r0, r4
 8007dbc:	f000 f818 	bl	8007df0 <__sfp>
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	60e0      	str	r0, [r4, #12]
 8007dc4:	2104      	movs	r1, #4
 8007dc6:	6860      	ldr	r0, [r4, #4]
 8007dc8:	f7ff ff82 	bl	8007cd0 <std>
 8007dcc:	68a0      	ldr	r0, [r4, #8]
 8007dce:	2201      	movs	r2, #1
 8007dd0:	2109      	movs	r1, #9
 8007dd2:	f7ff ff7d 	bl	8007cd0 <std>
 8007dd6:	68e0      	ldr	r0, [r4, #12]
 8007dd8:	2202      	movs	r2, #2
 8007dda:	2112      	movs	r1, #18
 8007ddc:	f7ff ff78 	bl	8007cd0 <std>
 8007de0:	2301      	movs	r3, #1
 8007de2:	61a3      	str	r3, [r4, #24]
 8007de4:	e7d2      	b.n	8007d8c <__sinit+0xc>
 8007de6:	bf00      	nop
 8007de8:	08008a6c 	.word	0x08008a6c
 8007dec:	08007d19 	.word	0x08007d19

08007df0 <__sfp>:
 8007df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007df2:	4607      	mov	r7, r0
 8007df4:	f7ff ffac 	bl	8007d50 <__sfp_lock_acquire>
 8007df8:	4b1e      	ldr	r3, [pc, #120]	; (8007e74 <__sfp+0x84>)
 8007dfa:	681e      	ldr	r6, [r3, #0]
 8007dfc:	69b3      	ldr	r3, [r6, #24]
 8007dfe:	b913      	cbnz	r3, 8007e06 <__sfp+0x16>
 8007e00:	4630      	mov	r0, r6
 8007e02:	f7ff ffbd 	bl	8007d80 <__sinit>
 8007e06:	3648      	adds	r6, #72	; 0x48
 8007e08:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007e0c:	3b01      	subs	r3, #1
 8007e0e:	d503      	bpl.n	8007e18 <__sfp+0x28>
 8007e10:	6833      	ldr	r3, [r6, #0]
 8007e12:	b30b      	cbz	r3, 8007e58 <__sfp+0x68>
 8007e14:	6836      	ldr	r6, [r6, #0]
 8007e16:	e7f7      	b.n	8007e08 <__sfp+0x18>
 8007e18:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007e1c:	b9d5      	cbnz	r5, 8007e54 <__sfp+0x64>
 8007e1e:	4b16      	ldr	r3, [pc, #88]	; (8007e78 <__sfp+0x88>)
 8007e20:	60e3      	str	r3, [r4, #12]
 8007e22:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007e26:	6665      	str	r5, [r4, #100]	; 0x64
 8007e28:	f000 f859 	bl	8007ede <__retarget_lock_init_recursive>
 8007e2c:	f7ff ff96 	bl	8007d5c <__sfp_lock_release>
 8007e30:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007e34:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007e38:	6025      	str	r5, [r4, #0]
 8007e3a:	61a5      	str	r5, [r4, #24]
 8007e3c:	2208      	movs	r2, #8
 8007e3e:	4629      	mov	r1, r5
 8007e40:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007e44:	f7fb fad4 	bl	80033f0 <memset>
 8007e48:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007e4c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007e50:	4620      	mov	r0, r4
 8007e52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e54:	3468      	adds	r4, #104	; 0x68
 8007e56:	e7d9      	b.n	8007e0c <__sfp+0x1c>
 8007e58:	2104      	movs	r1, #4
 8007e5a:	4638      	mov	r0, r7
 8007e5c:	f7ff ff62 	bl	8007d24 <__sfmoreglue>
 8007e60:	4604      	mov	r4, r0
 8007e62:	6030      	str	r0, [r6, #0]
 8007e64:	2800      	cmp	r0, #0
 8007e66:	d1d5      	bne.n	8007e14 <__sfp+0x24>
 8007e68:	f7ff ff78 	bl	8007d5c <__sfp_lock_release>
 8007e6c:	230c      	movs	r3, #12
 8007e6e:	603b      	str	r3, [r7, #0]
 8007e70:	e7ee      	b.n	8007e50 <__sfp+0x60>
 8007e72:	bf00      	nop
 8007e74:	08008a6c 	.word	0x08008a6c
 8007e78:	ffff0001 	.word	0xffff0001

08007e7c <fiprintf>:
 8007e7c:	b40e      	push	{r1, r2, r3}
 8007e7e:	b503      	push	{r0, r1, lr}
 8007e80:	4601      	mov	r1, r0
 8007e82:	ab03      	add	r3, sp, #12
 8007e84:	4805      	ldr	r0, [pc, #20]	; (8007e9c <fiprintf+0x20>)
 8007e86:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e8a:	6800      	ldr	r0, [r0, #0]
 8007e8c:	9301      	str	r3, [sp, #4]
 8007e8e:	f000 f8a7 	bl	8007fe0 <_vfiprintf_r>
 8007e92:	b002      	add	sp, #8
 8007e94:	f85d eb04 	ldr.w	lr, [sp], #4
 8007e98:	b003      	add	sp, #12
 8007e9a:	4770      	bx	lr
 8007e9c:	2000001c 	.word	0x2000001c

08007ea0 <_fwalk_reent>:
 8007ea0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ea4:	4606      	mov	r6, r0
 8007ea6:	4688      	mov	r8, r1
 8007ea8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007eac:	2700      	movs	r7, #0
 8007eae:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007eb2:	f1b9 0901 	subs.w	r9, r9, #1
 8007eb6:	d505      	bpl.n	8007ec4 <_fwalk_reent+0x24>
 8007eb8:	6824      	ldr	r4, [r4, #0]
 8007eba:	2c00      	cmp	r4, #0
 8007ebc:	d1f7      	bne.n	8007eae <_fwalk_reent+0xe>
 8007ebe:	4638      	mov	r0, r7
 8007ec0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ec4:	89ab      	ldrh	r3, [r5, #12]
 8007ec6:	2b01      	cmp	r3, #1
 8007ec8:	d907      	bls.n	8007eda <_fwalk_reent+0x3a>
 8007eca:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007ece:	3301      	adds	r3, #1
 8007ed0:	d003      	beq.n	8007eda <_fwalk_reent+0x3a>
 8007ed2:	4629      	mov	r1, r5
 8007ed4:	4630      	mov	r0, r6
 8007ed6:	47c0      	blx	r8
 8007ed8:	4307      	orrs	r7, r0
 8007eda:	3568      	adds	r5, #104	; 0x68
 8007edc:	e7e9      	b.n	8007eb2 <_fwalk_reent+0x12>

08007ede <__retarget_lock_init_recursive>:
 8007ede:	4770      	bx	lr

08007ee0 <__retarget_lock_acquire_recursive>:
 8007ee0:	4770      	bx	lr

08007ee2 <__retarget_lock_release_recursive>:
 8007ee2:	4770      	bx	lr

08007ee4 <memmove>:
 8007ee4:	4288      	cmp	r0, r1
 8007ee6:	b510      	push	{r4, lr}
 8007ee8:	eb01 0402 	add.w	r4, r1, r2
 8007eec:	d902      	bls.n	8007ef4 <memmove+0x10>
 8007eee:	4284      	cmp	r4, r0
 8007ef0:	4623      	mov	r3, r4
 8007ef2:	d807      	bhi.n	8007f04 <memmove+0x20>
 8007ef4:	1e43      	subs	r3, r0, #1
 8007ef6:	42a1      	cmp	r1, r4
 8007ef8:	d008      	beq.n	8007f0c <memmove+0x28>
 8007efa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007efe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007f02:	e7f8      	b.n	8007ef6 <memmove+0x12>
 8007f04:	4402      	add	r2, r0
 8007f06:	4601      	mov	r1, r0
 8007f08:	428a      	cmp	r2, r1
 8007f0a:	d100      	bne.n	8007f0e <memmove+0x2a>
 8007f0c:	bd10      	pop	{r4, pc}
 8007f0e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007f12:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007f16:	e7f7      	b.n	8007f08 <memmove+0x24>

08007f18 <__malloc_lock>:
 8007f18:	4801      	ldr	r0, [pc, #4]	; (8007f20 <__malloc_lock+0x8>)
 8007f1a:	f7ff bfe1 	b.w	8007ee0 <__retarget_lock_acquire_recursive>
 8007f1e:	bf00      	nop
 8007f20:	200006f8 	.word	0x200006f8

08007f24 <__malloc_unlock>:
 8007f24:	4801      	ldr	r0, [pc, #4]	; (8007f2c <__malloc_unlock+0x8>)
 8007f26:	f7ff bfdc 	b.w	8007ee2 <__retarget_lock_release_recursive>
 8007f2a:	bf00      	nop
 8007f2c:	200006f8 	.word	0x200006f8

08007f30 <_realloc_r>:
 8007f30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f34:	4680      	mov	r8, r0
 8007f36:	4614      	mov	r4, r2
 8007f38:	460e      	mov	r6, r1
 8007f3a:	b921      	cbnz	r1, 8007f46 <_realloc_r+0x16>
 8007f3c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007f40:	4611      	mov	r1, r2
 8007f42:	f7fe bfbd 	b.w	8006ec0 <_malloc_r>
 8007f46:	b92a      	cbnz	r2, 8007f54 <_realloc_r+0x24>
 8007f48:	f7fe ff4e 	bl	8006de8 <_free_r>
 8007f4c:	4625      	mov	r5, r4
 8007f4e:	4628      	mov	r0, r5
 8007f50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f54:	f000 faa0 	bl	8008498 <_malloc_usable_size_r>
 8007f58:	4284      	cmp	r4, r0
 8007f5a:	4607      	mov	r7, r0
 8007f5c:	d802      	bhi.n	8007f64 <_realloc_r+0x34>
 8007f5e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007f62:	d812      	bhi.n	8007f8a <_realloc_r+0x5a>
 8007f64:	4621      	mov	r1, r4
 8007f66:	4640      	mov	r0, r8
 8007f68:	f7fe ffaa 	bl	8006ec0 <_malloc_r>
 8007f6c:	4605      	mov	r5, r0
 8007f6e:	2800      	cmp	r0, #0
 8007f70:	d0ed      	beq.n	8007f4e <_realloc_r+0x1e>
 8007f72:	42bc      	cmp	r4, r7
 8007f74:	4622      	mov	r2, r4
 8007f76:	4631      	mov	r1, r6
 8007f78:	bf28      	it	cs
 8007f7a:	463a      	movcs	r2, r7
 8007f7c:	f7fe fa4e 	bl	800641c <memcpy>
 8007f80:	4631      	mov	r1, r6
 8007f82:	4640      	mov	r0, r8
 8007f84:	f7fe ff30 	bl	8006de8 <_free_r>
 8007f88:	e7e1      	b.n	8007f4e <_realloc_r+0x1e>
 8007f8a:	4635      	mov	r5, r6
 8007f8c:	e7df      	b.n	8007f4e <_realloc_r+0x1e>

08007f8e <__sfputc_r>:
 8007f8e:	6893      	ldr	r3, [r2, #8]
 8007f90:	3b01      	subs	r3, #1
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	b410      	push	{r4}
 8007f96:	6093      	str	r3, [r2, #8]
 8007f98:	da08      	bge.n	8007fac <__sfputc_r+0x1e>
 8007f9a:	6994      	ldr	r4, [r2, #24]
 8007f9c:	42a3      	cmp	r3, r4
 8007f9e:	db01      	blt.n	8007fa4 <__sfputc_r+0x16>
 8007fa0:	290a      	cmp	r1, #10
 8007fa2:	d103      	bne.n	8007fac <__sfputc_r+0x1e>
 8007fa4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007fa8:	f000 b94a 	b.w	8008240 <__swbuf_r>
 8007fac:	6813      	ldr	r3, [r2, #0]
 8007fae:	1c58      	adds	r0, r3, #1
 8007fb0:	6010      	str	r0, [r2, #0]
 8007fb2:	7019      	strb	r1, [r3, #0]
 8007fb4:	4608      	mov	r0, r1
 8007fb6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007fba:	4770      	bx	lr

08007fbc <__sfputs_r>:
 8007fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fbe:	4606      	mov	r6, r0
 8007fc0:	460f      	mov	r7, r1
 8007fc2:	4614      	mov	r4, r2
 8007fc4:	18d5      	adds	r5, r2, r3
 8007fc6:	42ac      	cmp	r4, r5
 8007fc8:	d101      	bne.n	8007fce <__sfputs_r+0x12>
 8007fca:	2000      	movs	r0, #0
 8007fcc:	e007      	b.n	8007fde <__sfputs_r+0x22>
 8007fce:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007fd2:	463a      	mov	r2, r7
 8007fd4:	4630      	mov	r0, r6
 8007fd6:	f7ff ffda 	bl	8007f8e <__sfputc_r>
 8007fda:	1c43      	adds	r3, r0, #1
 8007fdc:	d1f3      	bne.n	8007fc6 <__sfputs_r+0xa>
 8007fde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007fe0 <_vfiprintf_r>:
 8007fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fe4:	460d      	mov	r5, r1
 8007fe6:	b09d      	sub	sp, #116	; 0x74
 8007fe8:	4614      	mov	r4, r2
 8007fea:	4698      	mov	r8, r3
 8007fec:	4606      	mov	r6, r0
 8007fee:	b118      	cbz	r0, 8007ff8 <_vfiprintf_r+0x18>
 8007ff0:	6983      	ldr	r3, [r0, #24]
 8007ff2:	b90b      	cbnz	r3, 8007ff8 <_vfiprintf_r+0x18>
 8007ff4:	f7ff fec4 	bl	8007d80 <__sinit>
 8007ff8:	4b89      	ldr	r3, [pc, #548]	; (8008220 <_vfiprintf_r+0x240>)
 8007ffa:	429d      	cmp	r5, r3
 8007ffc:	d11b      	bne.n	8008036 <_vfiprintf_r+0x56>
 8007ffe:	6875      	ldr	r5, [r6, #4]
 8008000:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008002:	07d9      	lsls	r1, r3, #31
 8008004:	d405      	bmi.n	8008012 <_vfiprintf_r+0x32>
 8008006:	89ab      	ldrh	r3, [r5, #12]
 8008008:	059a      	lsls	r2, r3, #22
 800800a:	d402      	bmi.n	8008012 <_vfiprintf_r+0x32>
 800800c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800800e:	f7ff ff67 	bl	8007ee0 <__retarget_lock_acquire_recursive>
 8008012:	89ab      	ldrh	r3, [r5, #12]
 8008014:	071b      	lsls	r3, r3, #28
 8008016:	d501      	bpl.n	800801c <_vfiprintf_r+0x3c>
 8008018:	692b      	ldr	r3, [r5, #16]
 800801a:	b9eb      	cbnz	r3, 8008058 <_vfiprintf_r+0x78>
 800801c:	4629      	mov	r1, r5
 800801e:	4630      	mov	r0, r6
 8008020:	f000 f960 	bl	80082e4 <__swsetup_r>
 8008024:	b1c0      	cbz	r0, 8008058 <_vfiprintf_r+0x78>
 8008026:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008028:	07dc      	lsls	r4, r3, #31
 800802a:	d50e      	bpl.n	800804a <_vfiprintf_r+0x6a>
 800802c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008030:	b01d      	add	sp, #116	; 0x74
 8008032:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008036:	4b7b      	ldr	r3, [pc, #492]	; (8008224 <_vfiprintf_r+0x244>)
 8008038:	429d      	cmp	r5, r3
 800803a:	d101      	bne.n	8008040 <_vfiprintf_r+0x60>
 800803c:	68b5      	ldr	r5, [r6, #8]
 800803e:	e7df      	b.n	8008000 <_vfiprintf_r+0x20>
 8008040:	4b79      	ldr	r3, [pc, #484]	; (8008228 <_vfiprintf_r+0x248>)
 8008042:	429d      	cmp	r5, r3
 8008044:	bf08      	it	eq
 8008046:	68f5      	ldreq	r5, [r6, #12]
 8008048:	e7da      	b.n	8008000 <_vfiprintf_r+0x20>
 800804a:	89ab      	ldrh	r3, [r5, #12]
 800804c:	0598      	lsls	r0, r3, #22
 800804e:	d4ed      	bmi.n	800802c <_vfiprintf_r+0x4c>
 8008050:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008052:	f7ff ff46 	bl	8007ee2 <__retarget_lock_release_recursive>
 8008056:	e7e9      	b.n	800802c <_vfiprintf_r+0x4c>
 8008058:	2300      	movs	r3, #0
 800805a:	9309      	str	r3, [sp, #36]	; 0x24
 800805c:	2320      	movs	r3, #32
 800805e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008062:	f8cd 800c 	str.w	r8, [sp, #12]
 8008066:	2330      	movs	r3, #48	; 0x30
 8008068:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800822c <_vfiprintf_r+0x24c>
 800806c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008070:	f04f 0901 	mov.w	r9, #1
 8008074:	4623      	mov	r3, r4
 8008076:	469a      	mov	sl, r3
 8008078:	f813 2b01 	ldrb.w	r2, [r3], #1
 800807c:	b10a      	cbz	r2, 8008082 <_vfiprintf_r+0xa2>
 800807e:	2a25      	cmp	r2, #37	; 0x25
 8008080:	d1f9      	bne.n	8008076 <_vfiprintf_r+0x96>
 8008082:	ebba 0b04 	subs.w	fp, sl, r4
 8008086:	d00b      	beq.n	80080a0 <_vfiprintf_r+0xc0>
 8008088:	465b      	mov	r3, fp
 800808a:	4622      	mov	r2, r4
 800808c:	4629      	mov	r1, r5
 800808e:	4630      	mov	r0, r6
 8008090:	f7ff ff94 	bl	8007fbc <__sfputs_r>
 8008094:	3001      	adds	r0, #1
 8008096:	f000 80aa 	beq.w	80081ee <_vfiprintf_r+0x20e>
 800809a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800809c:	445a      	add	r2, fp
 800809e:	9209      	str	r2, [sp, #36]	; 0x24
 80080a0:	f89a 3000 	ldrb.w	r3, [sl]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	f000 80a2 	beq.w	80081ee <_vfiprintf_r+0x20e>
 80080aa:	2300      	movs	r3, #0
 80080ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80080b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80080b4:	f10a 0a01 	add.w	sl, sl, #1
 80080b8:	9304      	str	r3, [sp, #16]
 80080ba:	9307      	str	r3, [sp, #28]
 80080bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80080c0:	931a      	str	r3, [sp, #104]	; 0x68
 80080c2:	4654      	mov	r4, sl
 80080c4:	2205      	movs	r2, #5
 80080c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080ca:	4858      	ldr	r0, [pc, #352]	; (800822c <_vfiprintf_r+0x24c>)
 80080cc:	f7f8 f8a0 	bl	8000210 <memchr>
 80080d0:	9a04      	ldr	r2, [sp, #16]
 80080d2:	b9d8      	cbnz	r0, 800810c <_vfiprintf_r+0x12c>
 80080d4:	06d1      	lsls	r1, r2, #27
 80080d6:	bf44      	itt	mi
 80080d8:	2320      	movmi	r3, #32
 80080da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80080de:	0713      	lsls	r3, r2, #28
 80080e0:	bf44      	itt	mi
 80080e2:	232b      	movmi	r3, #43	; 0x2b
 80080e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80080e8:	f89a 3000 	ldrb.w	r3, [sl]
 80080ec:	2b2a      	cmp	r3, #42	; 0x2a
 80080ee:	d015      	beq.n	800811c <_vfiprintf_r+0x13c>
 80080f0:	9a07      	ldr	r2, [sp, #28]
 80080f2:	4654      	mov	r4, sl
 80080f4:	2000      	movs	r0, #0
 80080f6:	f04f 0c0a 	mov.w	ip, #10
 80080fa:	4621      	mov	r1, r4
 80080fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008100:	3b30      	subs	r3, #48	; 0x30
 8008102:	2b09      	cmp	r3, #9
 8008104:	d94e      	bls.n	80081a4 <_vfiprintf_r+0x1c4>
 8008106:	b1b0      	cbz	r0, 8008136 <_vfiprintf_r+0x156>
 8008108:	9207      	str	r2, [sp, #28]
 800810a:	e014      	b.n	8008136 <_vfiprintf_r+0x156>
 800810c:	eba0 0308 	sub.w	r3, r0, r8
 8008110:	fa09 f303 	lsl.w	r3, r9, r3
 8008114:	4313      	orrs	r3, r2
 8008116:	9304      	str	r3, [sp, #16]
 8008118:	46a2      	mov	sl, r4
 800811a:	e7d2      	b.n	80080c2 <_vfiprintf_r+0xe2>
 800811c:	9b03      	ldr	r3, [sp, #12]
 800811e:	1d19      	adds	r1, r3, #4
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	9103      	str	r1, [sp, #12]
 8008124:	2b00      	cmp	r3, #0
 8008126:	bfbb      	ittet	lt
 8008128:	425b      	neglt	r3, r3
 800812a:	f042 0202 	orrlt.w	r2, r2, #2
 800812e:	9307      	strge	r3, [sp, #28]
 8008130:	9307      	strlt	r3, [sp, #28]
 8008132:	bfb8      	it	lt
 8008134:	9204      	strlt	r2, [sp, #16]
 8008136:	7823      	ldrb	r3, [r4, #0]
 8008138:	2b2e      	cmp	r3, #46	; 0x2e
 800813a:	d10c      	bne.n	8008156 <_vfiprintf_r+0x176>
 800813c:	7863      	ldrb	r3, [r4, #1]
 800813e:	2b2a      	cmp	r3, #42	; 0x2a
 8008140:	d135      	bne.n	80081ae <_vfiprintf_r+0x1ce>
 8008142:	9b03      	ldr	r3, [sp, #12]
 8008144:	1d1a      	adds	r2, r3, #4
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	9203      	str	r2, [sp, #12]
 800814a:	2b00      	cmp	r3, #0
 800814c:	bfb8      	it	lt
 800814e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008152:	3402      	adds	r4, #2
 8008154:	9305      	str	r3, [sp, #20]
 8008156:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800823c <_vfiprintf_r+0x25c>
 800815a:	7821      	ldrb	r1, [r4, #0]
 800815c:	2203      	movs	r2, #3
 800815e:	4650      	mov	r0, sl
 8008160:	f7f8 f856 	bl	8000210 <memchr>
 8008164:	b140      	cbz	r0, 8008178 <_vfiprintf_r+0x198>
 8008166:	2340      	movs	r3, #64	; 0x40
 8008168:	eba0 000a 	sub.w	r0, r0, sl
 800816c:	fa03 f000 	lsl.w	r0, r3, r0
 8008170:	9b04      	ldr	r3, [sp, #16]
 8008172:	4303      	orrs	r3, r0
 8008174:	3401      	adds	r4, #1
 8008176:	9304      	str	r3, [sp, #16]
 8008178:	f814 1b01 	ldrb.w	r1, [r4], #1
 800817c:	482c      	ldr	r0, [pc, #176]	; (8008230 <_vfiprintf_r+0x250>)
 800817e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008182:	2206      	movs	r2, #6
 8008184:	f7f8 f844 	bl	8000210 <memchr>
 8008188:	2800      	cmp	r0, #0
 800818a:	d03f      	beq.n	800820c <_vfiprintf_r+0x22c>
 800818c:	4b29      	ldr	r3, [pc, #164]	; (8008234 <_vfiprintf_r+0x254>)
 800818e:	bb1b      	cbnz	r3, 80081d8 <_vfiprintf_r+0x1f8>
 8008190:	9b03      	ldr	r3, [sp, #12]
 8008192:	3307      	adds	r3, #7
 8008194:	f023 0307 	bic.w	r3, r3, #7
 8008198:	3308      	adds	r3, #8
 800819a:	9303      	str	r3, [sp, #12]
 800819c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800819e:	443b      	add	r3, r7
 80081a0:	9309      	str	r3, [sp, #36]	; 0x24
 80081a2:	e767      	b.n	8008074 <_vfiprintf_r+0x94>
 80081a4:	fb0c 3202 	mla	r2, ip, r2, r3
 80081a8:	460c      	mov	r4, r1
 80081aa:	2001      	movs	r0, #1
 80081ac:	e7a5      	b.n	80080fa <_vfiprintf_r+0x11a>
 80081ae:	2300      	movs	r3, #0
 80081b0:	3401      	adds	r4, #1
 80081b2:	9305      	str	r3, [sp, #20]
 80081b4:	4619      	mov	r1, r3
 80081b6:	f04f 0c0a 	mov.w	ip, #10
 80081ba:	4620      	mov	r0, r4
 80081bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80081c0:	3a30      	subs	r2, #48	; 0x30
 80081c2:	2a09      	cmp	r2, #9
 80081c4:	d903      	bls.n	80081ce <_vfiprintf_r+0x1ee>
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d0c5      	beq.n	8008156 <_vfiprintf_r+0x176>
 80081ca:	9105      	str	r1, [sp, #20]
 80081cc:	e7c3      	b.n	8008156 <_vfiprintf_r+0x176>
 80081ce:	fb0c 2101 	mla	r1, ip, r1, r2
 80081d2:	4604      	mov	r4, r0
 80081d4:	2301      	movs	r3, #1
 80081d6:	e7f0      	b.n	80081ba <_vfiprintf_r+0x1da>
 80081d8:	ab03      	add	r3, sp, #12
 80081da:	9300      	str	r3, [sp, #0]
 80081dc:	462a      	mov	r2, r5
 80081de:	4b16      	ldr	r3, [pc, #88]	; (8008238 <_vfiprintf_r+0x258>)
 80081e0:	a904      	add	r1, sp, #16
 80081e2:	4630      	mov	r0, r6
 80081e4:	f7fb f9ac 	bl	8003540 <_printf_float>
 80081e8:	4607      	mov	r7, r0
 80081ea:	1c78      	adds	r0, r7, #1
 80081ec:	d1d6      	bne.n	800819c <_vfiprintf_r+0x1bc>
 80081ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80081f0:	07d9      	lsls	r1, r3, #31
 80081f2:	d405      	bmi.n	8008200 <_vfiprintf_r+0x220>
 80081f4:	89ab      	ldrh	r3, [r5, #12]
 80081f6:	059a      	lsls	r2, r3, #22
 80081f8:	d402      	bmi.n	8008200 <_vfiprintf_r+0x220>
 80081fa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80081fc:	f7ff fe71 	bl	8007ee2 <__retarget_lock_release_recursive>
 8008200:	89ab      	ldrh	r3, [r5, #12]
 8008202:	065b      	lsls	r3, r3, #25
 8008204:	f53f af12 	bmi.w	800802c <_vfiprintf_r+0x4c>
 8008208:	9809      	ldr	r0, [sp, #36]	; 0x24
 800820a:	e711      	b.n	8008030 <_vfiprintf_r+0x50>
 800820c:	ab03      	add	r3, sp, #12
 800820e:	9300      	str	r3, [sp, #0]
 8008210:	462a      	mov	r2, r5
 8008212:	4b09      	ldr	r3, [pc, #36]	; (8008238 <_vfiprintf_r+0x258>)
 8008214:	a904      	add	r1, sp, #16
 8008216:	4630      	mov	r0, r6
 8008218:	f7fb fc36 	bl	8003a88 <_printf_i>
 800821c:	e7e4      	b.n	80081e8 <_vfiprintf_r+0x208>
 800821e:	bf00      	nop
 8008220:	08008ee4 	.word	0x08008ee4
 8008224:	08008f04 	.word	0x08008f04
 8008228:	08008ec4 	.word	0x08008ec4
 800822c:	08008e5c 	.word	0x08008e5c
 8008230:	08008e66 	.word	0x08008e66
 8008234:	08003541 	.word	0x08003541
 8008238:	08007fbd 	.word	0x08007fbd
 800823c:	08008e62 	.word	0x08008e62

08008240 <__swbuf_r>:
 8008240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008242:	460e      	mov	r6, r1
 8008244:	4614      	mov	r4, r2
 8008246:	4605      	mov	r5, r0
 8008248:	b118      	cbz	r0, 8008252 <__swbuf_r+0x12>
 800824a:	6983      	ldr	r3, [r0, #24]
 800824c:	b90b      	cbnz	r3, 8008252 <__swbuf_r+0x12>
 800824e:	f7ff fd97 	bl	8007d80 <__sinit>
 8008252:	4b21      	ldr	r3, [pc, #132]	; (80082d8 <__swbuf_r+0x98>)
 8008254:	429c      	cmp	r4, r3
 8008256:	d12b      	bne.n	80082b0 <__swbuf_r+0x70>
 8008258:	686c      	ldr	r4, [r5, #4]
 800825a:	69a3      	ldr	r3, [r4, #24]
 800825c:	60a3      	str	r3, [r4, #8]
 800825e:	89a3      	ldrh	r3, [r4, #12]
 8008260:	071a      	lsls	r2, r3, #28
 8008262:	d52f      	bpl.n	80082c4 <__swbuf_r+0x84>
 8008264:	6923      	ldr	r3, [r4, #16]
 8008266:	b36b      	cbz	r3, 80082c4 <__swbuf_r+0x84>
 8008268:	6923      	ldr	r3, [r4, #16]
 800826a:	6820      	ldr	r0, [r4, #0]
 800826c:	1ac0      	subs	r0, r0, r3
 800826e:	6963      	ldr	r3, [r4, #20]
 8008270:	b2f6      	uxtb	r6, r6
 8008272:	4283      	cmp	r3, r0
 8008274:	4637      	mov	r7, r6
 8008276:	dc04      	bgt.n	8008282 <__swbuf_r+0x42>
 8008278:	4621      	mov	r1, r4
 800827a:	4628      	mov	r0, r5
 800827c:	f7ff fcec 	bl	8007c58 <_fflush_r>
 8008280:	bb30      	cbnz	r0, 80082d0 <__swbuf_r+0x90>
 8008282:	68a3      	ldr	r3, [r4, #8]
 8008284:	3b01      	subs	r3, #1
 8008286:	60a3      	str	r3, [r4, #8]
 8008288:	6823      	ldr	r3, [r4, #0]
 800828a:	1c5a      	adds	r2, r3, #1
 800828c:	6022      	str	r2, [r4, #0]
 800828e:	701e      	strb	r6, [r3, #0]
 8008290:	6963      	ldr	r3, [r4, #20]
 8008292:	3001      	adds	r0, #1
 8008294:	4283      	cmp	r3, r0
 8008296:	d004      	beq.n	80082a2 <__swbuf_r+0x62>
 8008298:	89a3      	ldrh	r3, [r4, #12]
 800829a:	07db      	lsls	r3, r3, #31
 800829c:	d506      	bpl.n	80082ac <__swbuf_r+0x6c>
 800829e:	2e0a      	cmp	r6, #10
 80082a0:	d104      	bne.n	80082ac <__swbuf_r+0x6c>
 80082a2:	4621      	mov	r1, r4
 80082a4:	4628      	mov	r0, r5
 80082a6:	f7ff fcd7 	bl	8007c58 <_fflush_r>
 80082aa:	b988      	cbnz	r0, 80082d0 <__swbuf_r+0x90>
 80082ac:	4638      	mov	r0, r7
 80082ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80082b0:	4b0a      	ldr	r3, [pc, #40]	; (80082dc <__swbuf_r+0x9c>)
 80082b2:	429c      	cmp	r4, r3
 80082b4:	d101      	bne.n	80082ba <__swbuf_r+0x7a>
 80082b6:	68ac      	ldr	r4, [r5, #8]
 80082b8:	e7cf      	b.n	800825a <__swbuf_r+0x1a>
 80082ba:	4b09      	ldr	r3, [pc, #36]	; (80082e0 <__swbuf_r+0xa0>)
 80082bc:	429c      	cmp	r4, r3
 80082be:	bf08      	it	eq
 80082c0:	68ec      	ldreq	r4, [r5, #12]
 80082c2:	e7ca      	b.n	800825a <__swbuf_r+0x1a>
 80082c4:	4621      	mov	r1, r4
 80082c6:	4628      	mov	r0, r5
 80082c8:	f000 f80c 	bl	80082e4 <__swsetup_r>
 80082cc:	2800      	cmp	r0, #0
 80082ce:	d0cb      	beq.n	8008268 <__swbuf_r+0x28>
 80082d0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80082d4:	e7ea      	b.n	80082ac <__swbuf_r+0x6c>
 80082d6:	bf00      	nop
 80082d8:	08008ee4 	.word	0x08008ee4
 80082dc:	08008f04 	.word	0x08008f04
 80082e0:	08008ec4 	.word	0x08008ec4

080082e4 <__swsetup_r>:
 80082e4:	4b32      	ldr	r3, [pc, #200]	; (80083b0 <__swsetup_r+0xcc>)
 80082e6:	b570      	push	{r4, r5, r6, lr}
 80082e8:	681d      	ldr	r5, [r3, #0]
 80082ea:	4606      	mov	r6, r0
 80082ec:	460c      	mov	r4, r1
 80082ee:	b125      	cbz	r5, 80082fa <__swsetup_r+0x16>
 80082f0:	69ab      	ldr	r3, [r5, #24]
 80082f2:	b913      	cbnz	r3, 80082fa <__swsetup_r+0x16>
 80082f4:	4628      	mov	r0, r5
 80082f6:	f7ff fd43 	bl	8007d80 <__sinit>
 80082fa:	4b2e      	ldr	r3, [pc, #184]	; (80083b4 <__swsetup_r+0xd0>)
 80082fc:	429c      	cmp	r4, r3
 80082fe:	d10f      	bne.n	8008320 <__swsetup_r+0x3c>
 8008300:	686c      	ldr	r4, [r5, #4]
 8008302:	89a3      	ldrh	r3, [r4, #12]
 8008304:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008308:	0719      	lsls	r1, r3, #28
 800830a:	d42c      	bmi.n	8008366 <__swsetup_r+0x82>
 800830c:	06dd      	lsls	r5, r3, #27
 800830e:	d411      	bmi.n	8008334 <__swsetup_r+0x50>
 8008310:	2309      	movs	r3, #9
 8008312:	6033      	str	r3, [r6, #0]
 8008314:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008318:	81a3      	strh	r3, [r4, #12]
 800831a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800831e:	e03e      	b.n	800839e <__swsetup_r+0xba>
 8008320:	4b25      	ldr	r3, [pc, #148]	; (80083b8 <__swsetup_r+0xd4>)
 8008322:	429c      	cmp	r4, r3
 8008324:	d101      	bne.n	800832a <__swsetup_r+0x46>
 8008326:	68ac      	ldr	r4, [r5, #8]
 8008328:	e7eb      	b.n	8008302 <__swsetup_r+0x1e>
 800832a:	4b24      	ldr	r3, [pc, #144]	; (80083bc <__swsetup_r+0xd8>)
 800832c:	429c      	cmp	r4, r3
 800832e:	bf08      	it	eq
 8008330:	68ec      	ldreq	r4, [r5, #12]
 8008332:	e7e6      	b.n	8008302 <__swsetup_r+0x1e>
 8008334:	0758      	lsls	r0, r3, #29
 8008336:	d512      	bpl.n	800835e <__swsetup_r+0x7a>
 8008338:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800833a:	b141      	cbz	r1, 800834e <__swsetup_r+0x6a>
 800833c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008340:	4299      	cmp	r1, r3
 8008342:	d002      	beq.n	800834a <__swsetup_r+0x66>
 8008344:	4630      	mov	r0, r6
 8008346:	f7fe fd4f 	bl	8006de8 <_free_r>
 800834a:	2300      	movs	r3, #0
 800834c:	6363      	str	r3, [r4, #52]	; 0x34
 800834e:	89a3      	ldrh	r3, [r4, #12]
 8008350:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008354:	81a3      	strh	r3, [r4, #12]
 8008356:	2300      	movs	r3, #0
 8008358:	6063      	str	r3, [r4, #4]
 800835a:	6923      	ldr	r3, [r4, #16]
 800835c:	6023      	str	r3, [r4, #0]
 800835e:	89a3      	ldrh	r3, [r4, #12]
 8008360:	f043 0308 	orr.w	r3, r3, #8
 8008364:	81a3      	strh	r3, [r4, #12]
 8008366:	6923      	ldr	r3, [r4, #16]
 8008368:	b94b      	cbnz	r3, 800837e <__swsetup_r+0x9a>
 800836a:	89a3      	ldrh	r3, [r4, #12]
 800836c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008370:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008374:	d003      	beq.n	800837e <__swsetup_r+0x9a>
 8008376:	4621      	mov	r1, r4
 8008378:	4630      	mov	r0, r6
 800837a:	f000 f84d 	bl	8008418 <__smakebuf_r>
 800837e:	89a0      	ldrh	r0, [r4, #12]
 8008380:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008384:	f010 0301 	ands.w	r3, r0, #1
 8008388:	d00a      	beq.n	80083a0 <__swsetup_r+0xbc>
 800838a:	2300      	movs	r3, #0
 800838c:	60a3      	str	r3, [r4, #8]
 800838e:	6963      	ldr	r3, [r4, #20]
 8008390:	425b      	negs	r3, r3
 8008392:	61a3      	str	r3, [r4, #24]
 8008394:	6923      	ldr	r3, [r4, #16]
 8008396:	b943      	cbnz	r3, 80083aa <__swsetup_r+0xc6>
 8008398:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800839c:	d1ba      	bne.n	8008314 <__swsetup_r+0x30>
 800839e:	bd70      	pop	{r4, r5, r6, pc}
 80083a0:	0781      	lsls	r1, r0, #30
 80083a2:	bf58      	it	pl
 80083a4:	6963      	ldrpl	r3, [r4, #20]
 80083a6:	60a3      	str	r3, [r4, #8]
 80083a8:	e7f4      	b.n	8008394 <__swsetup_r+0xb0>
 80083aa:	2000      	movs	r0, #0
 80083ac:	e7f7      	b.n	800839e <__swsetup_r+0xba>
 80083ae:	bf00      	nop
 80083b0:	2000001c 	.word	0x2000001c
 80083b4:	08008ee4 	.word	0x08008ee4
 80083b8:	08008f04 	.word	0x08008f04
 80083bc:	08008ec4 	.word	0x08008ec4

080083c0 <abort>:
 80083c0:	b508      	push	{r3, lr}
 80083c2:	2006      	movs	r0, #6
 80083c4:	f000 f898 	bl	80084f8 <raise>
 80083c8:	2001      	movs	r0, #1
 80083ca:	f7f9 fd80 	bl	8001ece <_exit>

080083ce <__swhatbuf_r>:
 80083ce:	b570      	push	{r4, r5, r6, lr}
 80083d0:	460e      	mov	r6, r1
 80083d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083d6:	2900      	cmp	r1, #0
 80083d8:	b096      	sub	sp, #88	; 0x58
 80083da:	4614      	mov	r4, r2
 80083dc:	461d      	mov	r5, r3
 80083de:	da08      	bge.n	80083f2 <__swhatbuf_r+0x24>
 80083e0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80083e4:	2200      	movs	r2, #0
 80083e6:	602a      	str	r2, [r5, #0]
 80083e8:	061a      	lsls	r2, r3, #24
 80083ea:	d410      	bmi.n	800840e <__swhatbuf_r+0x40>
 80083ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80083f0:	e00e      	b.n	8008410 <__swhatbuf_r+0x42>
 80083f2:	466a      	mov	r2, sp
 80083f4:	f000 f89c 	bl	8008530 <_fstat_r>
 80083f8:	2800      	cmp	r0, #0
 80083fa:	dbf1      	blt.n	80083e0 <__swhatbuf_r+0x12>
 80083fc:	9a01      	ldr	r2, [sp, #4]
 80083fe:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008402:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008406:	425a      	negs	r2, r3
 8008408:	415a      	adcs	r2, r3
 800840a:	602a      	str	r2, [r5, #0]
 800840c:	e7ee      	b.n	80083ec <__swhatbuf_r+0x1e>
 800840e:	2340      	movs	r3, #64	; 0x40
 8008410:	2000      	movs	r0, #0
 8008412:	6023      	str	r3, [r4, #0]
 8008414:	b016      	add	sp, #88	; 0x58
 8008416:	bd70      	pop	{r4, r5, r6, pc}

08008418 <__smakebuf_r>:
 8008418:	898b      	ldrh	r3, [r1, #12]
 800841a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800841c:	079d      	lsls	r5, r3, #30
 800841e:	4606      	mov	r6, r0
 8008420:	460c      	mov	r4, r1
 8008422:	d507      	bpl.n	8008434 <__smakebuf_r+0x1c>
 8008424:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008428:	6023      	str	r3, [r4, #0]
 800842a:	6123      	str	r3, [r4, #16]
 800842c:	2301      	movs	r3, #1
 800842e:	6163      	str	r3, [r4, #20]
 8008430:	b002      	add	sp, #8
 8008432:	bd70      	pop	{r4, r5, r6, pc}
 8008434:	ab01      	add	r3, sp, #4
 8008436:	466a      	mov	r2, sp
 8008438:	f7ff ffc9 	bl	80083ce <__swhatbuf_r>
 800843c:	9900      	ldr	r1, [sp, #0]
 800843e:	4605      	mov	r5, r0
 8008440:	4630      	mov	r0, r6
 8008442:	f7fe fd3d 	bl	8006ec0 <_malloc_r>
 8008446:	b948      	cbnz	r0, 800845c <__smakebuf_r+0x44>
 8008448:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800844c:	059a      	lsls	r2, r3, #22
 800844e:	d4ef      	bmi.n	8008430 <__smakebuf_r+0x18>
 8008450:	f023 0303 	bic.w	r3, r3, #3
 8008454:	f043 0302 	orr.w	r3, r3, #2
 8008458:	81a3      	strh	r3, [r4, #12]
 800845a:	e7e3      	b.n	8008424 <__smakebuf_r+0xc>
 800845c:	4b0d      	ldr	r3, [pc, #52]	; (8008494 <__smakebuf_r+0x7c>)
 800845e:	62b3      	str	r3, [r6, #40]	; 0x28
 8008460:	89a3      	ldrh	r3, [r4, #12]
 8008462:	6020      	str	r0, [r4, #0]
 8008464:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008468:	81a3      	strh	r3, [r4, #12]
 800846a:	9b00      	ldr	r3, [sp, #0]
 800846c:	6163      	str	r3, [r4, #20]
 800846e:	9b01      	ldr	r3, [sp, #4]
 8008470:	6120      	str	r0, [r4, #16]
 8008472:	b15b      	cbz	r3, 800848c <__smakebuf_r+0x74>
 8008474:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008478:	4630      	mov	r0, r6
 800847a:	f000 f86b 	bl	8008554 <_isatty_r>
 800847e:	b128      	cbz	r0, 800848c <__smakebuf_r+0x74>
 8008480:	89a3      	ldrh	r3, [r4, #12]
 8008482:	f023 0303 	bic.w	r3, r3, #3
 8008486:	f043 0301 	orr.w	r3, r3, #1
 800848a:	81a3      	strh	r3, [r4, #12]
 800848c:	89a0      	ldrh	r0, [r4, #12]
 800848e:	4305      	orrs	r5, r0
 8008490:	81a5      	strh	r5, [r4, #12]
 8008492:	e7cd      	b.n	8008430 <__smakebuf_r+0x18>
 8008494:	08007d19 	.word	0x08007d19

08008498 <_malloc_usable_size_r>:
 8008498:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800849c:	1f18      	subs	r0, r3, #4
 800849e:	2b00      	cmp	r3, #0
 80084a0:	bfbc      	itt	lt
 80084a2:	580b      	ldrlt	r3, [r1, r0]
 80084a4:	18c0      	addlt	r0, r0, r3
 80084a6:	4770      	bx	lr

080084a8 <_raise_r>:
 80084a8:	291f      	cmp	r1, #31
 80084aa:	b538      	push	{r3, r4, r5, lr}
 80084ac:	4604      	mov	r4, r0
 80084ae:	460d      	mov	r5, r1
 80084b0:	d904      	bls.n	80084bc <_raise_r+0x14>
 80084b2:	2316      	movs	r3, #22
 80084b4:	6003      	str	r3, [r0, #0]
 80084b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80084ba:	bd38      	pop	{r3, r4, r5, pc}
 80084bc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80084be:	b112      	cbz	r2, 80084c6 <_raise_r+0x1e>
 80084c0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80084c4:	b94b      	cbnz	r3, 80084da <_raise_r+0x32>
 80084c6:	4620      	mov	r0, r4
 80084c8:	f000 f830 	bl	800852c <_getpid_r>
 80084cc:	462a      	mov	r2, r5
 80084ce:	4601      	mov	r1, r0
 80084d0:	4620      	mov	r0, r4
 80084d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80084d6:	f000 b817 	b.w	8008508 <_kill_r>
 80084da:	2b01      	cmp	r3, #1
 80084dc:	d00a      	beq.n	80084f4 <_raise_r+0x4c>
 80084de:	1c59      	adds	r1, r3, #1
 80084e0:	d103      	bne.n	80084ea <_raise_r+0x42>
 80084e2:	2316      	movs	r3, #22
 80084e4:	6003      	str	r3, [r0, #0]
 80084e6:	2001      	movs	r0, #1
 80084e8:	e7e7      	b.n	80084ba <_raise_r+0x12>
 80084ea:	2400      	movs	r4, #0
 80084ec:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80084f0:	4628      	mov	r0, r5
 80084f2:	4798      	blx	r3
 80084f4:	2000      	movs	r0, #0
 80084f6:	e7e0      	b.n	80084ba <_raise_r+0x12>

080084f8 <raise>:
 80084f8:	4b02      	ldr	r3, [pc, #8]	; (8008504 <raise+0xc>)
 80084fa:	4601      	mov	r1, r0
 80084fc:	6818      	ldr	r0, [r3, #0]
 80084fe:	f7ff bfd3 	b.w	80084a8 <_raise_r>
 8008502:	bf00      	nop
 8008504:	2000001c 	.word	0x2000001c

08008508 <_kill_r>:
 8008508:	b538      	push	{r3, r4, r5, lr}
 800850a:	4d07      	ldr	r5, [pc, #28]	; (8008528 <_kill_r+0x20>)
 800850c:	2300      	movs	r3, #0
 800850e:	4604      	mov	r4, r0
 8008510:	4608      	mov	r0, r1
 8008512:	4611      	mov	r1, r2
 8008514:	602b      	str	r3, [r5, #0]
 8008516:	f7f9 fcca 	bl	8001eae <_kill>
 800851a:	1c43      	adds	r3, r0, #1
 800851c:	d102      	bne.n	8008524 <_kill_r+0x1c>
 800851e:	682b      	ldr	r3, [r5, #0]
 8008520:	b103      	cbz	r3, 8008524 <_kill_r+0x1c>
 8008522:	6023      	str	r3, [r4, #0]
 8008524:	bd38      	pop	{r3, r4, r5, pc}
 8008526:	bf00      	nop
 8008528:	200006f4 	.word	0x200006f4

0800852c <_getpid_r>:
 800852c:	f7f9 bcb7 	b.w	8001e9e <_getpid>

08008530 <_fstat_r>:
 8008530:	b538      	push	{r3, r4, r5, lr}
 8008532:	4d07      	ldr	r5, [pc, #28]	; (8008550 <_fstat_r+0x20>)
 8008534:	2300      	movs	r3, #0
 8008536:	4604      	mov	r4, r0
 8008538:	4608      	mov	r0, r1
 800853a:	4611      	mov	r1, r2
 800853c:	602b      	str	r3, [r5, #0]
 800853e:	f7f9 fd15 	bl	8001f6c <_fstat>
 8008542:	1c43      	adds	r3, r0, #1
 8008544:	d102      	bne.n	800854c <_fstat_r+0x1c>
 8008546:	682b      	ldr	r3, [r5, #0]
 8008548:	b103      	cbz	r3, 800854c <_fstat_r+0x1c>
 800854a:	6023      	str	r3, [r4, #0]
 800854c:	bd38      	pop	{r3, r4, r5, pc}
 800854e:	bf00      	nop
 8008550:	200006f4 	.word	0x200006f4

08008554 <_isatty_r>:
 8008554:	b538      	push	{r3, r4, r5, lr}
 8008556:	4d06      	ldr	r5, [pc, #24]	; (8008570 <_isatty_r+0x1c>)
 8008558:	2300      	movs	r3, #0
 800855a:	4604      	mov	r4, r0
 800855c:	4608      	mov	r0, r1
 800855e:	602b      	str	r3, [r5, #0]
 8008560:	f7f9 fd14 	bl	8001f8c <_isatty>
 8008564:	1c43      	adds	r3, r0, #1
 8008566:	d102      	bne.n	800856e <_isatty_r+0x1a>
 8008568:	682b      	ldr	r3, [r5, #0]
 800856a:	b103      	cbz	r3, 800856e <_isatty_r+0x1a>
 800856c:	6023      	str	r3, [r4, #0]
 800856e:	bd38      	pop	{r3, r4, r5, pc}
 8008570:	200006f4 	.word	0x200006f4

08008574 <_init>:
 8008574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008576:	bf00      	nop
 8008578:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800857a:	bc08      	pop	{r3}
 800857c:	469e      	mov	lr, r3
 800857e:	4770      	bx	lr

08008580 <_fini>:
 8008580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008582:	bf00      	nop
 8008584:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008586:	bc08      	pop	{r3}
 8008588:	469e      	mov	lr, r3
 800858a:	4770      	bx	lr
